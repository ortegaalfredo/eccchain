int nzeros = 0,nones=0;
int parityerrors=0,parity=0;
for (int r=0;r<MAXROUNDS;r++) {
memcpy(vnodeI,cwI,numVnodes);
if (cwI[0]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[0]) nones=1; else nzeros=1; // count the original value
if (responseI[292]) nones++;
else nzeros++;
if (responseI[360]) nones++;
else nzeros++;
if (responseI[420]) nones++;
else nzeros++;
if (responseI[510]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[0]=0;
	else	if (nzeros<nones) vnodeI[0]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[0];
 }
if (cwI[1]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1]) nones=1; else nzeros=1; // count the original value
if (responseI[619]) nones++;
else nzeros++;
if (responseI[844]) nones++;
else nzeros++;
if (responseI[860]) nones++;
else nzeros++;
if (responseI[909]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1]=0;
	else	if (nzeros<nones) vnodeI[1]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1];
 }
if (cwI[2]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[2]) nones=1; else nzeros=1; // count the original value
if (responseI[1245]) nones++;
else nzeros++;
if (responseI[1394]) nones++;
else nzeros++;
if (responseI[1402]) nones++;
else nzeros++;
if (responseI[1464]) nones++;
else nzeros++;
if (responseI[1533]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[2]=0;
	else	if (nzeros<nones) vnodeI[2]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[2];
 }
if (cwI[3]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[3]) nones=1; else nzeros=1; // count the original value
if (responseI[1717]) nones++;
else nzeros++;
if (responseI[1831]) nones++;
else nzeros++;
if (responseI[1964]) nones++;
else nzeros++;
if (responseI[2021]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[3]=0;
	else	if (nzeros<nones) vnodeI[3]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[3];
 }
if (cwI[4]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[4]) nones=1; else nzeros=1; // count the original value
if (responseI[2210]) nones++;
else nzeros++;
if (responseI[2315]) nones++;
else nzeros++;
if (responseI[2471]) nones++;
else nzeros++;
if (responseI[2479]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[4]=0;
	else	if (nzeros<nones) vnodeI[4]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[4];
 }
if (cwI[5]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[5]) nones=1; else nzeros=1; // count the original value
if (responseI[2570]) nones++;
else nzeros++;
if (responseI[2597]) nones++;
else nzeros++;
if (responseI[2619]) nones++;
else nzeros++;
if (responseI[2639]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[5]=0;
	else	if (nzeros<nones) vnodeI[5]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[5];
 }
if (cwI[6]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[6]) nones=1; else nzeros=1; // count the original value
if (responseI[3168]) nones++;
else nzeros++;
if (responseI[3370]) nones++;
else nzeros++;
if (responseI[3398]) nones++;
else nzeros++;
if (responseI[3419]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[6]=0;
	else	if (nzeros<nones) vnodeI[6]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[6];
 }
if (cwI[7]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[7]) nones=1; else nzeros=1; // count the original value
if (responseI[3804]) nones++;
else nzeros++;
if (responseI[3850]) nones++;
else nzeros++;
if (responseI[3884]) nones++;
else nzeros++;
if (responseI[3962]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[7]=0;
	else	if (nzeros<nones) vnodeI[7]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[7];
 }
if (cwI[8]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[8]) nones=1; else nzeros=1; // count the original value
if (responseI[4145]) nones++;
else nzeros++;
if (responseI[4304]) nones++;
else nzeros++;
if (responseI[4408]) nones++;
else nzeros++;
if (responseI[4600]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[8]=0;
	else	if (nzeros<nones) vnodeI[8]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[8];
 }
if (cwI[9]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[9]) nones=1; else nzeros=1; // count the original value
if (responseI[4637]) nones++;
else nzeros++;
if (responseI[4969]) nones++;
else nzeros++;
if (responseI[5035]) nones++;
else nzeros++;
if (responseI[5042]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[9]=0;
	else	if (nzeros<nones) vnodeI[9]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[9];
 }
if (cwI[10]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[10]) nones=1; else nzeros=1; // count the original value
if (responseI[5170]) nones++;
else nzeros++;
if (responseI[5203]) nones++;
else nzeros++;
if (responseI[5399]) nones++;
else nzeros++;
if (responseI[5622]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[10]=0;
	else	if (nzeros<nones) vnodeI[10]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[10];
 }
if (cwI[11]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[11]) nones=1; else nzeros=1; // count the original value
if (responseI[5663]) nones++;
else nzeros++;
if (responseI[5776]) nones++;
else nzeros++;
if (responseI[6091]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[11]=0;
	else	if (nzeros<nones) vnodeI[11]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[11];
 }
if (cwI[12]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[12]) nones=1; else nzeros=1; // count the original value
if (responseI[6234]) nones++;
else nzeros++;
if (responseI[6465]) nones++;
else nzeros++;
if (responseI[6510]) nones++;
else nzeros++;
if (responseI[6574]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[12]=0;
	else	if (nzeros<nones) vnodeI[12]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[12];
 }
if (cwI[13]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[13]) nones=1; else nzeros=1; // count the original value
if (responseI[6794]) nones++;
else nzeros++;
if (responseI[6938]) nones++;
else nzeros++;
if (responseI[6968]) nones++;
else nzeros++;
if (responseI[7034]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[13]=0;
	else	if (nzeros<nones) vnodeI[13]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[13];
 }
if (cwI[14]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[14]) nones=1; else nzeros=1; // count the original value
if (responseI[7553]) nones++;
else nzeros++;
if (responseI[7563]) nones++;
else nzeros++;
if (responseI[7579]) nones++;
else nzeros++;
if (responseI[7624]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[14]=0;
	else	if (nzeros<nones) vnodeI[14]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[14];
 }
if (cwI[15]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[15]) nones=1; else nzeros=1; // count the original value
if (responseI[7766]) nones++;
else nzeros++;
if (responseI[7863]) nones++;
else nzeros++;
if (responseI[7882]) nones++;
else nzeros++;
if (responseI[8017]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[15]=0;
	else	if (nzeros<nones) vnodeI[15]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[15];
 }
if (cwI[16]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[16]) nones=1; else nzeros=1; // count the original value
if (responseI[8301]) nones++;
else nzeros++;
if (responseI[8460]) nones++;
else nzeros++;
if (responseI[8515]) nones++;
else nzeros++;
if (responseI[8572]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[16]=0;
	else	if (nzeros<nones) vnodeI[16]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[16];
 }
if (cwI[17]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[17]) nones=1; else nzeros=1; // count the original value
if (responseI[8819]) nones++;
else nzeros++;
if (responseI[8838]) nones++;
else nzeros++;
if (responseI[8946]) nones++;
else nzeros++;
if (responseI[9141]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[17]=0;
	else	if (nzeros<nones) vnodeI[17]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[17];
 }
if (cwI[18]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[18]) nones=1; else nzeros=1; // count the original value
if (responseI[9333]) nones++;
else nzeros++;
if (responseI[9449]) nones++;
else nzeros++;
if (responseI[9607]) nones++;
else nzeros++;
if (responseI[9615]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[18]=0;
	else	if (nzeros<nones) vnodeI[18]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[18];
 }
if (cwI[19]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[19]) nones=1; else nzeros=1; // count the original value
if (responseI[10013]) nones++;
else nzeros++;
if (responseI[10100]) nones++;
else nzeros++;
if (responseI[10151]) nones++;
else nzeros++;
if (responseI[10187]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[19]=0;
	else	if (nzeros<nones) vnodeI[19]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[19];
 }
if (cwI[20]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[20]) nones=1; else nzeros=1; // count the original value
if (responseI[10343]) nones++;
else nzeros++;
if (responseI[10382]) nones++;
else nzeros++;
if (responseI[10503]) nones++;
else nzeros++;
if (responseI[10508]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[20]=0;
	else	if (nzeros<nones) vnodeI[20]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[20];
 }
if (cwI[21]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[21]) nones=1; else nzeros=1; // count the original value
if (responseI[10874]) nones++;
else nzeros++;
if (responseI[10980]) nones++;
else nzeros++;
if (responseI[11118]) nones++;
else nzeros++;
if (responseI[11173]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[21]=0;
	else	if (nzeros<nones) vnodeI[21]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[21];
 }
if (cwI[22]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[22]) nones=1; else nzeros=1; // count the original value
if (responseI[11400]) nones++;
else nzeros++;
if (responseI[11462]) nones++;
else nzeros++;
if (responseI[11652]) nones++;
else nzeros++;
if (responseI[11736]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[22]=0;
	else	if (nzeros<nones) vnodeI[22]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[22];
 }
if (cwI[23]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[23]) nones=1; else nzeros=1; // count the original value
if (responseI[12059]) nones++;
else nzeros++;
if (responseI[12155]) nones++;
else nzeros++;
if (responseI[12261]) nones++;
else nzeros++;
if (responseI[12281]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[23]=0;
	else	if (nzeros<nones) vnodeI[23]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[23];
 }
if (cwI[24]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[24]) nones=1; else nzeros=1; // count the original value
if (responseI[12332]) nones++;
else nzeros++;
if (responseI[12433]) nones++;
else nzeros++;
if (responseI[12465]) nones++;
else nzeros++;
if (responseI[12502]) nones++;
else nzeros++;
if (responseI[12674]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[24]=0;
	else	if (nzeros<nones) vnodeI[24]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[24];
 }
if (cwI[25]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[25]) nones=1; else nzeros=1; // count the original value
if (responseI[12952]) nones++;
else nzeros++;
if (responseI[13123]) nones++;
else nzeros++;
if (responseI[13150]) nones++;
else nzeros++;
if (responseI[13291]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[25]=0;
	else	if (nzeros<nones) vnodeI[25]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[25];
 }
if (cwI[26]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[26]) nones=1; else nzeros=1; // count the original value
if (responseI[13506]) nones++;
else nzeros++;
if (responseI[13571]) nones++;
else nzeros++;
if (responseI[13647]) nones++;
else nzeros++;
if (responseI[13809]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[26]=0;
	else	if (nzeros<nones) vnodeI[26]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[26];
 }
if (cwI[27]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[27]) nones=1; else nzeros=1; // count the original value
if (responseI[13968]) nones++;
else nzeros++;
if (responseI[14109]) nones++;
else nzeros++;
if (responseI[14257]) nones++;
else nzeros++;
if (responseI[14310]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[27]=0;
	else	if (nzeros<nones) vnodeI[27]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[27];
 }
if (cwI[28]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[28]) nones=1; else nzeros=1; // count the original value
if (responseI[14347]) nones++;
else nzeros++;
if (responseI[14456]) nones++;
else nzeros++;
if (responseI[14782]) nones++;
else nzeros++;
if (responseI[14818]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[28]=0;
	else	if (nzeros<nones) vnodeI[28]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[28];
 }
if (cwI[29]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[29]) nones=1; else nzeros=1; // count the original value
if (responseI[14947]) nones++;
else nzeros++;
if (responseI[15120]) nones++;
else nzeros++;
if (responseI[15126]) nones++;
else nzeros++;
if (responseI[15175]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[29]=0;
	else	if (nzeros<nones) vnodeI[29]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[29];
 }
if (cwI[30]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[30]) nones=1; else nzeros=1; // count the original value
if (responseI[15363]) nones++;
else nzeros++;
if (responseI[15368]) nones++;
else nzeros++;
if (responseI[15376]) nones++;
else nzeros++;
if (responseI[15842]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[30]=0;
	else	if (nzeros<nones) vnodeI[30]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[30];
 }
if (cwI[31]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[31]) nones=1; else nzeros=1; // count the original value
if (responseI[15978]) nones++;
else nzeros++;
if (responseI[16102]) nones++;
else nzeros++;
if (responseI[16153]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[31]=0;
	else	if (nzeros<nones) vnodeI[31]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[31];
 }
if (cwI[32]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[32]) nones=1; else nzeros=1; // count the original value
if (responseI[16527]) nones++;
else nzeros++;
if (responseI[16670]) nones++;
else nzeros++;
if (responseI[16770]) nones++;
else nzeros++;
if (responseI[16851]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[32]=0;
	else	if (nzeros<nones) vnodeI[32]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[32];
 }
if (cwI[33]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[33]) nones=1; else nzeros=1; // count the original value
if (responseI[16943]) nones++;
else nzeros++;
if (responseI[17003]) nones++;
else nzeros++;
if (responseI[17294]) nones++;
else nzeros++;
if (responseI[17328]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[33]=0;
	else	if (nzeros<nones) vnodeI[33]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[33];
 }
if (cwI[34]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[34]) nones=1; else nzeros=1; // count the original value
if (responseI[17506]) nones++;
else nzeros++;
if (responseI[17566]) nones++;
else nzeros++;
if (responseI[17765]) nones++;
else nzeros++;
if (responseI[17837]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[34]=0;
	else	if (nzeros<nones) vnodeI[34]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[34];
 }
if (cwI[35]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[35]) nones=1; else nzeros=1; // count the original value
if (responseI[17994]) nones++;
else nzeros++;
if (responseI[18201]) nones++;
else nzeros++;
if (responseI[18328]) nones++;
else nzeros++;
if (responseI[18342]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[35]=0;
	else	if (nzeros<nones) vnodeI[35]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[35];
 }
if (cwI[36]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[36]) nones=1; else nzeros=1; // count the original value
if (responseI[18582]) nones++;
else nzeros++;
if (responseI[18655]) nones++;
else nzeros++;
if (responseI[18792]) nones++;
else nzeros++;
if (responseI[18871]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[36]=0;
	else	if (nzeros<nones) vnodeI[36]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[36];
 }
if (cwI[37]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[37]) nones=1; else nzeros=1; // count the original value
if (responseI[19095]) nones++;
else nzeros++;
if (responseI[19203]) nones++;
else nzeros++;
if (responseI[19292]) nones++;
else nzeros++;
if (responseI[19317]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[37]=0;
	else	if (nzeros<nones) vnodeI[37]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[37];
 }
if (cwI[38]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[38]) nones=1; else nzeros=1; // count the original value
if (responseI[19660]) nones++;
else nzeros++;
if (responseI[19798]) nones++;
else nzeros++;
if (responseI[19881]) nones++;
else nzeros++;
if (responseI[19955]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[38]=0;
	else	if (nzeros<nones) vnodeI[38]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[38];
 }
if (cwI[39]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[39]) nones=1; else nzeros=1; // count the original value
if (responseI[20007]) nones++;
else nzeros++;
if (responseI[20066]) nones++;
else nzeros++;
if (responseI[20131]) nones++;
else nzeros++;
if (responseI[20166]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[39]=0;
	else	if (nzeros<nones) vnodeI[39]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[39];
 }
if (cwI[40]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[40]) nones=1; else nzeros=1; // count the original value
if (responseI[20533]) nones++;
else nzeros++;
if (responseI[20710]) nones++;
else nzeros++;
if (responseI[20805]) nones++;
else nzeros++;
if (responseI[20908]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[40]=0;
	else	if (nzeros<nones) vnodeI[40]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[40];
 }
if (cwI[41]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[41]) nones=1; else nzeros=1; // count the original value
if (responseI[21373]) nones++;
else nzeros++;
if (responseI[21439]) nones++;
else nzeros++;
if (responseI[21471]) nones++;
else nzeros++;
if (responseI[21476]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[41]=0;
	else	if (nzeros<nones) vnodeI[41]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[41];
 }
if (cwI[42]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[42]) nones=1; else nzeros=1; // count the original value
if (responseI[21591]) nones++;
else nzeros++;
if (responseI[21659]) nones++;
else nzeros++;
if (responseI[21695]) nones++;
else nzeros++;
if (responseI[21957]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[42]=0;
	else	if (nzeros<nones) vnodeI[42]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[42];
 }
if (cwI[43]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[43]) nones=1; else nzeros=1; // count the original value
if (responseI[22120]) nones++;
else nzeros++;
if (responseI[22272]) nones++;
else nzeros++;
if (responseI[22307]) nones++;
else nzeros++;
if (responseI[22516]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[43]=0;
	else	if (nzeros<nones) vnodeI[43]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[43];
 }
if (cwI[44]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[44]) nones=1; else nzeros=1; // count the original value
if (responseI[22551]) nones++;
else nzeros++;
if (responseI[22627]) nones++;
else nzeros++;
if (responseI[22769]) nones++;
else nzeros++;
if (responseI[22919]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[44]=0;
	else	if (nzeros<nones) vnodeI[44]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[44];
 }
if (cwI[45]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[45]) nones=1; else nzeros=1; // count the original value
if (responseI[23375]) nones++;
else nzeros++;
if (responseI[23414]) nones++;
else nzeros++;
if (responseI[23546]) nones++;
else nzeros++;
if (responseI[23548]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[45]=0;
	else	if (nzeros<nones) vnodeI[45]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[45];
 }
if (cwI[46]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[46]) nones=1; else nzeros=1; // count the original value
if (responseI[23958]) nones++;
else nzeros++;
if (responseI[23962]) nones++;
else nzeros++;
if (responseI[23968]) nones++;
else nzeros++;
if (responseI[24006]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[46]=0;
	else	if (nzeros<nones) vnodeI[46]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[46];
 }
if (cwI[47]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[47]) nones=1; else nzeros=1; // count the original value
if (responseI[24212]) nones++;
else nzeros++;
if (responseI[24365]) nones++;
else nzeros++;
if (responseI[24392]) nones++;
else nzeros++;
if (responseI[24521]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[47]=0;
	else	if (nzeros<nones) vnodeI[47]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[47];
 }
if (cwI[48]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[48]) nones=1; else nzeros=1; // count the original value
if (responseI[24761]) nones++;
else nzeros++;
if (responseI[24825]) nones++;
else nzeros++;
if (responseI[24955]) nones++;
else nzeros++;
if (responseI[25028]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[48]=0;
	else	if (nzeros<nones) vnodeI[48]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[48];
 }
if (cwI[49]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[49]) nones=1; else nzeros=1; // count the original value
if (responseI[25421]) nones++;
else nzeros++;
if (responseI[25471]) nones++;
else nzeros++;
if (responseI[25475]) nones++;
else nzeros++;
if (responseI[25506]) nones++;
else nzeros++;
if (responseI[25530]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[49]=0;
	else	if (nzeros<nones) vnodeI[49]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[49];
 }
if (cwI[50]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[50]) nones=1; else nzeros=1; // count the original value
if (responseI[25875]) nones++;
else nzeros++;
if (responseI[25941]) nones++;
else nzeros++;
if (responseI[25943]) nones++;
else nzeros++;
if (responseI[26074]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[50]=0;
	else	if (nzeros<nones) vnodeI[50]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[50];
 }
if (cwI[51]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[51]) nones=1; else nzeros=1; // count the original value
if (responseI[26180]) nones++;
else nzeros++;
if (responseI[26320]) nones++;
else nzeros++;
if (responseI[26336]) nones++;
else nzeros++;
if (responseI[26461]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[51]=0;
	else	if (nzeros<nones) vnodeI[51]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[51];
 }
if (cwI[52]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[52]) nones=1; else nzeros=1; // count the original value
if (responseI[26669]) nones++;
else nzeros++;
if (responseI[26846]) nones++;
else nzeros++;
if (responseI[26864]) nones++;
else nzeros++;
if (responseI[27057]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[52]=0;
	else	if (nzeros<nones) vnodeI[52]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[52];
 }
if (cwI[53]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[53]) nones=1; else nzeros=1; // count the original value
if (responseI[27157]) nones++;
else nzeros++;
if (responseI[27177]) nones++;
else nzeros++;
if (responseI[27188]) nones++;
else nzeros++;
if (responseI[27446]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[53]=0;
	else	if (nzeros<nones) vnodeI[53]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[53];
 }
if (cwI[54]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[54]) nones=1; else nzeros=1; // count the original value
if (responseI[27809]) nones++;
else nzeros++;
if (responseI[27925]) nones++;
else nzeros++;
if (responseI[28012]) nones++;
else nzeros++;
if (responseI[28152]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[54]=0;
	else	if (nzeros<nones) vnodeI[54]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[54];
 }
if (cwI[55]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[55]) nones=1; else nzeros=1; // count the original value
if (responseI[28330]) nones++;
else nzeros++;
if (responseI[28405]) nones++;
else nzeros++;
if (responseI[28484]) nones++;
else nzeros++;
if (responseI[28486]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[55]=0;
	else	if (nzeros<nones) vnodeI[55]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[55];
 }
if (cwI[56]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[56]) nones=1; else nzeros=1; // count the original value
if (responseI[28836]) nones++;
else nzeros++;
if (responseI[28925]) nones++;
else nzeros++;
if (responseI[28980]) nones++;
else nzeros++;
if (responseI[29160]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[56]=0;
	else	if (nzeros<nones) vnodeI[56]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[56];
 }
if (cwI[57]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[57]) nones=1; else nzeros=1; // count the original value
if (responseI[29237]) nones++;
else nzeros++;
if (responseI[29358]) nones++;
else nzeros++;
if (responseI[29425]) nones++;
else nzeros++;
if (responseI[29548]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[57]=0;
	else	if (nzeros<nones) vnodeI[57]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[57];
 }
if (cwI[58]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[58]) nones=1; else nzeros=1; // count the original value
if (responseI[29758]) nones++;
else nzeros++;
if (responseI[29842]) nones++;
else nzeros++;
if (responseI[29895]) nones++;
else nzeros++;
if (responseI[29951]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[58]=0;
	else	if (nzeros<nones) vnodeI[58]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[58];
 }
if (cwI[59]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[59]) nones=1; else nzeros=1; // count the original value
if (responseI[30455]) nones++;
else nzeros++;
if (responseI[30470]) nones++;
else nzeros++;
if (responseI[30478]) nones++;
else nzeros++;
if (responseI[30606]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[59]=0;
	else	if (nzeros<nones) vnodeI[59]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[59];
 }
if (cwI[60]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[60]) nones=1; else nzeros=1; // count the original value
if (responseI[30725]) nones++;
else nzeros++;
if (responseI[30774]) nones++;
else nzeros++;
if (responseI[30896]) nones++;
else nzeros++;
if (responseI[31104]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[60]=0;
	else	if (nzeros<nones) vnodeI[60]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[60];
 }
if (cwI[61]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[61]) nones=1; else nzeros=1; // count the original value
if (responseI[31350]) nones++;
else nzeros++;
if (responseI[31397]) nones++;
else nzeros++;
if (responseI[31507]) nones++;
else nzeros++;
if (responseI[31641]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[61]=0;
	else	if (nzeros<nones) vnodeI[61]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[61];
 }
if (cwI[62]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[62]) nones=1; else nzeros=1; // count the original value
if (responseI[31746]) nones++;
else nzeros++;
if (responseI[31792]) nones++;
else nzeros++;
if (responseI[31856]) nones++;
else nzeros++;
if (responseI[31899]) nones++;
else nzeros++;
if (responseI[32079]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[62]=0;
	else	if (nzeros<nones) vnodeI[62]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[62];
 }
if (cwI[63]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[63]) nones=1; else nzeros=1; // count the original value
if (responseI[32299]) nones++;
else nzeros++;
if (responseI[32632]) nones++;
else nzeros++;
if (responseI[32639]) nones++;
else nzeros++;
if (responseI[32763]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[63]=0;
	else	if (nzeros<nones) vnodeI[63]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[63];
 }
if (cwI[64]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[64]) nones=1; else nzeros=1; // count the original value
if (responseI[33032]) nones++;
else nzeros++;
if (responseI[33044]) nones++;
else nzeros++;
if (responseI[33194]) nones++;
else nzeros++;
if (responseI[33204]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[64]=0;
	else	if (nzeros<nones) vnodeI[64]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[64];
 }
if (cwI[65]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[65]) nones=1; else nzeros=1; // count the original value
if (responseI[33389]) nones++;
else nzeros++;
if (responseI[33510]) nones++;
else nzeros++;
if (responseI[33511]) nones++;
else nzeros++;
if (responseI[33551]) nones++;
else nzeros++;
if (responseI[33647]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[65]=0;
	else	if (nzeros<nones) vnodeI[65]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[65];
 }
if (cwI[66]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[66]) nones=1; else nzeros=1; // count the original value
if (responseI[33881]) nones++;
else nzeros++;
if (responseI[33902]) nones++;
else nzeros++;
if (responseI[33994]) nones++;
else nzeros++;
if (responseI[34286]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[66]=0;
	else	if (nzeros<nones) vnodeI[66]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[66];
 }
if (cwI[67]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[67]) nones=1; else nzeros=1; // count the original value
if (responseI[34573]) nones++;
else nzeros++;
if (responseI[34617]) nones++;
else nzeros++;
if (responseI[34633]) nones++;
else nzeros++;
if (responseI[34677]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[67]=0;
	else	if (nzeros<nones) vnodeI[67]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[67];
 }
if (cwI[68]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[68]) nones=1; else nzeros=1; // count the original value
if (responseI[34952]) nones++;
else nzeros++;
if (responseI[34981]) nones++;
else nzeros++;
if (responseI[35034]) nones++;
else nzeros++;
if (responseI[35118]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[68]=0;
	else	if (nzeros<nones) vnodeI[68]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[68];
 }
if (cwI[69]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[69]) nones=1; else nzeros=1; // count the original value
if (responseI[35339]) nones++;
else nzeros++;
if (responseI[35691]) nones++;
else nzeros++;
if (responseI[35757]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[69]=0;
	else	if (nzeros<nones) vnodeI[69]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[69];
 }
if (cwI[70]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[70]) nones=1; else nzeros=1; // count the original value
if (responseI[36203]) nones++;
else nzeros++;
if (responseI[36207]) nones++;
else nzeros++;
if (responseI[36264]) nones++;
else nzeros++;
if (responseI[36302]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[70]=0;
	else	if (nzeros<nones) vnodeI[70]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[70];
 }
if (cwI[71]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[71]) nones=1; else nzeros=1; // count the original value
if (responseI[36417]) nones++;
else nzeros++;
if (responseI[36448]) nones++;
else nzeros++;
if (responseI[36520]) nones++;
else nzeros++;
if (responseI[36777]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[71]=0;
	else	if (nzeros<nones) vnodeI[71]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[71];
 }
if (cwI[72]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[72]) nones=1; else nzeros=1; // count the original value
if (responseI[37011]) nones++;
else nzeros++;
if (responseI[37190]) nones++;
else nzeros++;
if (responseI[37245]) nones++;
else nzeros++;
if (responseI[37296]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[72]=0;
	else	if (nzeros<nones) vnodeI[72]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[72];
 }
if (cwI[73]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[73]) nones=1; else nzeros=1; // count the original value
if (responseI[37496]) nones++;
else nzeros++;
if (responseI[37592]) nones++;
else nzeros++;
if (responseI[37656]) nones++;
else nzeros++;
if (responseI[37804]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[73]=0;
	else	if (nzeros<nones) vnodeI[73]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[73];
 }
if (cwI[74]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[74]) nones=1; else nzeros=1; // count the original value
if (responseI[38187]) nones++;
else nzeros++;
if (responseI[38333]) nones++;
else nzeros++;
if (responseI[38375]) nones++;
else nzeros++;
if (responseI[38387]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[74]=0;
	else	if (nzeros<nones) vnodeI[74]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[74];
 }
if (cwI[75]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[75]) nones=1; else nzeros=1; // count the original value
if (responseI[38654]) nones++;
else nzeros++;
if (responseI[38738]) nones++;
else nzeros++;
if (responseI[38752]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[75]=0;
	else	if (nzeros<nones) vnodeI[75]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[75];
 }
if (cwI[76]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[76]) nones=1; else nzeros=1; // count the original value
if (responseI[39301]) nones++;
else nzeros++;
if (responseI[39319]) nones++;
else nzeros++;
if (responseI[39326]) nones++;
else nzeros++;
if (responseI[39339]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[76]=0;
	else	if (nzeros<nones) vnodeI[76]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[76];
 }
if (cwI[77]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[77]) nones=1; else nzeros=1; // count the original value
if (responseI[39448]) nones++;
else nzeros++;
if (responseI[39533]) nones++;
else nzeros++;
if (responseI[39754]) nones++;
else nzeros++;
if (responseI[39796]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[77]=0;
	else	if (nzeros<nones) vnodeI[77]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[77];
 }
if (cwI[78]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[78]) nones=1; else nzeros=1; // count the original value
if (responseI[40107]) nones++;
else nzeros++;
if (responseI[40137]) nones++;
else nzeros++;
if (responseI[40423]) nones++;
else nzeros++;
if (responseI[40441]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[78]=0;
	else	if (nzeros<nones) vnodeI[78]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[78];
 }
if (cwI[79]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[79]) nones=1; else nzeros=1; // count the original value
if (responseI[40615]) nones++;
else nzeros++;
if (responseI[40769]) nones++;
else nzeros++;
if (responseI[40784]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[79]=0;
	else	if (nzeros<nones) vnodeI[79]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[79];
 }
if (cwI[80]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[80]) nones=1; else nzeros=1; // count the original value
if (responseI[41124]) nones++;
else nzeros++;
if (responseI[41216]) nones++;
else nzeros++;
if (responseI[41250]) nones++;
else nzeros++;
if (responseI[41263]) nones++;
else nzeros++;
if (responseI[41283]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[80]=0;
	else	if (nzeros<nones) vnodeI[80]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[80];
 }
if (cwI[81]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[81]) nones=1; else nzeros=1; // count the original value
if (responseI[41634]) nones++;
else nzeros++;
if (responseI[41705]) nones++;
else nzeros++;
if (responseI[41723]) nones++;
else nzeros++;
if (responseI[41757]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[81]=0;
	else	if (nzeros<nones) vnodeI[81]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[81];
 }
if (cwI[82]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[82]) nones=1; else nzeros=1; // count the original value
if (responseI[42228]) nones++;
else nzeros++;
if (responseI[42358]) nones++;
else nzeros++;
if (responseI[42425]) nones++;
else nzeros++;
if (responseI[42432]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[82]=0;
	else	if (nzeros<nones) vnodeI[82]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[82];
 }
if (cwI[83]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[83]) nones=1; else nzeros=1; // count the original value
if (responseI[42536]) nones++;
else nzeros++;
if (responseI[42708]) nones++;
else nzeros++;
if (responseI[42799]) nones++;
else nzeros++;
if (responseI[42818]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[83]=0;
	else	if (nzeros<nones) vnodeI[83]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[83];
 }
if (cwI[84]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[84]) nones=1; else nzeros=1; // count the original value
if (responseI[43125]) nones++;
else nzeros++;
if (responseI[43145]) nones++;
else nzeros++;
if (responseI[43415]) nones++;
else nzeros++;
if (responseI[43419]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[84]=0;
	else	if (nzeros<nones) vnodeI[84]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[84];
 }
if (cwI[85]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[85]) nones=1; else nzeros=1; // count the original value
if (responseI[43671]) nones++;
else nzeros++;
if (responseI[43936]) nones++;
else nzeros++;
if (responseI[43952]) nones++;
else nzeros++;
if (responseI[44030]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[85]=0;
	else	if (nzeros<nones) vnodeI[85]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[85];
 }
if (cwI[86]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[86]) nones=1; else nzeros=1; // count the original value
if (responseI[44278]) nones++;
else nzeros++;
if (responseI[44286]) nones++;
else nzeros++;
if (responseI[44391]) nones++;
else nzeros++;
if (responseI[44477]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[86]=0;
	else	if (nzeros<nones) vnodeI[86]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[86];
 }
if (cwI[87]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[87]) nones=1; else nzeros=1; // count the original value
if (responseI[44651]) nones++;
else nzeros++;
if (responseI[44850]) nones++;
else nzeros++;
if (responseI[44882]) nones++;
else nzeros++;
if (responseI[44923]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[87]=0;
	else	if (nzeros<nones) vnodeI[87]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[87];
 }
if (cwI[88]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[88]) nones=1; else nzeros=1; // count the original value
if (responseI[45364]) nones++;
else nzeros++;
if (responseI[45515]) nones++;
else nzeros++;
if (responseI[45556]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[88]=0;
	else	if (nzeros<nones) vnodeI[88]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[88];
 }
if (cwI[89]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[89]) nones=1; else nzeros=1; // count the original value
if (responseI[45885]) nones++;
else nzeros++;
if (responseI[45905]) nones++;
else nzeros++;
if (responseI[45936]) nones++;
else nzeros++;
if (responseI[46055]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[89]=0;
	else	if (nzeros<nones) vnodeI[89]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[89];
 }
if (cwI[90]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[90]) nones=1; else nzeros=1; // count the original value
if (responseI[46127]) nones++;
else nzeros++;
if (responseI[46368]) nones++;
else nzeros++;
if (responseI[46422]) nones++;
else nzeros++;
if (responseI[46476]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[90]=0;
	else	if (nzeros<nones) vnodeI[90]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[90];
 }
if (cwI[91]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[91]) nones=1; else nzeros=1; // count the original value
if (responseI[46930]) nones++;
else nzeros++;
if (responseI[46935]) nones++;
else nzeros++;
if (responseI[47064]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[91]=0;
	else	if (nzeros<nones) vnodeI[91]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[91];
 }
if (cwI[92]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[92]) nones=1; else nzeros=1; // count the original value
if (responseI[47158]) nones++;
else nzeros++;
if (responseI[47211]) nones++;
else nzeros++;
if (responseI[47339]) nones++;
else nzeros++;
if (responseI[47368]) nones++;
else nzeros++;
if (responseI[47388]) nones++;
else nzeros++;
if (responseI[47568]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[92]=0;
	else	if (nzeros<nones) vnodeI[92]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[92];
 }
if (cwI[93]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[93]) nones=1; else nzeros=1; // count the original value
if (responseI[47931]) nones++;
else nzeros++;
if (responseI[48021]) nones++;
else nzeros++;
if (responseI[48089]) nones++;
else nzeros++;
if (responseI[48114]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[93]=0;
	else	if (nzeros<nones) vnodeI[93]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[93];
 }
if (cwI[94]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[94]) nones=1; else nzeros=1; // count the original value
if (responseI[48401]) nones++;
else nzeros++;
if (responseI[48407]) nones++;
else nzeros++;
if (responseI[48547]) nones++;
else nzeros++;
if (responseI[48611]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[94]=0;
	else	if (nzeros<nones) vnodeI[94]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[94];
 }
if (cwI[95]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[95]) nones=1; else nzeros=1; // count the original value
if (responseI[48664]) nones++;
else nzeros++;
if (responseI[48708]) nones++;
else nzeros++;
if (responseI[48874]) nones++;
else nzeros++;
if (responseI[48949]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[95]=0;
	else	if (nzeros<nones) vnodeI[95]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[95];
 }
if (cwI[96]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[96]) nones=1; else nzeros=1; // count the original value
if (responseI[49327]) nones++;
else nzeros++;
if (responseI[49339]) nones++;
else nzeros++;
if (responseI[49473]) nones++;
else nzeros++;
if (responseI[49509]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[96]=0;
	else	if (nzeros<nones) vnodeI[96]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[96];
 }
if (cwI[97]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[97]) nones=1; else nzeros=1; // count the original value
if (responseI[49727]) nones++;
else nzeros++;
if (responseI[49830]) nones++;
else nzeros++;
if (responseI[49900]) nones++;
else nzeros++;
if (responseI[50112]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[97]=0;
	else	if (nzeros<nones) vnodeI[97]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[97];
 }
if (cwI[98]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[98]) nones=1; else nzeros=1; // count the original value
if (responseI[50256]) nones++;
else nzeros++;
if (responseI[50333]) nones++;
else nzeros++;
if (responseI[50619]) nones++;
else nzeros++;
if (responseI[50653]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[98]=0;
	else	if (nzeros<nones) vnodeI[98]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[98];
 }
if (cwI[99]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[99]) nones=1; else nzeros=1; // count the original value
if (responseI[50780]) nones++;
else nzeros++;
if (responseI[51014]) nones++;
else nzeros++;
if (responseI[51056]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[99]=0;
	else	if (nzeros<nones) vnodeI[99]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[99];
 }
if (cwI[100]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[100]) nones=1; else nzeros=1; // count the original value
if (responseI[51295]) nones++;
else nzeros++;
if (responseI[51360]) nones++;
else nzeros++;
if (responseI[51511]) nones++;
else nzeros++;
if (responseI[51663]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[100]=0;
	else	if (nzeros<nones) vnodeI[100]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[100];
 }
if (cwI[101]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[101]) nones=1; else nzeros=1; // count the original value
if (responseI[51822]) nones++;
else nzeros++;
if (responseI[51853]) nones++;
else nzeros++;
if (responseI[52083]) nones++;
else nzeros++;
if (responseI[52214]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[101]=0;
	else	if (nzeros<nones) vnodeI[101]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[101];
 }
if (cwI[102]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[102]) nones=1; else nzeros=1; // count the original value
if (responseI[52511]) nones++;
else nzeros++;
if (responseI[52512]) nones++;
else nzeros++;
if (responseI[52514]) nones++;
else nzeros++;
if (responseI[52726]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[102]=0;
	else	if (nzeros<nones) vnodeI[102]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[102];
 }
if (cwI[103]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[103]) nones=1; else nzeros=1; // count the original value
if (responseI[52971]) nones++;
else nzeros++;
if (responseI[53186]) nones++;
else nzeros++;
if (responseI[53243]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[103]=0;
	else	if (nzeros<nones) vnodeI[103]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[103];
 }
if (cwI[104]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[104]) nones=1; else nzeros=1; // count the original value
if (responseI[53353]) nones++;
else nzeros++;
if (responseI[53446]) nones++;
else nzeros++;
if (responseI[53496]) nones++;
else nzeros++;
if (responseI[53537]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[104]=0;
	else	if (nzeros<nones) vnodeI[104]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[104];
 }
if (cwI[105]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[105]) nones=1; else nzeros=1; // count the original value
if (responseI[53835]) nones++;
else nzeros++;
if (responseI[53851]) nones++;
else nzeros++;
if (responseI[53893]) nones++;
else nzeros++;
if (responseI[53909]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[105]=0;
	else	if (nzeros<nones) vnodeI[105]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[105];
 }
if (cwI[106]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[106]) nones=1; else nzeros=1; // count the original value
if (responseI[54476]) nones++;
else nzeros++;
if (responseI[54478]) nones++;
else nzeros++;
if (responseI[54516]) nones++;
else nzeros++;
if (responseI[54719]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[106]=0;
	else	if (nzeros<nones) vnodeI[106]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[106];
 }
if (cwI[107]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[107]) nones=1; else nzeros=1; // count the original value
if (responseI[54851]) nones++;
else nzeros++;
if (responseI[54898]) nones++;
else nzeros++;
if (responseI[54917]) nones++;
else nzeros++;
if (responseI[55050]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[107]=0;
	else	if (nzeros<nones) vnodeI[107]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[107];
 }
if (cwI[108]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[108]) nones=1; else nzeros=1; // count the original value
if (responseI[55520]) nones++;
else nzeros++;
if (responseI[55542]) nones++;
else nzeros++;
if (responseI[55568]) nones++;
else nzeros++;
if (responseI[55702]) nones++;
else nzeros++;
if (responseI[55727]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[108]=0;
	else	if (nzeros<nones) vnodeI[108]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[108];
 }
if (cwI[109]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[109]) nones=1; else nzeros=1; // count the original value
if (responseI[55851]) nones++;
else nzeros++;
if (responseI[55852]) nones++;
else nzeros++;
if (responseI[55967]) nones++;
else nzeros++;
if (responseI[56144]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[109]=0;
	else	if (nzeros<nones) vnodeI[109]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[109];
 }
if (cwI[110]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[110]) nones=1; else nzeros=1; // count the original value
if (responseI[56517]) nones++;
else nzeros++;
if (responseI[56579]) nones++;
else nzeros++;
if (responseI[56617]) nones++;
else nzeros++;
if (responseI[56717]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[110]=0;
	else	if (nzeros<nones) vnodeI[110]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[110];
 }
if (cwI[111]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[111]) nones=1; else nzeros=1; // count the original value
if (responseI[57062]) nones++;
else nzeros++;
if (responseI[57111]) nones++;
else nzeros++;
if (responseI[57285]) nones++;
else nzeros++;
if (responseI[57288]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[111]=0;
	else	if (nzeros<nones) vnodeI[111]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[111];
 }
if (cwI[112]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[112]) nones=1; else nzeros=1; // count the original value
if (responseI[57496]) nones++;
else nzeros++;
if (responseI[57536]) nones++;
else nzeros++;
if (responseI[57592]) nones++;
else nzeros++;
if (responseI[57823]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[112]=0;
	else	if (nzeros<nones) vnodeI[112]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[112];
 }
if (cwI[113]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[113]) nones=1; else nzeros=1; // count the original value
if (responseI[58108]) nones++;
else nzeros++;
if (responseI[58118]) nones++;
else nzeros++;
if (responseI[58242]) nones++;
else nzeros++;
if (responseI[58320]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[113]=0;
	else	if (nzeros<nones) vnodeI[113]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[113];
 }
if (cwI[114]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[114]) nones=1; else nzeros=1; // count the original value
if (responseI[58520]) nones++;
else nzeros++;
if (responseI[58605]) nones++;
else nzeros++;
if (responseI[58804]) nones++;
else nzeros++;
if (responseI[58867]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[114]=0;
	else	if (nzeros<nones) vnodeI[114]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[114];
 }
if (cwI[115]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[115]) nones=1; else nzeros=1; // count the original value
if (responseI[59254]) nones++;
else nzeros++;
if (responseI[59331]) nones++;
else nzeros++;
if (responseI[59348]) nones++;
else nzeros++;
if (responseI[59385]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[115]=0;
	else	if (nzeros<nones) vnodeI[115]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[115];
 }
if (cwI[116]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[116]) nones=1; else nzeros=1; // count the original value
if (responseI[59466]) nones++;
else nzeros++;
if (responseI[59540]) nones++;
else nzeros++;
if (responseI[59584]) nones++;
else nzeros++;
if (responseI[59618]) nones++;
else nzeros++;
if (responseI[59619]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[116]=0;
	else	if (nzeros<nones) vnodeI[116]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[116];
 }
if (cwI[117]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[117]) nones=1; else nzeros=1; // count the original value
if (responseI[59968]) nones++;
else nzeros++;
if (responseI[60008]) nones++;
else nzeros++;
if (responseI[60130]) nones++;
else nzeros++;
if (responseI[60338]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[117]=0;
	else	if (nzeros<nones) vnodeI[117]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[117];
 }
if (cwI[118]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[118]) nones=1; else nzeros=1; // count the original value
if (responseI[60608]) nones++;
else nzeros++;
if (responseI[60669]) nones++;
else nzeros++;
if (responseI[60748]) nones++;
else nzeros++;
if (responseI[60829]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[118]=0;
	else	if (nzeros<nones) vnodeI[118]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[118];
 }
if (cwI[119]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[119]) nones=1; else nzeros=1; // count the original value
if (responseI[60936]) nones++;
else nzeros++;
if (responseI[61218]) nones++;
else nzeros++;
if (responseI[61274]) nones++;
else nzeros++;
if (responseI[61398]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[119]=0;
	else	if (nzeros<nones) vnodeI[119]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[119];
 }
if (cwI[120]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[120]) nones=1; else nzeros=1; // count the original value
if (responseI[61711]) nones++;
else nzeros++;
if (responseI[61736]) nones++;
else nzeros++;
if (responseI[61775]) nones++;
else nzeros++;
if (responseI[61858]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[120]=0;
	else	if (nzeros<nones) vnodeI[120]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[120];
 }
if (cwI[121]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[121]) nones=1; else nzeros=1; // count the original value
if (responseI[62053]) nones++;
else nzeros++;
if (responseI[62078]) nones++;
else nzeros++;
if (responseI[62192]) nones++;
else nzeros++;
if (responseI[62240]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[121]=0;
	else	if (nzeros<nones) vnodeI[121]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[121];
 }
if (cwI[122]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[122]) nones=1; else nzeros=1; // count the original value
if (responseI[62539]) nones++;
else nzeros++;
if (responseI[62702]) nones++;
else nzeros++;
if (responseI[62811]) nones++;
else nzeros++;
if (responseI[62905]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[122]=0;
	else	if (nzeros<nones) vnodeI[122]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[122];
 }
if (cwI[123]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[123]) nones=1; else nzeros=1; // count the original value
if (responseI[63022]) nones++;
else nzeros++;
if (responseI[63170]) nones++;
else nzeros++;
if (responseI[63284]) nones++;
else nzeros++;
if (responseI[63337]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[123]=0;
	else	if (nzeros<nones) vnodeI[123]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[123];
 }
if (cwI[124]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[124]) nones=1; else nzeros=1; // count the original value
if (responseI[63798]) nones++;
else nzeros++;
if (responseI[63912]) nones++;
else nzeros++;
if (responseI[63972]) nones++;
else nzeros++;
if (responseI[63989]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[124]=0;
	else	if (nzeros<nones) vnodeI[124]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[124];
 }
if (cwI[125]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[125]) nones=1; else nzeros=1; // count the original value
if (responseI[64071]) nones++;
else nzeros++;
if (responseI[64076]) nones++;
else nzeros++;
if (responseI[64088]) nones++;
else nzeros++;
if (responseI[64163]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[125]=0;
	else	if (nzeros<nones) vnodeI[125]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[125];
 }
if (cwI[126]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[126]) nones=1; else nzeros=1; // count the original value
if (responseI[64800]) nones++;
else nzeros++;
if (responseI[64832]) nones++;
else nzeros++;
if (responseI[64869]) nones++;
else nzeros++;
if (responseI[65021]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[126]=0;
	else	if (nzeros<nones) vnodeI[126]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[126];
 }
if (cwI[127]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[127]) nones=1; else nzeros=1; // count the original value
if (responseI[65034]) nones++;
else nzeros++;
if (responseI[65342]) nones++;
else nzeros++;
if (responseI[65464]) nones++;
else nzeros++;
if (responseI[65515]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[127]=0;
	else	if (nzeros<nones) vnodeI[127]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[127];
 }
if (cwI[128]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[128]) nones=1; else nzeros=1; // count the original value
if (responseI[65719]) nones++;
else nzeros++;
if (responseI[65823]) nones++;
else nzeros++;
if (responseI[65878]) nones++;
else nzeros++;
if (responseI[66019]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[128]=0;
	else	if (nzeros<nones) vnodeI[128]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[128];
 }
if (cwI[129]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[129]) nones=1; else nzeros=1; // count the original value
if (responseI[66438]) nones++;
else nzeros++;
if (responseI[66481]) nones++;
else nzeros++;
if (responseI[66487]) nones++;
else nzeros++;
if (responseI[66508]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[129]=0;
	else	if (nzeros<nones) vnodeI[129]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[129];
 }
if (cwI[130]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[130]) nones=1; else nzeros=1; // count the original value
if (responseI[66676]) nones++;
else nzeros++;
if (responseI[66778]) nones++;
else nzeros++;
if (responseI[66842]) nones++;
else nzeros++;
if (responseI[66849]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[130]=0;
	else	if (nzeros<nones) vnodeI[130]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[130];
 }
if (cwI[131]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[131]) nones=1; else nzeros=1; // count the original value
if (responseI[67268]) nones++;
else nzeros++;
if (responseI[67412]) nones++;
else nzeros++;
if (responseI[67533]) nones++;
else nzeros++;
if (responseI[67538]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[131]=0;
	else	if (nzeros<nones) vnodeI[131]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[131];
 }
if (cwI[132]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[132]) nones=1; else nzeros=1; // count the original value
if (responseI[67639]) nones++;
else nzeros++;
if (responseI[67684]) nones++;
else nzeros++;
if (responseI[67803]) nones++;
else nzeros++;
if (responseI[67929]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[132]=0;
	else	if (nzeros<nones) vnodeI[132]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[132];
 }
if (cwI[133]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[133]) nones=1; else nzeros=1; // count the original value
if (responseI[68411]) nones++;
else nzeros++;
if (responseI[68487]) nones++;
else nzeros++;
if (responseI[68574]) nones++;
else nzeros++;
if (responseI[68600]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[133]=0;
	else	if (nzeros<nones) vnodeI[133]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[133];
 }
if (cwI[134]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[134]) nones=1; else nzeros=1; // count the original value
if (responseI[68680]) nones++;
else nzeros++;
if (responseI[68842]) nones++;
else nzeros++;
if (responseI[68881]) nones++;
else nzeros++;
if (responseI[68942]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[134]=0;
	else	if (nzeros<nones) vnodeI[134]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[134];
 }
if (cwI[135]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[135]) nones=1; else nzeros=1; // count the original value
if (responseI[69144]) nones++;
else nzeros++;
if (responseI[69192]) nones++;
else nzeros++;
if (responseI[69433]) nones++;
else nzeros++;
if (responseI[69533]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[135]=0;
	else	if (nzeros<nones) vnodeI[135]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[135];
 }
if (cwI[136]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[136]) nones=1; else nzeros=1; // count the original value
if (responseI[69826]) nones++;
else nzeros++;
if (responseI[70024]) nones++;
else nzeros++;
if (responseI[70030]) nones++;
else nzeros++;
if (responseI[70105]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[136]=0;
	else	if (nzeros<nones) vnodeI[136]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[136];
 }
if (cwI[137]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[137]) nones=1; else nzeros=1; // count the original value
if (responseI[70353]) nones++;
else nzeros++;
if (responseI[70402]) nones++;
else nzeros++;
if (responseI[70581]) nones++;
else nzeros++;
if (responseI[70594]) nones++;
else nzeros++;
if (responseI[70610]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[137]=0;
	else	if (nzeros<nones) vnodeI[137]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[137];
 }
if (cwI[138]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[138]) nones=1; else nzeros=1; // count the original value
if (responseI[70687]) nones++;
else nzeros++;
if (responseI[70880]) nones++;
else nzeros++;
if (responseI[70924]) nones++;
else nzeros++;
if (responseI[70956]) nones++;
else nzeros++;
if (responseI[71035]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[138]=0;
	else	if (nzeros<nones) vnodeI[138]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[138];
 }
if (cwI[139]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[139]) nones=1; else nzeros=1; // count the original value
if (responseI[71206]) nones++;
else nzeros++;
if (responseI[71262]) nones++;
else nzeros++;
if (responseI[71345]) nones++;
else nzeros++;
if (responseI[71555]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[139]=0;
	else	if (nzeros<nones) vnodeI[139]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[139];
 }
if (cwI[140]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[140]) nones=1; else nzeros=1; // count the original value
if (responseI[71718]) nones++;
else nzeros++;
if (responseI[71752]) nones++;
else nzeros++;
if (responseI[71794]) nones++;
else nzeros++;
if (responseI[71859]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[140]=0;
	else	if (nzeros<nones) vnodeI[140]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[140];
 }
if (cwI[141]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[141]) nones=1; else nzeros=1; // count the original value
if (responseI[72199]) nones++;
else nzeros++;
if (responseI[72358]) nones++;
else nzeros++;
if (responseI[72363]) nones++;
else nzeros++;
if (responseI[72594]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[141]=0;
	else	if (nzeros<nones) vnodeI[141]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[141];
 }
if (cwI[142]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[142]) nones=1; else nzeros=1; // count the original value
if (responseI[72951]) nones++;
else nzeros++;
if (responseI[73079]) nones++;
else nzeros++;
if (responseI[73201]) nones++;
else nzeros++;
if (responseI[73205]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[142]=0;
	else	if (nzeros<nones) vnodeI[142]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[142];
 }
if (cwI[143]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[143]) nones=1; else nzeros=1; // count the original value
if (responseI[73484]) nones++;
else nzeros++;
if (responseI[73494]) nones++;
else nzeros++;
if (responseI[73599]) nones++;
else nzeros++;
if (responseI[73631]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[143]=0;
	else	if (nzeros<nones) vnodeI[143]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[143];
 }
if (cwI[144]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[144]) nones=1; else nzeros=1; // count the original value
if (responseI[73740]) nones++;
else nzeros++;
if (responseI[73904]) nones++;
else nzeros++;
if (responseI[74042]) nones++;
else nzeros++;
if (responseI[74170]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[144]=0;
	else	if (nzeros<nones) vnodeI[144]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[144];
 }
if (cwI[145]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[145]) nones=1; else nzeros=1; // count the original value
if (responseI[74446]) nones++;
else nzeros++;
if (responseI[74542]) nones++;
else nzeros++;
if (responseI[74546]) nones++;
else nzeros++;
if (responseI[74662]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[145]=0;
	else	if (nzeros<nones) vnodeI[145]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[145];
 }
if (cwI[146]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[146]) nones=1; else nzeros=1; // count the original value
if (responseI[75038]) nones++;
else nzeros++;
if (responseI[75116]) nones++;
else nzeros++;
if (responseI[75134]) nones++;
else nzeros++;
if (responseI[75240]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[146]=0;
	else	if (nzeros<nones) vnodeI[146]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[146];
 }
if (cwI[147]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[147]) nones=1; else nzeros=1; // count the original value
if (responseI[75291]) nones++;
else nzeros++;
if (responseI[75413]) nones++;
else nzeros++;
if (responseI[75427]) nones++;
else nzeros++;
if (responseI[75761]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[147]=0;
	else	if (nzeros<nones) vnodeI[147]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[147];
 }
if (cwI[148]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[148]) nones=1; else nzeros=1; // count the original value
if (responseI[75872]) nones++;
else nzeros++;
if (responseI[75950]) nones++;
else nzeros++;
if (responseI[76018]) nones++;
else nzeros++;
if (responseI[76079]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[148]=0;
	else	if (nzeros<nones) vnodeI[148]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[148];
 }
if (cwI[149]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[149]) nones=1; else nzeros=1; // count the original value
if (responseI[76336]) nones++;
else nzeros++;
if (responseI[76420]) nones++;
else nzeros++;
if (responseI[76517]) nones++;
else nzeros++;
if (responseI[76640]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[149]=0;
	else	if (nzeros<nones) vnodeI[149]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[149];
 }
if (cwI[150]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[150]) nones=1; else nzeros=1; // count the original value
if (responseI[76867]) nones++;
else nzeros++;
if (responseI[77116]) nones++;
else nzeros++;
if (responseI[77128]) nones++;
else nzeros++;
if (responseI[77272]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[150]=0;
	else	if (nzeros<nones) vnodeI[150]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[150];
 }
if (cwI[151]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[151]) nones=1; else nzeros=1; // count the original value
if (responseI[77319]) nones++;
else nzeros++;
if (responseI[77331]) nones++;
else nzeros++;
if (responseI[77688]) nones++;
else nzeros++;
if (responseI[77750]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[151]=0;
	else	if (nzeros<nones) vnodeI[151]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[151];
 }
if (cwI[152]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[152]) nones=1; else nzeros=1; // count the original value
if (responseI[78046]) nones++;
else nzeros++;
if (responseI[78080]) nones++;
else nzeros++;
if (responseI[78133]) nones++;
else nzeros++;
if (responseI[78315]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[152]=0;
	else	if (nzeros<nones) vnodeI[152]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[152];
 }
if (cwI[153]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[153]) nones=1; else nzeros=1; // count the original value
if (responseI[78426]) nones++;
else nzeros++;
if (responseI[78699]) nones++;
else nzeros++;
if (responseI[78748]) nones++;
else nzeros++;
if (responseI[78832]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[153]=0;
	else	if (nzeros<nones) vnodeI[153]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[153];
 }
if (cwI[154]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[154]) nones=1; else nzeros=1; // count the original value
if (responseI[79049]) nones++;
else nzeros++;
if (responseI[79167]) nones++;
else nzeros++;
if (responseI[79249]) nones++;
else nzeros++;
if (responseI[79310]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[154]=0;
	else	if (nzeros<nones) vnodeI[154]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[154];
 }
if (cwI[155]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[155]) nones=1; else nzeros=1; // count the original value
if (responseI[79442]) nones++;
else nzeros++;
if (responseI[79727]) nones++;
else nzeros++;
if (responseI[79797]) nones++;
else nzeros++;
if (responseI[79863]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[155]=0;
	else	if (nzeros<nones) vnodeI[155]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[155];
 }
if (cwI[156]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[156]) nones=1; else nzeros=1; // count the original value
if (responseI[79995]) nones++;
else nzeros++;
if (responseI[80031]) nones++;
else nzeros++;
if (responseI[80051]) nones++;
else nzeros++;
if (responseI[80354]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[156]=0;
	else	if (nzeros<nones) vnodeI[156]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[156];
 }
if (cwI[157]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[157]) nones=1; else nzeros=1; // count the original value
if (responseI[80669]) nones++;
else nzeros++;
if (responseI[80681]) nones++;
else nzeros++;
if (responseI[80711]) nones++;
else nzeros++;
if (responseI[80854]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[157]=0;
	else	if (nzeros<nones) vnodeI[157]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[157];
 }
if (cwI[158]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[158]) nones=1; else nzeros=1; // count the original value
if (responseI[80909]) nones++;
else nzeros++;
if (responseI[81230]) nones++;
else nzeros++;
if (responseI[81332]) nones++;
else nzeros++;
if (responseI[81396]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[158]=0;
	else	if (nzeros<nones) vnodeI[158]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[158];
 }
if (cwI[159]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[159]) nones=1; else nzeros=1; // count the original value
if (responseI[81536]) nones++;
else nzeros++;
if (responseI[81802]) nones++;
else nzeros++;
if (responseI[81850]) nones++;
else nzeros++;
if (responseI[81858]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[159]=0;
	else	if (nzeros<nones) vnodeI[159]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[159];
 }
if (cwI[160]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[160]) nones=1; else nzeros=1; // count the original value
if (responseI[82104]) nones++;
else nzeros++;
if (responseI[82113]) nones++;
else nzeros++;
if (responseI[82410]) nones++;
else nzeros++;
if (responseI[82428]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[160]=0;
	else	if (nzeros<nones) vnodeI[160]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[160];
 }
if (cwI[161]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[161]) nones=1; else nzeros=1; // count the original value
if (responseI[82645]) nones++;
else nzeros++;
if (responseI[82782]) nones++;
else nzeros++;
if (responseI[82790]) nones++;
else nzeros++;
if (responseI[82938]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[161]=0;
	else	if (nzeros<nones) vnodeI[161]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[161];
 }
if (cwI[162]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[162]) nones=1; else nzeros=1; // count the original value
if (responseI[83239]) nones++;
else nzeros++;
if (responseI[83345]) nones++;
else nzeros++;
if (responseI[83414]) nones++;
else nzeros++;
if (responseI[83430]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[162]=0;
	else	if (nzeros<nones) vnodeI[162]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[162];
 }
if (cwI[163]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[163]) nones=1; else nzeros=1; // count the original value
if (responseI[83510]) nones++;
else nzeros++;
if (responseI[83536]) nones++;
else nzeros++;
if (responseI[83610]) nones++;
else nzeros++;
if (responseI[83784]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[163]=0;
	else	if (nzeros<nones) vnodeI[163]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[163];
 }
if (cwI[164]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[164]) nones=1; else nzeros=1; // count the original value
if (responseI[83969]) nones++;
else nzeros++;
if (responseI[84042]) nones++;
else nzeros++;
if (responseI[84239]) nones++;
else nzeros++;
if (responseI[84308]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[164]=0;
	else	if (nzeros<nones) vnodeI[164]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[164];
 }
if (cwI[165]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[165]) nones=1; else nzeros=1; // count the original value
if (responseI[84737]) nones++;
else nzeros++;
if (responseI[84747]) nones++;
else nzeros++;
if (responseI[84783]) nones++;
else nzeros++;
if (responseI[84886]) nones++;
else nzeros++;
if (responseI[84976]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[165]=0;
	else	if (nzeros<nones) vnodeI[165]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[165];
 }
if (cwI[166]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[166]) nones=1; else nzeros=1; // count the original value
if (responseI[85109]) nones++;
else nzeros++;
if (responseI[85250]) nones++;
else nzeros++;
if (responseI[85309]) nones++;
else nzeros++;
if (responseI[85438]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[166]=0;
	else	if (nzeros<nones) vnodeI[166]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[166];
 }
if (cwI[167]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[167]) nones=1; else nzeros=1; // count the original value
if (responseI[85639]) nones++;
else nzeros++;
if (responseI[85674]) nones++;
else nzeros++;
if (responseI[85870]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[167]=0;
	else	if (nzeros<nones) vnodeI[167]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[167];
 }
if (cwI[168]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[168]) nones=1; else nzeros=1; // count the original value
if (responseI[86109]) nones++;
else nzeros++;
if (responseI[86147]) nones++;
else nzeros++;
if (responseI[86172]) nones++;
else nzeros++;
if (responseI[86412]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[168]=0;
	else	if (nzeros<nones) vnodeI[168]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[168];
 }
if (cwI[169]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[169]) nones=1; else nzeros=1; // count the original value
if (responseI[86558]) nones++;
else nzeros++;
if (responseI[86663]) nones++;
else nzeros++;
if (responseI[86689]) nones++;
else nzeros++;
if (responseI[87009]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[169]=0;
	else	if (nzeros<nones) vnodeI[169]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[169];
 }
if (cwI[170]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[170]) nones=1; else nzeros=1; // count the original value
if (responseI[87347]) nones++;
else nzeros++;
if (responseI[87386]) nones++;
else nzeros++;
if (responseI[87427]) nones++;
else nzeros++;
if (responseI[87454]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[170]=0;
	else	if (nzeros<nones) vnodeI[170]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[170];
 }
if (cwI[171]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[171]) nones=1; else nzeros=1; // count the original value
if (responseI[87622]) nones++;
else nzeros++;
if (responseI[87714]) nones++;
else nzeros++;
if (responseI[87905]) nones++;
else nzeros++;
if (responseI[88016]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[171]=0;
	else	if (nzeros<nones) vnodeI[171]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[171];
 }
if (cwI[172]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[172]) nones=1; else nzeros=1; // count the original value
if (responseI[88429]) nones++;
else nzeros++;
if (responseI[88432]) nones++;
else nzeros++;
if (responseI[88457]) nones++;
else nzeros++;
if (responseI[88486]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[172]=0;
	else	if (nzeros<nones) vnodeI[172]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[172];
 }
if (cwI[173]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[173]) nones=1; else nzeros=1; // count the original value
if (responseI[88863]) nones++;
else nzeros++;
if (responseI[88907]) nones++;
else nzeros++;
if (responseI[89031]) nones++;
else nzeros++;
if (responseI[89041]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[173]=0;
	else	if (nzeros<nones) vnodeI[173]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[173];
 }
if (cwI[174]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[174]) nones=1; else nzeros=1; // count the original value
if (responseI[89372]) nones++;
else nzeros++;
if (responseI[89478]) nones++;
else nzeros++;
if (responseI[89548]) nones++;
else nzeros++;
if (responseI[89555]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[174]=0;
	else	if (nzeros<nones) vnodeI[174]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[174];
 }
if (cwI[175]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[175]) nones=1; else nzeros=1; // count the original value
if (responseI[89605]) nones++;
else nzeros++;
if (responseI[89617]) nones++;
else nzeros++;
if (responseI[89672]) nones++;
else nzeros++;
if (responseI[90085]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[175]=0;
	else	if (nzeros<nones) vnodeI[175]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[175];
 }
if (cwI[176]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[176]) nones=1; else nzeros=1; // count the original value
if (responseI[90277]) nones++;
else nzeros++;
if (responseI[90301]) nones++;
else nzeros++;
if (responseI[90307]) nones++;
else nzeros++;
if (responseI[90483]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[176]=0;
	else	if (nzeros<nones) vnodeI[176]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[176];
 }
if (cwI[177]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[177]) nones=1; else nzeros=1; // count the original value
if (responseI[90709]) nones++;
else nzeros++;
if (responseI[90721]) nones++;
else nzeros++;
if (responseI[90804]) nones++;
else nzeros++;
if (responseI[90929]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[177]=0;
	else	if (nzeros<nones) vnodeI[177]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[177];
 }
if (cwI[178]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[178]) nones=1; else nzeros=1; // count the original value
if (responseI[91423]) nones++;
else nzeros++;
if (responseI[91447]) nones++;
else nzeros++;
if (responseI[91516]) nones++;
else nzeros++;
if (responseI[91601]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[178]=0;
	else	if (nzeros<nones) vnodeI[178]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[178];
 }
if (cwI[179]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[179]) nones=1; else nzeros=1; // count the original value
if (responseI[91768]) nones++;
else nzeros++;
if (responseI[91772]) nones++;
else nzeros++;
if (responseI[91776]) nones++;
else nzeros++;
if (responseI[92146]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[179]=0;
	else	if (nzeros<nones) vnodeI[179]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[179];
 }
if (cwI[180]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[180]) nones=1; else nzeros=1; // count the original value
if (responseI[92515]) nones++;
else nzeros++;
if (responseI[92557]) nones++;
else nzeros++;
if (responseI[92585]) nones++;
else nzeros++;
if (responseI[92590]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[180]=0;
	else	if (nzeros<nones) vnodeI[180]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[180];
 }
if (cwI[181]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[181]) nones=1; else nzeros=1; // count the original value
if (responseI[92838]) nones++;
else nzeros++;
if (responseI[92907]) nones++;
else nzeros++;
if (responseI[93056]) nones++;
else nzeros++;
if (responseI[93083]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[181]=0;
	else	if (nzeros<nones) vnodeI[181]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[181];
 }
if (cwI[182]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[182]) nones=1; else nzeros=1; // count the original value
if (responseI[93185]) nones++;
else nzeros++;
if (responseI[93364]) nones++;
else nzeros++;
if (responseI[93518]) nones++;
else nzeros++;
if (responseI[93692]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[182]=0;
	else	if (nzeros<nones) vnodeI[182]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[182];
 }
if (cwI[183]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[183]) nones=1; else nzeros=1; // count the original value
if (responseI[93700]) nones++;
else nzeros++;
if (responseI[93922]) nones++;
else nzeros++;
if (responseI[94097]) nones++;
else nzeros++;
if (responseI[94130]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[183]=0;
	else	if (nzeros<nones) vnodeI[183]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[183];
 }
if (cwI[184]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[184]) nones=1; else nzeros=1; // count the original value
if (responseI[94220]) nones++;
else nzeros++;
if (responseI[94320]) nones++;
else nzeros++;
if (responseI[94390]) nones++;
else nzeros++;
if (responseI[94412]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[184]=0;
	else	if (nzeros<nones) vnodeI[184]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[184];
 }
if (cwI[185]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[185]) nones=1; else nzeros=1; // count the original value
if (responseI[94892]) nones++;
else nzeros++;
if (responseI[94977]) nones++;
else nzeros++;
if (responseI[95016]) nones++;
else nzeros++;
if (responseI[95101]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[185]=0;
	else	if (nzeros<nones) vnodeI[185]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[185];
 }
if (cwI[186]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[186]) nones=1; else nzeros=1; // count the original value
if (responseI[95382]) nones++;
else nzeros++;
if (responseI[95512]) nones++;
else nzeros++;
if (responseI[95559]) nones++;
else nzeros++;
if (responseI[95678]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[186]=0;
	else	if (nzeros<nones) vnodeI[186]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[186];
 }
if (cwI[187]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[187]) nones=1; else nzeros=1; // count the original value
if (responseI[96049]) nones++;
else nzeros++;
if (responseI[96085]) nones++;
else nzeros++;
if (responseI[96197]) nones++;
else nzeros++;
if (responseI[96210]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[187]=0;
	else	if (nzeros<nones) vnodeI[187]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[187];
 }
if (cwI[188]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[188]) nones=1; else nzeros=1; // count the original value
if (responseI[96513]) nones++;
else nzeros++;
if (responseI[96571]) nones++;
else nzeros++;
if (responseI[96703]) nones++;
else nzeros++;
if (responseI[96725]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[188]=0;
	else	if (nzeros<nones) vnodeI[188]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[188];
 }
if (cwI[189]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[189]) nones=1; else nzeros=1; // count the original value
if (responseI[96821]) nones++;
else nzeros++;
if (responseI[97148]) nones++;
else nzeros++;
if (responseI[97149]) nones++;
else nzeros++;
if (responseI[97271]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[189]=0;
	else	if (nzeros<nones) vnodeI[189]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[189];
 }
if (cwI[190]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[190]) nones=1; else nzeros=1; // count the original value
if (responseI[97645]) nones++;
else nzeros++;
if (responseI[97680]) nones++;
else nzeros++;
if (responseI[97724]) nones++;
else nzeros++;
if (responseI[97781]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[190]=0;
	else	if (nzeros<nones) vnodeI[190]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[190];
 }
if (cwI[191]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[191]) nones=1; else nzeros=1; // count the original value
if (responseI[97844]) nones++;
else nzeros++;
if (responseI[97931]) nones++;
else nzeros++;
if (responseI[98148]) nones++;
else nzeros++;
if (responseI[98235]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[191]=0;
	else	if (nzeros<nones) vnodeI[191]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[191];
 }
if (cwI[192]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[192]) nones=1; else nzeros=1; // count the original value
if (responseI[98382]) nones++;
else nzeros++;
if (responseI[98542]) nones++;
else nzeros++;
if (responseI[98597]) nones++;
else nzeros++;
if (responseI[98729]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[192]=0;
	else	if (nzeros<nones) vnodeI[192]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[192];
 }
if (cwI[193]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[193]) nones=1; else nzeros=1; // count the original value
if (responseI[99216]) nones++;
else nzeros++;
if (responseI[99245]) nones++;
else nzeros++;
if (responseI[99246]) nones++;
else nzeros++;
if (responseI[99298]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[193]=0;
	else	if (nzeros<nones) vnodeI[193]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[193];
 }
if (cwI[194]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[194]) nones=1; else nzeros=1; // count the original value
if (responseI[99341]) nones++;
else nzeros++;
if (responseI[99581]) nones++;
else nzeros++;
if (responseI[99591]) nones++;
else nzeros++;
if (responseI[99630]) nones++;
else nzeros++;
if (responseI[99779]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[194]=0;
	else	if (nzeros<nones) vnodeI[194]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[194];
 }
if (cwI[195]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[195]) nones=1; else nzeros=1; // count the original value
if (responseI[99941]) nones++;
else nzeros++;
if (responseI[99982]) nones++;
else nzeros++;
if (responseI[100243]) nones++;
else nzeros++;
if (responseI[100321]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[195]=0;
	else	if (nzeros<nones) vnodeI[195]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[195];
 }
if (cwI[196]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[196]) nones=1; else nzeros=1; // count the original value
if (responseI[100567]) nones++;
else nzeros++;
if (responseI[100569]) nones++;
else nzeros++;
if (responseI[100608]) nones++;
else nzeros++;
if (responseI[100636]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[196]=0;
	else	if (nzeros<nones) vnodeI[196]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[196];
 }
if (cwI[197]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[197]) nones=1; else nzeros=1; // count the original value
if (responseI[100901]) nones++;
else nzeros++;
if (responseI[100932]) nones++;
else nzeros++;
if (responseI[100955]) nones++;
else nzeros++;
if (responseI[101207]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[197]=0;
	else	if (nzeros<nones) vnodeI[197]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[197];
 }
if (cwI[198]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[198]) nones=1; else nzeros=1; // count the original value
if (responseI[101379]) nones++;
else nzeros++;
if (responseI[101410]) nones++;
else nzeros++;
if (responseI[101436]) nones++;
else nzeros++;
if (responseI[101621]) nones++;
else nzeros++;
if (responseI[101771]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[198]=0;
	else	if (nzeros<nones) vnodeI[198]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[198];
 }
if (cwI[199]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[199]) nones=1; else nzeros=1; // count the original value
if (responseI[102158]) nones++;
else nzeros++;
if (responseI[102250]) nones++;
else nzeros++;
if (responseI[102274]) nones++;
else nzeros++;
if (responseI[102317]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[199]=0;
	else	if (nzeros<nones) vnodeI[199]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[199];
 }
if (cwI[200]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[200]) nones=1; else nzeros=1; // count the original value
if (responseI[102582]) nones++;
else nzeros++;
if (responseI[102680]) nones++;
else nzeros++;
if (responseI[102703]) nones++;
else nzeros++;
if (responseI[102867]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[200]=0;
	else	if (nzeros<nones) vnodeI[200]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[200];
 }
if (cwI[201]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[201]) nones=1; else nzeros=1; // count the original value
if (responseI[102933]) nones++;
else nzeros++;
if (responseI[102999]) nones++;
else nzeros++;
if (responseI[103027]) nones++;
else nzeros++;
if (responseI[103241]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[201]=0;
	else	if (nzeros<nones) vnodeI[201]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[201];
 }
if (cwI[202]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[202]) nones=1; else nzeros=1; // count the original value
if (responseI[103526]) nones++;
else nzeros++;
if (responseI[103782]) nones++;
else nzeros++;
if (responseI[103794]) nones++;
else nzeros++;
if (responseI[103935]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[202]=0;
	else	if (nzeros<nones) vnodeI[202]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[202];
 }
if (cwI[203]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[203]) nones=1; else nzeros=1; // count the original value
if (responseI[103940]) nones++;
else nzeros++;
if (responseI[103956]) nones++;
else nzeros++;
if (responseI[103994]) nones++;
else nzeros++;
if (responseI[103997]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[203]=0;
	else	if (nzeros<nones) vnodeI[203]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[203];
 }
if (cwI[204]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[204]) nones=1; else nzeros=1; // count the original value
if (responseI[104536]) nones++;
else nzeros++;
if (responseI[104553]) nones++;
else nzeros++;
if (responseI[104640]) nones++;
else nzeros++;
if (responseI[104908]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[204]=0;
	else	if (nzeros<nones) vnodeI[204]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[204];
 }
if (cwI[205]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[205]) nones=1; else nzeros=1; // count the original value
if (responseI[105174]) nones++;
else nzeros++;
if (responseI[105208]) nones++;
else nzeros++;
if (responseI[105322]) nones++;
else nzeros++;
if (responseI[105449]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[205]=0;
	else	if (nzeros<nones) vnodeI[205]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[205];
 }
if (cwI[206]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[206]) nones=1; else nzeros=1; // count the original value
if (responseI[105711]) nones++;
else nzeros++;
if (responseI[105812]) nones++;
else nzeros++;
if (responseI[105824]) nones++;
else nzeros++;
if (responseI[105889]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[206]=0;
	else	if (nzeros<nones) vnodeI[206]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[206];
 }
if (cwI[207]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[207]) nones=1; else nzeros=1; // count the original value
if (responseI[106045]) nones++;
else nzeros++;
if (responseI[106138]) nones++;
else nzeros++;
if (responseI[106189]) nones++;
else nzeros++;
if (responseI[106195]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[207]=0;
	else	if (nzeros<nones) vnodeI[207]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[207];
 }
if (cwI[208]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[208]) nones=1; else nzeros=1; // count the original value
if (responseI[106524]) nones++;
else nzeros++;
if (responseI[106596]) nones++;
else nzeros++;
if (responseI[106847]) nones++;
else nzeros++;
if (responseI[106849]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[208]=0;
	else	if (nzeros<nones) vnodeI[208]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[208];
 }
if (cwI[209]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[209]) nones=1; else nzeros=1; // count the original value
if (responseI[107164]) nones++;
else nzeros++;
if (responseI[107384]) nones++;
else nzeros++;
if (responseI[107410]) nones++;
else nzeros++;
if (responseI[107513]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[209]=0;
	else	if (nzeros<nones) vnodeI[209]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[209];
 }
if (cwI[210]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[210]) nones=1; else nzeros=1; // count the original value
if (responseI[107524]) nones++;
else nzeros++;
if (responseI[107723]) nones++;
else nzeros++;
if (responseI[107741]) nones++;
else nzeros++;
if (responseI[107870]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[210]=0;
	else	if (nzeros<nones) vnodeI[210]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[210];
 }
if (cwI[211]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[211]) nones=1; else nzeros=1; // count the original value
if (responseI[108062]) nones++;
else nzeros++;
if (responseI[108067]) nones++;
else nzeros++;
if (responseI[108287]) nones++;
else nzeros++;
if (responseI[108458]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[211]=0;
	else	if (nzeros<nones) vnodeI[211]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[211];
 }
if (cwI[212]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[212]) nones=1; else nzeros=1; // count the original value
if (responseI[108655]) nones++;
else nzeros++;
if (responseI[108674]) nones++;
else nzeros++;
if (responseI[108677]) nones++;
else nzeros++;
if (responseI[108809]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[212]=0;
	else	if (nzeros<nones) vnodeI[212]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[212];
 }
if (cwI[213]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[213]) nones=1; else nzeros=1; // count the original value
if (responseI[109078]) nones++;
else nzeros++;
if (responseI[109255]) nones++;
else nzeros++;
if (responseI[109444]) nones++;
else nzeros++;
if (responseI[109472]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[213]=0;
	else	if (nzeros<nones) vnodeI[213]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[213];
 }
if (cwI[214]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[214]) nones=1; else nzeros=1; // count the original value
if (responseI[109647]) nones++;
else nzeros++;
if (responseI[109706]) nones++;
else nzeros++;
if (responseI[109897]) nones++;
else nzeros++;
if (responseI[110026]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[214]=0;
	else	if (nzeros<nones) vnodeI[214]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[214];
 }
if (cwI[215]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[215]) nones=1; else nzeros=1; // count the original value
if (responseI[110131]) nones++;
else nzeros++;
if (responseI[110196]) nones++;
else nzeros++;
if (responseI[110318]) nones++;
else nzeros++;
if (responseI[110442]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[215]=0;
	else	if (nzeros<nones) vnodeI[215]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[215];
 }
if (cwI[216]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[216]) nones=1; else nzeros=1; // count the original value
if (responseI[110598]) nones++;
else nzeros++;
if (responseI[110709]) nones++;
else nzeros++;
if (responseI[110984]) nones++;
else nzeros++;
if (responseI[111039]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[216]=0;
	else	if (nzeros<nones) vnodeI[216]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[216];
 }
if (cwI[217]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[217]) nones=1; else nzeros=1; // count the original value
if (responseI[111426]) nones++;
else nzeros++;
if (responseI[111473]) nones++;
else nzeros++;
if (responseI[111558]) nones++;
else nzeros++;
if (responseI[111581]) nones++;
else nzeros++;
if (responseI[111600]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[217]=0;
	else	if (nzeros<nones) vnodeI[217]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[217];
 }
if (cwI[218]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[218]) nones=1; else nzeros=1; // count the original value
if (responseI[111643]) nones++;
else nzeros++;
if (responseI[111799]) nones++;
else nzeros++;
if (responseI[111806]) nones++;
else nzeros++;
if (responseI[112108]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[218]=0;
	else	if (nzeros<nones) vnodeI[218]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[218];
 }
if (cwI[219]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[219]) nones=1; else nzeros=1; // count the original value
if (responseI[112145]) nones++;
else nzeros++;
if (responseI[112213]) nones++;
else nzeros++;
if (responseI[112308]) nones++;
else nzeros++;
if (responseI[112573]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[219]=0;
	else	if (nzeros<nones) vnodeI[219]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[219];
 }
if (cwI[220]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[220]) nones=1; else nzeros=1; // count the original value
if (responseI[112818]) nones++;
else nzeros++;
if (responseI[112945]) nones++;
else nzeros++;
if (responseI[113096]) nones++;
else nzeros++;
if (responseI[113131]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[220]=0;
	else	if (nzeros<nones) vnodeI[220]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[220];
 }
if (cwI[221]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[221]) nones=1; else nzeros=1; // count the original value
if (responseI[113238]) nones++;
else nzeros++;
if (responseI[113308]) nones++;
else nzeros++;
if (responseI[113369]) nones++;
else nzeros++;
if (responseI[113472]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[221]=0;
	else	if (nzeros<nones) vnodeI[221]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[221];
 }
if (cwI[222]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[222]) nones=1; else nzeros=1; // count the original value
if (responseI[113737]) nones++;
else nzeros++;
if (responseI[113840]) nones++;
else nzeros++;
if (responseI[113864]) nones++;
else nzeros++;
if (responseI[113869]) nones++;
else nzeros++;
if (responseI[114002]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[222]=0;
	else	if (nzeros<nones) vnodeI[222]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[222];
 }
if (cwI[223]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[223]) nones=1; else nzeros=1; // count the original value
if (responseI[114315]) nones++;
else nzeros++;
if (responseI[114323]) nones++;
else nzeros++;
if (responseI[114581]) nones++;
else nzeros++;
if (responseI[114644]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[223]=0;
	else	if (nzeros<nones) vnodeI[223]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[223];
 }
if (cwI[224]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[224]) nones=1; else nzeros=1; // count the original value
if (responseI[114794]) nones++;
else nzeros++;
if (responseI[114865]) nones++;
else nzeros++;
if (responseI[114931]) nones++;
else nzeros++;
if (responseI[115002]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[224]=0;
	else	if (nzeros<nones) vnodeI[224]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[224];
 }
if (cwI[225]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[225]) nones=1; else nzeros=1; // count the original value
if (responseI[115516]) nones++;
else nzeros++;
if (responseI[115531]) nones++;
else nzeros++;
if (responseI[115631]) nones++;
else nzeros++;
if (responseI[115677]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[225]=0;
	else	if (nzeros<nones) vnodeI[225]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[225];
 }
if (cwI[226]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[226]) nones=1; else nzeros=1; // count the original value
if (responseI[115778]) nones++;
else nzeros++;
if (responseI[115847]) nones++;
else nzeros++;
if (responseI[115852]) nones++;
else nzeros++;
if (responseI[115962]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[226]=0;
	else	if (nzeros<nones) vnodeI[226]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[226];
 }
if (cwI[227]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[227]) nones=1; else nzeros=1; // count the original value
if (responseI[116349]) nones++;
else nzeros++;
if (responseI[116385]) nones++;
else nzeros++;
if (responseI[116546]) nones++;
else nzeros++;
if (responseI[116561]) nones++;
else nzeros++;
if (responseI[116650]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[227]=0;
	else	if (nzeros<nones) vnodeI[227]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[227];
 }
if (cwI[228]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[228]) nones=1; else nzeros=1; // count the original value
if (responseI[116805]) nones++;
else nzeros++;
if (responseI[116921]) nones++;
else nzeros++;
if (responseI[117111]) nones++;
else nzeros++;
if (responseI[117239]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[228]=0;
	else	if (nzeros<nones) vnodeI[228]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[228];
 }
if (cwI[229]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[229]) nones=1; else nzeros=1; // count the original value
if (responseI[117402]) nones++;
else nzeros++;
if (responseI[117531]) nones++;
else nzeros++;
if (responseI[117538]) nones++;
else nzeros++;
if (responseI[117647]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[229]=0;
	else	if (nzeros<nones) vnodeI[229]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[229];
 }
if (cwI[230]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[230]) nones=1; else nzeros=1; // count the original value
if (responseI[117785]) nones++;
else nzeros++;
if (responseI[117830]) nones++;
else nzeros++;
if (responseI[117935]) nones++;
else nzeros++;
if (responseI[117965]) nones++;
else nzeros++;
if (responseI[117979]) nones++;
else nzeros++;
if (responseI[118255]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[230]=0;
	else	if (nzeros<nones) vnodeI[230]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[230];
 }
if (cwI[231]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[231]) nones=1; else nzeros=1; // count the original value
if (responseI[118327]) nones++;
else nzeros++;
if (responseI[118342]) nones++;
else nzeros++;
if (responseI[118620]) nones++;
else nzeros++;
if (responseI[118664]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[231]=0;
	else	if (nzeros<nones) vnodeI[231]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[231];
 }
if (cwI[232]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[232]) nones=1; else nzeros=1; // count the original value
if (responseI[119208]) nones++;
else nzeros++;
if (responseI[119228]) nones++;
else nzeros++;
if (responseI[119260]) nones++;
else nzeros++;
if (responseI[119279]) nones++;
else nzeros++;
if (responseI[119294]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[232]=0;
	else	if (nzeros<nones) vnodeI[232]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[232];
 }
if (cwI[233]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[233]) nones=1; else nzeros=1; // count the original value
if (responseI[119517]) nones++;
else nzeros++;
if (responseI[119543]) nones++;
else nzeros++;
if (responseI[119578]) nones++;
else nzeros++;
if (responseI[119607]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[233]=0;
	else	if (nzeros<nones) vnodeI[233]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[233];
 }
if (cwI[234]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[234]) nones=1; else nzeros=1; // count the original value
if (responseI[120262]) nones++;
else nzeros++;
if (responseI[120307]) nones++;
else nzeros++;
if (responseI[120314]) nones++;
else nzeros++;
if (responseI[120319]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[234]=0;
	else	if (nzeros<nones) vnodeI[234]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[234];
 }
if (cwI[235]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[235]) nones=1; else nzeros=1; // count the original value
if (responseI[120373]) nones++;
else nzeros++;
if (responseI[120413]) nones++;
else nzeros++;
if (responseI[120775]) nones++;
else nzeros++;
if (responseI[120801]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[235]=0;
	else	if (nzeros<nones) vnodeI[235]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[235];
 }
if (cwI[236]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[236]) nones=1; else nzeros=1; // count the original value
if (responseI[120936]) nones++;
else nzeros++;
if (responseI[120977]) nones++;
else nzeros++;
if (responseI[121236]) nones++;
else nzeros++;
if (responseI[121303]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[236]=0;
	else	if (nzeros<nones) vnodeI[236]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[236];
 }
if (cwI[237]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[237]) nones=1; else nzeros=1; // count the original value
if (responseI[121516]) nones++;
else nzeros++;
if (responseI[121533]) nones++;
else nzeros++;
if (responseI[121614]) nones++;
else nzeros++;
if (responseI[121663]) nones++;
else nzeros++;
if (responseI[121818]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[237]=0;
	else	if (nzeros<nones) vnodeI[237]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[237];
 }
if (cwI[238]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[238]) nones=1; else nzeros=1; // count the original value
if (responseI[122009]) nones++;
else nzeros++;
if (responseI[122140]) nones++;
else nzeros++;
if (responseI[122332]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[238]=0;
	else	if (nzeros<nones) vnodeI[238]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[238];
 }
if (cwI[239]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[239]) nones=1; else nzeros=1; // count the original value
if (responseI[122453]) nones++;
else nzeros++;
if (responseI[122565]) nones++;
else nzeros++;
if (responseI[122737]) nones++;
else nzeros++;
if (responseI[122786]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[239]=0;
	else	if (nzeros<nones) vnodeI[239]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[239];
 }
if (cwI[240]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[240]) nones=1; else nzeros=1; // count the original value
if (responseI[122917]) nones++;
else nzeros++;
if (responseI[123124]) nones++;
else nzeros++;
if (responseI[123201]) nones++;
else nzeros++;
if (responseI[123313]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[240]=0;
	else	if (nzeros<nones) vnodeI[240]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[240];
 }
if (cwI[241]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[241]) nones=1; else nzeros=1; // count the original value
if (responseI[123533]) nones++;
else nzeros++;
if (responseI[123652]) nones++;
else nzeros++;
if (responseI[123754]) nones++;
else nzeros++;
if (responseI[123774]) nones++;
else nzeros++;
if (responseI[123844]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[241]=0;
	else	if (nzeros<nones) vnodeI[241]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[241];
 }
if (cwI[242]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[242]) nones=1; else nzeros=1; // count the original value
if (responseI[124206]) nones++;
else nzeros++;
if (responseI[124228]) nones++;
else nzeros++;
if (responseI[124234]) nones++;
else nzeros++;
if (responseI[124255]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[242]=0;
	else	if (nzeros<nones) vnodeI[242]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[242];
 }
if (cwI[243]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[243]) nones=1; else nzeros=1; // count the original value
if (responseI[124423]) nones++;
else nzeros++;
if (responseI[124576]) nones++;
else nzeros++;
if (responseI[124810]) nones++;
else nzeros++;
if (responseI[124905]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[243]=0;
	else	if (nzeros<nones) vnodeI[243]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[243];
 }
if (cwI[244]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[244]) nones=1; else nzeros=1; // count the original value
if (responseI[125013]) nones++;
else nzeros++;
if (responseI[125226]) nones++;
else nzeros++;
if (responseI[125316]) nones++;
else nzeros++;
if (responseI[125385]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[244]=0;
	else	if (nzeros<nones) vnodeI[244]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[244];
 }
if (cwI[245]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[245]) nones=1; else nzeros=1; // count the original value
if (responseI[125455]) nones++;
else nzeros++;
if (responseI[125458]) nones++;
else nzeros++;
if (responseI[125566]) nones++;
else nzeros++;
if (responseI[125683]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[245]=0;
	else	if (nzeros<nones) vnodeI[245]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[245];
 }
if (cwI[246]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[246]) nones=1; else nzeros=1; // count the original value
if (responseI[126049]) nones++;
else nzeros++;
if (responseI[126074]) nones++;
else nzeros++;
if (responseI[126195]) nones++;
else nzeros++;
if (responseI[126285]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[246]=0;
	else	if (nzeros<nones) vnodeI[246]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[246];
 }
if (cwI[247]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[247]) nones=1; else nzeros=1; // count the original value
if (responseI[126674]) nones++;
else nzeros++;
if (responseI[126760]) nones++;
else nzeros++;
if (responseI[126803]) nones++;
else nzeros++;
if (responseI[126819]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[247]=0;
	else	if (nzeros<nones) vnodeI[247]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[247];
 }
if (cwI[248]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[248]) nones=1; else nzeros=1; // count the original value
if (responseI[127259]) nones++;
else nzeros++;
if (responseI[127317]) nones++;
else nzeros++;
if (responseI[127391]) nones++;
else nzeros++;
if (responseI[127429]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[248]=0;
	else	if (nzeros<nones) vnodeI[248]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[248];
 }
if (cwI[249]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[249]) nones=1; else nzeros=1; // count the original value
if (responseI[127592]) nones++;
else nzeros++;
if (responseI[127620]) nones++;
else nzeros++;
if (responseI[127641]) nones++;
else nzeros++;
if (responseI[127772]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[249]=0;
	else	if (nzeros<nones) vnodeI[249]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[249];
 }
if (cwI[250]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[250]) nones=1; else nzeros=1; // count the original value
if (responseI[128075]) nones++;
else nzeros++;
if (responseI[128130]) nones++;
else nzeros++;
if (responseI[128182]) nones++;
else nzeros++;
if (responseI[128294]) nones++;
else nzeros++;
if (responseI[128395]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[250]=0;
	else	if (nzeros<nones) vnodeI[250]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[250];
 }
if (cwI[251]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[251]) nones=1; else nzeros=1; // count the original value
if (responseI[128567]) nones++;
else nzeros++;
if (responseI[128670]) nones++;
else nzeros++;
if (responseI[128887]) nones++;
else nzeros++;
if (responseI[128973]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[251]=0;
	else	if (nzeros<nones) vnodeI[251]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[251];
 }
if (cwI[252]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[252]) nones=1; else nzeros=1; // count the original value
if (responseI[129243]) nones++;
else nzeros++;
if (responseI[129260]) nones++;
else nzeros++;
if (responseI[129284]) nones++;
else nzeros++;
if (responseI[129424]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[252]=0;
	else	if (nzeros<nones) vnodeI[252]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[252];
 }
if (cwI[253]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[253]) nones=1; else nzeros=1; // count the original value
if (responseI[129724]) nones++;
else nzeros++;
if (responseI[129809]) nones++;
else nzeros++;
if (responseI[129840]) nones++;
else nzeros++;
if (responseI[129848]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[253]=0;
	else	if (nzeros<nones) vnodeI[253]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[253];
 }
if (cwI[254]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[254]) nones=1; else nzeros=1; // count the original value
if (responseI[130153]) nones++;
else nzeros++;
if (responseI[130442]) nones++;
else nzeros++;
if (responseI[130455]) nones++;
else nzeros++;
if (responseI[130476]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[254]=0;
	else	if (nzeros<nones) vnodeI[254]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[254];
 }
if (cwI[255]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[255]) nones=1; else nzeros=1; // count the original value
if (responseI[130749]) nones++;
else nzeros++;
if (responseI[130789]) nones++;
else nzeros++;
if (responseI[130835]) nones++;
else nzeros++;
if (responseI[130861]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[255]=0;
	else	if (nzeros<nones) vnodeI[255]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[255];
 }
if (cwI[256]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[256]) nones=1; else nzeros=1; // count the original value
if (responseI[131137]) nones++;
else nzeros++;
if (responseI[131291]) nones++;
else nzeros++;
if (responseI[131509]) nones++;
else nzeros++;
if (responseI[131582]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[256]=0;
	else	if (nzeros<nones) vnodeI[256]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[256];
 }
if (cwI[257]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[257]) nones=1; else nzeros=1; // count the original value
if (responseI[131651]) nones++;
else nzeros++;
if (responseI[131717]) nones++;
else nzeros++;
if (responseI[131756]) nones++;
else nzeros++;
if (responseI[132081]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[257]=0;
	else	if (nzeros<nones) vnodeI[257]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[257];
 }
if (cwI[258]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[258]) nones=1; else nzeros=1; // count the original value
if (responseI[132195]) nones++;
else nzeros++;
if (responseI[132225]) nones++;
else nzeros++;
if (responseI[132330]) nones++;
else nzeros++;
if (responseI[132576]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[258]=0;
	else	if (nzeros<nones) vnodeI[258]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[258];
 }
if (cwI[259]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[259]) nones=1; else nzeros=1; // count the original value
if (responseI[132961]) nones++;
else nzeros++;
if (responseI[132974]) nones++;
else nzeros++;
if (responseI[133012]) nones++;
else nzeros++;
if (responseI[133085]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[259]=0;
	else	if (nzeros<nones) vnodeI[259]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[259];
 }
if (cwI[260]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[260]) nones=1; else nzeros=1; // count the original value
if (responseI[133257]) nones++;
else nzeros++;
if (responseI[133309]) nones++;
else nzeros++;
if (responseI[133346]) nones++;
else nzeros++;
if (responseI[133373]) nones++;
else nzeros++;
if (responseI[133533]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[260]=0;
	else	if (nzeros<nones) vnodeI[260]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[260];
 }
if (cwI[261]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[261]) nones=1; else nzeros=1; // count the original value
if (responseI[133715]) nones++;
else nzeros++;
if (responseI[133723]) nones++;
else nzeros++;
if (responseI[133835]) nones++;
else nzeros++;
if (responseI[133963]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[261]=0;
	else	if (nzeros<nones) vnodeI[261]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[261];
 }
if (cwI[262]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[262]) nones=1; else nzeros=1; // count the original value
if (responseI[134153]) nones++;
else nzeros++;
if (responseI[134172]) nones++;
else nzeros++;
if (responseI[134297]) nones++;
else nzeros++;
if (responseI[134307]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[262]=0;
	else	if (nzeros<nones) vnodeI[262]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[262];
 }
if (cwI[263]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[263]) nones=1; else nzeros=1; // count the original value
if (responseI[134853]) nones++;
else nzeros++;
if (responseI[134906]) nones++;
else nzeros++;
if (responseI[134922]) nones++;
else nzeros++;
if (responseI[134986]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[263]=0;
	else	if (nzeros<nones) vnodeI[263]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[263];
 }
if (cwI[264]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[264]) nones=1; else nzeros=1; // count the original value
if (responseI[135295]) nones++;
else nzeros++;
if (responseI[135379]) nones++;
else nzeros++;
if (responseI[135544]) nones++;
else nzeros++;
if (responseI[135658]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[264]=0;
	else	if (nzeros<nones) vnodeI[264]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[264];
 }
if (cwI[265]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[265]) nones=1; else nzeros=1; // count the original value
if (responseI[135799]) nones++;
else nzeros++;
if (responseI[135828]) nones++;
else nzeros++;
if (responseI[135886]) nones++;
else nzeros++;
if (responseI[135957]) nones++;
else nzeros++;
if (responseI[136048]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[265]=0;
	else	if (nzeros<nones) vnodeI[265]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[265];
 }
if (cwI[266]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[266]) nones=1; else nzeros=1; // count the original value
if (responseI[136218]) nones++;
else nzeros++;
if (responseI[136290]) nones++;
else nzeros++;
if (responseI[136626]) nones++;
else nzeros++;
if (responseI[136633]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[266]=0;
	else	if (nzeros<nones) vnodeI[266]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[266];
 }
if (cwI[267]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[267]) nones=1; else nzeros=1; // count the original value
if (responseI[136815]) nones++;
else nzeros++;
if (responseI[136861]) nones++;
else nzeros++;
if (responseI[137014]) nones++;
else nzeros++;
if (responseI[137125]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[267]=0;
	else	if (nzeros<nones) vnodeI[267]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[267];
 }
if (cwI[268]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[268]) nones=1; else nzeros=1; // count the original value
if (responseI[137272]) nones++;
else nzeros++;
if (responseI[137417]) nones++;
else nzeros++;
if (responseI[137428]) nones++;
else nzeros++;
if (responseI[137485]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[268]=0;
	else	if (nzeros<nones) vnodeI[268]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[268];
 }
if (cwI[269]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[269]) nones=1; else nzeros=1; // count the original value
if (responseI[137830]) nones++;
else nzeros++;
if (responseI[137941]) nones++;
else nzeros++;
if (responseI[138000]) nones++;
else nzeros++;
if (responseI[138129]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[269]=0;
	else	if (nzeros<nones) vnodeI[269]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[269];
 }
if (cwI[270]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[270]) nones=1; else nzeros=1; // count the original value
if (responseI[138309]) nones++;
else nzeros++;
if (responseI[138404]) nones++;
else nzeros++;
if (responseI[138496]) nones++;
else nzeros++;
if (responseI[138680]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[270]=0;
	else	if (nzeros<nones) vnodeI[270]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[270];
 }
if (cwI[271]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[271]) nones=1; else nzeros=1; // count the original value
if (responseI[138765]) nones++;
else nzeros++;
if (responseI[138899]) nones++;
else nzeros++;
if (responseI[138954]) nones++;
else nzeros++;
if (responseI[139201]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[271]=0;
	else	if (nzeros<nones) vnodeI[271]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[271];
 }
if (cwI[272]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[272]) nones=1; else nzeros=1; // count the original value
if (responseI[139452]) nones++;
else nzeros++;
if (responseI[139564]) nones++;
else nzeros++;
if (responseI[139730]) nones++;
else nzeros++;
if (responseI[139732]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[272]=0;
	else	if (nzeros<nones) vnodeI[272]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[272];
 }
if (cwI[273]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[273]) nones=1; else nzeros=1; // count the original value
if (responseI[139916]) nones++;
else nzeros++;
if (responseI[140070]) nones++;
else nzeros++;
if (responseI[140115]) nones++;
else nzeros++;
if (responseI[140121]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[273]=0;
	else	if (nzeros<nones) vnodeI[273]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[273];
 }
if (cwI[274]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[274]) nones=1; else nzeros=1; // count the original value
if (responseI[140459]) nones++;
else nzeros++;
if (responseI[140468]) nones++;
else nzeros++;
if (responseI[140516]) nones++;
else nzeros++;
if (responseI[140534]) nones++;
else nzeros++;
if (responseI[140632]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[274]=0;
	else	if (nzeros<nones) vnodeI[274]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[274];
 }
if (cwI[275]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[275]) nones=1; else nzeros=1; // count the original value
if (responseI[141006]) nones++;
else nzeros++;
if (responseI[141015]) nones++;
else nzeros++;
if (responseI[141133]) nones++;
else nzeros++;
if (responseI[141186]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[275]=0;
	else	if (nzeros<nones) vnodeI[275]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[275];
 }
if (cwI[276]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[276]) nones=1; else nzeros=1; // count the original value
if (responseI[141340]) nones++;
else nzeros++;
if (responseI[141420]) nones++;
else nzeros++;
if (responseI[141581]) nones++;
else nzeros++;
if (responseI[141610]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[276]=0;
	else	if (nzeros<nones) vnodeI[276]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[276];
 }
if (cwI[277]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[277]) nones=1; else nzeros=1; // count the original value
if (responseI[141937]) nones++;
else nzeros++;
if (responseI[142031]) nones++;
else nzeros++;
if (responseI[142151]) nones++;
else nzeros++;
if (responseI[142169]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[277]=0;
	else	if (nzeros<nones) vnodeI[277]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[277];
 }
if (cwI[278]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[278]) nones=1; else nzeros=1; // count the original value
if (responseI[142433]) nones++;
else nzeros++;
if (responseI[142633]) nones++;
else nzeros++;
if (responseI[142678]) nones++;
else nzeros++;
if (responseI[142679]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[278]=0;
	else	if (nzeros<nones) vnodeI[278]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[278];
 }
if (cwI[279]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[279]) nones=1; else nzeros=1; // count the original value
if (responseI[142949]) nones++;
else nzeros++;
if (responseI[143199]) nones++;
else nzeros++;
if (responseI[143287]) nones++;
else nzeros++;
if (responseI[143317]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[279]=0;
	else	if (nzeros<nones) vnodeI[279]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[279];
 }
if (cwI[280]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[280]) nones=1; else nzeros=1; // count the original value
if (responseI[143678]) nones++;
else nzeros++;
if (responseI[143731]) nones++;
else nzeros++;
if (responseI[143745]) nones++;
else nzeros++;
if (responseI[143812]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[280]=0;
	else	if (nzeros<nones) vnodeI[280]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[280];
 }
if (cwI[281]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[281]) nones=1; else nzeros=1; // count the original value
if (responseI[143880]) nones++;
else nzeros++;
if (responseI[144067]) nones++;
else nzeros++;
if (responseI[144282]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[281]=0;
	else	if (nzeros<nones) vnodeI[281]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[281];
 }
if (cwI[282]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[282]) nones=1; else nzeros=1; // count the original value
if (responseI[144580]) nones++;
else nzeros++;
if (responseI[144642]) nones++;
else nzeros++;
if (responseI[144740]) nones++;
else nzeros++;
if (responseI[144772]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[282]=0;
	else	if (nzeros<nones) vnodeI[282]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[282];
 }
if (cwI[283]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[283]) nones=1; else nzeros=1; // count the original value
if (responseI[145205]) nones++;
else nzeros++;
if (responseI[145212]) nones++;
else nzeros++;
if (responseI[145249]) nones++;
else nzeros++;
if (responseI[145371]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[283]=0;
	else	if (nzeros<nones) vnodeI[283]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[283];
 }
if (cwI[284]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[284]) nones=1; else nzeros=1; // count the original value
if (responseI[145450]) nones++;
else nzeros++;
if (responseI[145458]) nones++;
else nzeros++;
if (responseI[145635]) nones++;
else nzeros++;
if (responseI[145894]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[284]=0;
	else	if (nzeros<nones) vnodeI[284]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[284];
 }
if (cwI[285]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[285]) nones=1; else nzeros=1; // count the original value
if (responseI[146035]) nones++;
else nzeros++;
if (responseI[146047]) nones++;
else nzeros++;
if (responseI[146107]) nones++;
else nzeros++;
if (responseI[146162]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[285]=0;
	else	if (nzeros<nones) vnodeI[285]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[285];
 }
if (cwI[286]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[286]) nones=1; else nzeros=1; // count the original value
if (responseI[146556]) nones++;
else nzeros++;
if (responseI[146559]) nones++;
else nzeros++;
if (responseI[146614]) nones++;
else nzeros++;
if (responseI[146725]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[286]=0;
	else	if (nzeros<nones) vnodeI[286]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[286];
 }
if (cwI[287]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[287]) nones=1; else nzeros=1; // count the original value
if (responseI[147153]) nones++;
else nzeros++;
if (responseI[147388]) nones++;
else nzeros++;
if (responseI[147417]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[287]=0;
	else	if (nzeros<nones) vnodeI[287]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[287];
 }
if (cwI[288]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[288]) nones=1; else nzeros=1; // count the original value
if (responseI[147826]) nones++;
else nzeros++;
if (responseI[147845]) nones++;
else nzeros++;
if (responseI[147867]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[288]=0;
	else	if (nzeros<nones) vnodeI[288]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[288];
 }
if (cwI[289]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[289]) nones=1; else nzeros=1; // count the original value
if (responseI[148247]) nones++;
else nzeros++;
if (responseI[148275]) nones++;
else nzeros++;
if (responseI[148451]) nones++;
else nzeros++;
if (responseI[148452]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[289]=0;
	else	if (nzeros<nones) vnodeI[289]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[289];
 }
if (cwI[290]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[290]) nones=1; else nzeros=1; // count the original value
if (responseI[148528]) nones++;
else nzeros++;
if (responseI[148540]) nones++;
else nzeros++;
if (responseI[148611]) nones++;
else nzeros++;
if (responseI[148618]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[290]=0;
	else	if (nzeros<nones) vnodeI[290]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[290];
 }
if (cwI[291]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[291]) nones=1; else nzeros=1; // count the original value
if (responseI[149069]) nones++;
else nzeros++;
if (responseI[149147]) nones++;
else nzeros++;
if (responseI[149163]) nones++;
else nzeros++;
if (responseI[149173]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[291]=0;
	else	if (nzeros<nones) vnodeI[291]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[291];
 }
if (cwI[292]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[292]) nones=1; else nzeros=1; // count the original value
if (responseI[149648]) nones++;
else nzeros++;
if (responseI[149745]) nones++;
else nzeros++;
if (responseI[149975]) nones++;
else nzeros++;
if (responseI[149990]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[292]=0;
	else	if (nzeros<nones) vnodeI[292]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[292];
 }
if (cwI[293]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[293]) nones=1; else nzeros=1; // count the original value
if (responseI[150150]) nones++;
else nzeros++;
if (responseI[150214]) nones++;
else nzeros++;
if (responseI[150322]) nones++;
else nzeros++;
if (responseI[150371]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[293]=0;
	else	if (nzeros<nones) vnodeI[293]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[293];
 }
if (cwI[294]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[294]) nones=1; else nzeros=1; // count the original value
if (responseI[150587]) nones++;
else nzeros++;
if (responseI[150660]) nones++;
else nzeros++;
if (responseI[150944]) nones++;
else nzeros++;
if (responseI[150987]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[294]=0;
	else	if (nzeros<nones) vnodeI[294]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[294];
 }
if (cwI[295]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[295]) nones=1; else nzeros=1; // count the original value
if (responseI[151126]) nones++;
else nzeros++;
if (responseI[151180]) nones++;
else nzeros++;
if (responseI[151265]) nones++;
else nzeros++;
if (responseI[151436]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[295]=0;
	else	if (nzeros<nones) vnodeI[295]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[295];
 }
if (cwI[296]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[296]) nones=1; else nzeros=1; // count the original value
if (responseI[151577]) nones++;
else nzeros++;
if (responseI[151809]) nones++;
else nzeros++;
if (responseI[151811]) nones++;
else nzeros++;
if (responseI[151885]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[296]=0;
	else	if (nzeros<nones) vnodeI[296]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[296];
 }
if (cwI[297]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[297]) nones=1; else nzeros=1; // count the original value
if (responseI[152162]) nones++;
else nzeros++;
if (responseI[152198]) nones++;
else nzeros++;
if (responseI[152315]) nones++;
else nzeros++;
if (responseI[152383]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[297]=0;
	else	if (nzeros<nones) vnodeI[297]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[297];
 }
if (cwI[298]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[298]) nones=1; else nzeros=1; // count the original value
if (responseI[152628]) nones++;
else nzeros++;
if (responseI[152702]) nones++;
else nzeros++;
if (responseI[152892]) nones++;
else nzeros++;
if (responseI[152908]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[298]=0;
	else	if (nzeros<nones) vnodeI[298]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[298];
 }
if (cwI[299]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[299]) nones=1; else nzeros=1; // count the original value
if (responseI[153126]) nones++;
else nzeros++;
if (responseI[153159]) nones++;
else nzeros++;
if (responseI[153396]) nones++;
else nzeros++;
if (responseI[153560]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[299]=0;
	else	if (nzeros<nones) vnodeI[299]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[299];
 }
if (cwI[300]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[300]) nones=1; else nzeros=1; // count the original value
if (responseI[153619]) nones++;
else nzeros++;
if (responseI[153719]) nones++;
else nzeros++;
if (responseI[153985]) nones++;
else nzeros++;
if (responseI[154054]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[300]=0;
	else	if (nzeros<nones) vnodeI[300]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[300];
 }
if (cwI[301]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[301]) nones=1; else nzeros=1; // count the original value
if (responseI[154329]) nones++;
else nzeros++;
if (responseI[154351]) nones++;
else nzeros++;
if (responseI[154354]) nones++;
else nzeros++;
if (responseI[154516]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[301]=0;
	else	if (nzeros<nones) vnodeI[301]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[301];
 }
if (cwI[302]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[302]) nones=1; else nzeros=1; // count the original value
if (responseI[154685]) nones++;
else nzeros++;
if (responseI[154704]) nones++;
else nzeros++;
if (responseI[154875]) nones++;
else nzeros++;
if (responseI[154934]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[302]=0;
	else	if (nzeros<nones) vnodeI[302]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[302];
 }
if (cwI[303]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[303]) nones=1; else nzeros=1; // count the original value
if (responseI[155197]) nones++;
else nzeros++;
if (responseI[155216]) nones++;
else nzeros++;
if (responseI[155275]) nones++;
else nzeros++;
if (responseI[155525]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[303]=0;
	else	if (nzeros<nones) vnodeI[303]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[303];
 }
if (cwI[304]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[304]) nones=1; else nzeros=1; // count the original value
if (responseI[155750]) nones++;
else nzeros++;
if (responseI[155833]) nones++;
else nzeros++;
if (responseI[155879]) nones++;
else nzeros++;
if (responseI[156106]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[304]=0;
	else	if (nzeros<nones) vnodeI[304]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[304];
 }
if (cwI[305]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[305]) nones=1; else nzeros=1; // count the original value
if (responseI[156209]) nones++;
else nzeros++;
if (responseI[156217]) nones++;
else nzeros++;
if (responseI[156285]) nones++;
else nzeros++;
if (responseI[156558]) nones++;
else nzeros++;
if (responseI[156625]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[305]=0;
	else	if (nzeros<nones) vnodeI[305]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[305];
 }
if (cwI[306]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[306]) nones=1; else nzeros=1; // count the original value
if (responseI[156777]) nones++;
else nzeros++;
if (responseI[156876]) nones++;
else nzeros++;
if (responseI[157049]) nones++;
else nzeros++;
if (responseI[157093]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[306]=0;
	else	if (nzeros<nones) vnodeI[306]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[306];
 }
if (cwI[307]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[307]) nones=1; else nzeros=1; // count the original value
if (responseI[157235]) nones++;
else nzeros++;
if (responseI[157268]) nones++;
else nzeros++;
if (responseI[157383]) nones++;
else nzeros++;
if (responseI[157445]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[307]=0;
	else	if (nzeros<nones) vnodeI[307]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[307];
 }
if (cwI[308]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[308]) nones=1; else nzeros=1; // count the original value
if (responseI[157702]) nones++;
else nzeros++;
if (responseI[157822]) nones++;
else nzeros++;
if (responseI[157853]) nones++;
else nzeros++;
if (responseI[158063]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[308]=0;
	else	if (nzeros<nones) vnodeI[308]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[308];
 }
if (cwI[309]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[309]) nones=1; else nzeros=1; // count the original value
if (responseI[158251]) nones++;
else nzeros++;
if (responseI[158294]) nones++;
else nzeros++;
if (responseI[158447]) nones++;
else nzeros++;
if (responseI[158648]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[309]=0;
	else	if (nzeros<nones) vnodeI[309]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[309];
 }
if (cwI[310]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[310]) nones=1; else nzeros=1; // count the original value
if (responseI[158784]) nones++;
else nzeros++;
if (responseI[158916]) nones++;
else nzeros++;
if (responseI[159033]) nones++;
else nzeros++;
if (responseI[159079]) nones++;
else nzeros++;
if (responseI[159089]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[310]=0;
	else	if (nzeros<nones) vnodeI[310]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[310];
 }
if (cwI[311]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[311]) nones=1; else nzeros=1; // count the original value
if (responseI[159294]) nones++;
else nzeros++;
if (responseI[159313]) nones++;
else nzeros++;
if (responseI[159445]) nones++;
else nzeros++;
if (responseI[159482]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[311]=0;
	else	if (nzeros<nones) vnodeI[311]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[311];
 }
if (cwI[312]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[312]) nones=1; else nzeros=1; // count the original value
if (responseI[159789]) nones++;
else nzeros++;
if (responseI[159802]) nones++;
else nzeros++;
if (responseI[160175]) nones++;
else nzeros++;
if (responseI[160208]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[312]=0;
	else	if (nzeros<nones) vnodeI[312]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[312];
 }
if (cwI[313]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[313]) nones=1; else nzeros=1; // count the original value
if (responseI[160288]) nones++;
else nzeros++;
if (responseI[160311]) nones++;
else nzeros++;
if (responseI[160370]) nones++;
else nzeros++;
if (responseI[160466]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[313]=0;
	else	if (nzeros<nones) vnodeI[313]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[313];
 }
if (cwI[314]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[314]) nones=1; else nzeros=1; // count the original value
if (responseI[161032]) nones++;
else nzeros++;
if (responseI[161042]) nones++;
else nzeros++;
if (responseI[161072]) nones++;
else nzeros++;
if (responseI[161217]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[314]=0;
	else	if (nzeros<nones) vnodeI[314]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[314];
 }
if (cwI[315]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[315]) nones=1; else nzeros=1; // count the original value
if (responseI[161466]) nones++;
else nzeros++;
if (responseI[161721]) nones++;
else nzeros++;
if (responseI[161729]) nones++;
else nzeros++;
if (responseI[161772]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[315]=0;
	else	if (nzeros<nones) vnodeI[315]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[315];
 }
if (cwI[316]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[316]) nones=1; else nzeros=1; // count the original value
if (responseI[161880]) nones++;
else nzeros++;
if (responseI[161960]) nones++;
else nzeros++;
if (responseI[162096]) nones++;
else nzeros++;
if (responseI[162284]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[316]=0;
	else	if (nzeros<nones) vnodeI[316]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[316];
 }
if (cwI[317]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[317]) nones=1; else nzeros=1; // count the original value
if (responseI[162707]) nones++;
else nzeros++;
if (responseI[162731]) nones++;
else nzeros++;
if (responseI[162742]) nones++;
else nzeros++;
if (responseI[162760]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[317]=0;
	else	if (nzeros<nones) vnodeI[317]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[317];
 }
if (cwI[318]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[318]) nones=1; else nzeros=1; // count the original value
if (responseI[162961]) nones++;
else nzeros++;
if (responseI[162965]) nones++;
else nzeros++;
if (responseI[162967]) nones++;
else nzeros++;
if (responseI[163134]) nones++;
else nzeros++;
if (responseI[163253]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[318]=0;
	else	if (nzeros<nones) vnodeI[318]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[318];
 }
if (cwI[319]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[319]) nones=1; else nzeros=1; // count the original value
if (responseI[163328]) nones++;
else nzeros++;
if (responseI[163448]) nones++;
else nzeros++;
if (responseI[163498]) nones++;
else nzeros++;
if (responseI[163684]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[319]=0;
	else	if (nzeros<nones) vnodeI[319]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[319];
 }
if (cwI[320]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[320]) nones=1; else nzeros=1; // count the original value
if (responseI[163977]) nones++;
else nzeros++;
if (responseI[163980]) nones++;
else nzeros++;
if (responseI[164154]) nones++;
else nzeros++;
if (responseI[164224]) nones++;
else nzeros++;
if (responseI[164319]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[320]=0;
	else	if (nzeros<nones) vnodeI[320]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[320];
 }
if (cwI[321]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[321]) nones=1; else nzeros=1; // count the original value
if (responseI[164361]) nones++;
else nzeros++;
if (responseI[164439]) nones++;
else nzeros++;
if (responseI[164767]) nones++;
else nzeros++;
if (responseI[164828]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[321]=0;
	else	if (nzeros<nones) vnodeI[321]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[321];
 }
if (cwI[322]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[322]) nones=1; else nzeros=1; // count the original value
if (responseI[165079]) nones++;
else nzeros++;
if (responseI[165127]) nones++;
else nzeros++;
if (responseI[165156]) nones++;
else nzeros++;
if (responseI[165271]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[322]=0;
	else	if (nzeros<nones) vnodeI[322]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[322];
 }
if (cwI[323]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[323]) nones=1; else nzeros=1; // count the original value
if (responseI[165472]) nones++;
else nzeros++;
if (responseI[165647]) nones++;
else nzeros++;
if (responseI[165728]) nones++;
else nzeros++;
if (responseI[165790]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[323]=0;
	else	if (nzeros<nones) vnodeI[323]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[323];
 }
if (cwI[324]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[324]) nones=1; else nzeros=1; // count the original value
if (responseI[166133]) nones++;
else nzeros++;
if (responseI[166180]) nones++;
else nzeros++;
if (responseI[166305]) nones++;
else nzeros++;
if (responseI[166340]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[324]=0;
	else	if (nzeros<nones) vnodeI[324]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[324];
 }
if (cwI[325]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[325]) nones=1; else nzeros=1; // count the original value
if (responseI[166553]) nones++;
else nzeros++;
if (responseI[166678]) nones++;
else nzeros++;
if (responseI[166754]) nones++;
else nzeros++;
if (responseI[166876]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[325]=0;
	else	if (nzeros<nones) vnodeI[325]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[325];
 }
if (cwI[326]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[326]) nones=1; else nzeros=1; // count the original value
if (responseI[167119]) nones++;
else nzeros++;
if (responseI[167348]) nones++;
else nzeros++;
if (responseI[167387]) nones++;
else nzeros++;
if (responseI[167419]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[326]=0;
	else	if (nzeros<nones) vnodeI[326]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[326];
 }
if (cwI[327]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[327]) nones=1; else nzeros=1; // count the original value
if (responseI[167451]) nones++;
else nzeros++;
if (responseI[167456]) nones++;
else nzeros++;
if (responseI[167518]) nones++;
else nzeros++;
if (responseI[167542]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[327]=0;
	else	if (nzeros<nones) vnodeI[327]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[327];
 }
if (cwI[328]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[328]) nones=1; else nzeros=1; // count the original value
if (responseI[168213]) nones++;
else nzeros++;
if (responseI[168265]) nones++;
else nzeros++;
if (responseI[168282]) nones++;
else nzeros++;
if (responseI[168399]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[328]=0;
	else	if (nzeros<nones) vnodeI[328]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[328];
 }
if (cwI[329]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[329]) nones=1; else nzeros=1; // count the original value
if (responseI[168578]) nones++;
else nzeros++;
if (responseI[168643]) nones++;
else nzeros++;
if (responseI[168670]) nones++;
else nzeros++;
if (responseI[168742]) nones++;
else nzeros++;
if (responseI[168836]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[329]=0;
	else	if (nzeros<nones) vnodeI[329]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[329];
 }
if (cwI[330]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[330]) nones=1; else nzeros=1; // count the original value
if (responseI[169154]) nones++;
else nzeros++;
if (responseI[169157]) nones++;
else nzeros++;
if (responseI[169223]) nones++;
else nzeros++;
if (responseI[169404]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[330]=0;
	else	if (nzeros<nones) vnodeI[330]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[330];
 }
if (cwI[331]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[331]) nones=1; else nzeros=1; // count the original value
if (responseI[169688]) nones++;
else nzeros++;
if (responseI[169821]) nones++;
else nzeros++;
if (responseI[169878]) nones++;
else nzeros++;
if (responseI[169929]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[331]=0;
	else	if (nzeros<nones) vnodeI[331]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[331];
 }
if (cwI[332]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[332]) nones=1; else nzeros=1; // count the original value
if (responseI[170073]) nones++;
else nzeros++;
if (responseI[170116]) nones++;
else nzeros++;
if (responseI[170377]) nones++;
else nzeros++;
if (responseI[170482]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[332]=0;
	else	if (nzeros<nones) vnodeI[332]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[332];
 }
if (cwI[333]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[333]) nones=1; else nzeros=1; // count the original value
if (responseI[170730]) nones++;
else nzeros++;
if (responseI[170759]) nones++;
else nzeros++;
if (responseI[170821]) nones++;
else nzeros++;
if (responseI[170969]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[333]=0;
	else	if (nzeros<nones) vnodeI[333]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[333];
 }
if (cwI[334]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[334]) nones=1; else nzeros=1; // count the original value
if (responseI[171111]) nones++;
else nzeros++;
if (responseI[171119]) nones++;
else nzeros++;
if (responseI[171312]) nones++;
else nzeros++;
if (responseI[171465]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[334]=0;
	else	if (nzeros<nones) vnodeI[334]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[334];
 }
if (cwI[335]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[335]) nones=1; else nzeros=1; // count the original value
if (responseI[171689]) nones++;
else nzeros++;
if (responseI[171920]) nones++;
else nzeros++;
if (responseI[171975]) nones++;
else nzeros++;
if (responseI[171983]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[335]=0;
	else	if (nzeros<nones) vnodeI[335]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[335];
 }
if (cwI[336]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[336]) nones=1; else nzeros=1; // count the original value
if (responseI[172032]) nones++;
else nzeros++;
if (responseI[172061]) nones++;
else nzeros++;
if (responseI[172261]) nones++;
else nzeros++;
if (responseI[172376]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[336]=0;
	else	if (nzeros<nones) vnodeI[336]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[336];
 }
if (cwI[337]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[337]) nones=1; else nzeros=1; // count the original value
if (responseI[172722]) nones++;
else nzeros++;
if (responseI[172727]) nones++;
else nzeros++;
if (responseI[172866]) nones++;
else nzeros++;
if (responseI[173044]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[337]=0;
	else	if (nzeros<nones) vnodeI[337]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[337];
 }
if (cwI[338]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[338]) nones=1; else nzeros=1; // count the original value
if (responseI[173129]) nones++;
else nzeros++;
if (responseI[173180]) nones++;
else nzeros++;
if (responseI[173349]) nones++;
else nzeros++;
if (responseI[173560]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[338]=0;
	else	if (nzeros<nones) vnodeI[338]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[338];
 }
if (cwI[339]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[339]) nones=1; else nzeros=1; // count the original value
if (responseI[173598]) nones++;
else nzeros++;
if (responseI[173736]) nones++;
else nzeros++;
if (responseI[173739]) nones++;
else nzeros++;
if (responseI[173854]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[339]=0;
	else	if (nzeros<nones) vnodeI[339]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[339];
 }
if (cwI[340]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[340]) nones=1; else nzeros=1; // count the original value
if (responseI[174106]) nones++;
else nzeros++;
if (responseI[174149]) nones++;
else nzeros++;
if (responseI[174154]) nones++;
else nzeros++;
if (responseI[174484]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[340]=0;
	else	if (nzeros<nones) vnodeI[340]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[340];
 }
if (cwI[341]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[341]) nones=1; else nzeros=1; // count the original value
if (responseI[174825]) nones++;
else nzeros++;
if (responseI[174841]) nones++;
else nzeros++;
if (responseI[174853]) nones++;
else nzeros++;
if (responseI[175061]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[341]=0;
	else	if (nzeros<nones) vnodeI[341]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[341];
 }
if (cwI[342]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[342]) nones=1; else nzeros=1; // count the original value
if (responseI[175106]) nones++;
else nzeros++;
if (responseI[175222]) nones++;
else nzeros++;
if (responseI[175279]) nones++;
else nzeros++;
if (responseI[175413]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[342]=0;
	else	if (nzeros<nones) vnodeI[342]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[342];
 }
if (cwI[343]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[343]) nones=1; else nzeros=1; // count the original value
if (responseI[175763]) nones++;
else nzeros++;
if (responseI[175781]) nones++;
else nzeros++;
if (responseI[175952]) nones++;
else nzeros++;
if (responseI[176062]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[343]=0;
	else	if (nzeros<nones) vnodeI[343]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[343];
 }
if (cwI[344]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[344]) nones=1; else nzeros=1; // count the original value
if (responseI[176205]) nones++;
else nzeros++;
if (responseI[176328]) nones++;
else nzeros++;
if (responseI[176351]) nones++;
else nzeros++;
if (responseI[176393]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[344]=0;
	else	if (nzeros<nones) vnodeI[344]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[344];
 }
if (cwI[345]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[345]) nones=1; else nzeros=1; // count the original value
if (responseI[176852]) nones++;
else nzeros++;
if (responseI[176854]) nones++;
else nzeros++;
if (responseI[176864]) nones++;
else nzeros++;
if (responseI[176918]) nones++;
else nzeros++;
if (responseI[176960]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[345]=0;
	else	if (nzeros<nones) vnodeI[345]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[345];
 }
if (cwI[346]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[346]) nones=1; else nzeros=1; // count the original value
if (responseI[177160]) nones++;
else nzeros++;
if (responseI[177273]) nones++;
else nzeros++;
if (responseI[177295]) nones++;
else nzeros++;
if (responseI[177654]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[346]=0;
	else	if (nzeros<nones) vnodeI[346]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[346];
 }
if (cwI[347]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[347]) nones=1; else nzeros=1; // count the original value
if (responseI[177723]) nones++;
else nzeros++;
if (responseI[177756]) nones++;
else nzeros++;
if (responseI[177815]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[347]=0;
	else	if (nzeros<nones) vnodeI[347]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[347];
 }
if (cwI[348]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[348]) nones=1; else nzeros=1; // count the original value
if (responseI[178208]) nones++;
else nzeros++;
if (responseI[178294]) nones++;
else nzeros++;
if (responseI[178427]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[348]=0;
	else	if (nzeros<nones) vnodeI[348]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[348];
 }
if (cwI[349]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[349]) nones=1; else nzeros=1; // count the original value
if (responseI[178689]) nones++;
else nzeros++;
if (responseI[178772]) nones++;
else nzeros++;
if (responseI[178807]) nones++;
else nzeros++;
if (responseI[178809]) nones++;
else nzeros++;
if (responseI[179105]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[349]=0;
	else	if (nzeros<nones) vnodeI[349]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[349];
 }
if (cwI[350]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[350]) nones=1; else nzeros=1; // count the original value
if (responseI[179259]) nones++;
else nzeros++;
if (responseI[179515]) nones++;
else nzeros++;
if (responseI[179539]) nones++;
else nzeros++;
if (responseI[179551]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[350]=0;
	else	if (nzeros<nones) vnodeI[350]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[350];
 }
if (cwI[351]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[351]) nones=1; else nzeros=1; // count the original value
if (responseI[179947]) nones++;
else nzeros++;
if (responseI[180135]) nones++;
else nzeros++;
if (responseI[180175]) nones++;
else nzeros++;
if (responseI[180200]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[351]=0;
	else	if (nzeros<nones) vnodeI[351]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[351];
 }
if (cwI[352]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[352]) nones=1; else nzeros=1; // count the original value
if (responseI[180236]) nones++;
else nzeros++;
if (responseI[180242]) nones++;
else nzeros++;
if (responseI[180456]) nones++;
else nzeros++;
if (responseI[180584]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[352]=0;
	else	if (nzeros<nones) vnodeI[352]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[352];
 }
if (cwI[353]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[353]) nones=1; else nzeros=1; // count the original value
if (responseI[180914]) nones++;
else nzeros++;
if (responseI[180937]) nones++;
else nzeros++;
if (responseI[180964]) nones++;
else nzeros++;
if (responseI[181029]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[353]=0;
	else	if (nzeros<nones) vnodeI[353]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[353];
 }
if (cwI[354]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[354]) nones=1; else nzeros=1; // count the original value
if (responseI[181257]) nones++;
else nzeros++;
if (responseI[181460]) nones++;
else nzeros++;
if (responseI[181604]) nones++;
else nzeros++;
if (responseI[181653]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[354]=0;
	else	if (nzeros<nones) vnodeI[354]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[354];
 }
if (cwI[355]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[355]) nones=1; else nzeros=1; // count the original value
if (responseI[181801]) nones++;
else nzeros++;
if (responseI[181862]) nones++;
else nzeros++;
if (responseI[181918]) nones++;
else nzeros++;
if (responseI[182130]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[355]=0;
	else	if (nzeros<nones) vnodeI[355]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[355];
 }
if (cwI[356]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[356]) nones=1; else nzeros=1; // count the original value
if (responseI[182313]) nones++;
else nzeros++;
if (responseI[182342]) nones++;
else nzeros++;
if (responseI[182511]) nones++;
else nzeros++;
if (responseI[182753]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[356]=0;
	else	if (nzeros<nones) vnodeI[356]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[356];
 }
if (cwI[357]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[357]) nones=1; else nzeros=1; // count the original value
if (responseI[182896]) nones++;
else nzeros++;
if (responseI[183066]) nones++;
else nzeros++;
if (responseI[183082]) nones++;
else nzeros++;
if (responseI[183123]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[357]=0;
	else	if (nzeros<nones) vnodeI[357]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[357];
 }
if (cwI[358]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[358]) nones=1; else nzeros=1; // count the original value
if (responseI[183481]) nones++;
else nzeros++;
if (responseI[183487]) nones++;
else nzeros++;
if (responseI[183528]) nones++;
else nzeros++;
if (responseI[183705]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[358]=0;
	else	if (nzeros<nones) vnodeI[358]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[358];
 }
if (cwI[359]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[359]) nones=1; else nzeros=1; // count the original value
if (responseI[183865]) nones++;
else nzeros++;
if (responseI[183881]) nones++;
else nzeros++;
if (responseI[183898]) nones++;
else nzeros++;
if (responseI[184121]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[359]=0;
	else	if (nzeros<nones) vnodeI[359]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[359];
 }
if (cwI[360]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[360]) nones=1; else nzeros=1; // count the original value
if (responseI[184369]) nones++;
else nzeros++;
if (responseI[184432]) nones++;
else nzeros++;
if (responseI[184507]) nones++;
else nzeros++;
if (responseI[184590]) nones++;
else nzeros++;
if (responseI[184829]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[360]=0;
	else	if (nzeros<nones) vnodeI[360]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[360];
 }
if (cwI[361]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[361]) nones=1; else nzeros=1; // count the original value
if (responseI[184974]) nones++;
else nzeros++;
if (responseI[185133]) nones++;
else nzeros++;
if (responseI[185280]) nones++;
else nzeros++;
if (responseI[185322]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[361]=0;
	else	if (nzeros<nones) vnodeI[361]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[361];
 }
if (cwI[362]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[362]) nones=1; else nzeros=1; // count the original value
if (responseI[185384]) nones++;
else nzeros++;
if (responseI[185437]) nones++;
else nzeros++;
if (responseI[185576]) nones++;
else nzeros++;
if (responseI[185822]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[362]=0;
	else	if (nzeros<nones) vnodeI[362]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[362];
 }
if (cwI[363]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[363]) nones=1; else nzeros=1; // count the original value
if (responseI[185950]) nones++;
else nzeros++;
if (responseI[185977]) nones++;
else nzeros++;
if (responseI[186123]) nones++;
else nzeros++;
if (responseI[186255]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[363]=0;
	else	if (nzeros<nones) vnodeI[363]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[363];
 }
if (cwI[364]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[364]) nones=1; else nzeros=1; // count the original value
if (responseI[186698]) nones++;
else nzeros++;
if (responseI[186819]) nones++;
else nzeros++;
if (responseI[186820]) nones++;
else nzeros++;
if (responseI[186844]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[364]=0;
	else	if (nzeros<nones) vnodeI[364]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[364];
 }
if (cwI[365]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[365]) nones=1; else nzeros=1; // count the original value
if (responseI[186983]) nones++;
else nzeros++;
if (responseI[187016]) nones++;
else nzeros++;
if (responseI[187096]) nones++;
else nzeros++;
if (responseI[187276]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[365]=0;
	else	if (nzeros<nones) vnodeI[365]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[365];
 }
if (cwI[366]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[366]) nones=1; else nzeros=1; // count the original value
if (responseI[187468]) nones++;
else nzeros++;
if (responseI[187548]) nones++;
else nzeros++;
if (responseI[187588]) nones++;
else nzeros++;
if (responseI[187615]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[366]=0;
	else	if (nzeros<nones) vnodeI[366]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[366];
 }
if (cwI[367]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[367]) nones=1; else nzeros=1; // count the original value
if (responseI[188145]) nones++;
else nzeros++;
if (responseI[188148]) nones++;
else nzeros++;
if (responseI[188154]) nones++;
else nzeros++;
if (responseI[188221]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[367]=0;
	else	if (nzeros<nones) vnodeI[367]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[367];
 }
if (cwI[368]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[368]) nones=1; else nzeros=1; // count the original value
if (responseI[188451]) nones++;
else nzeros++;
if (responseI[188503]) nones++;
else nzeros++;
if (responseI[188634]) nones++;
else nzeros++;
if (responseI[188705]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[368]=0;
	else	if (nzeros<nones) vnodeI[368]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[368];
 }
if (cwI[369]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[369]) nones=1; else nzeros=1; // count the original value
if (responseI[188972]) nones++;
else nzeros++;
if (responseI[188997]) nones++;
else nzeros++;
if (responseI[189275]) nones++;
else nzeros++;
if (responseI[189386]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[369]=0;
	else	if (nzeros<nones) vnodeI[369]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[369];
 }
if (cwI[370]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[370]) nones=1; else nzeros=1; // count the original value
if (responseI[189445]) nones++;
else nzeros++;
if (responseI[189648]) nones++;
else nzeros++;
if (responseI[189671]) nones++;
else nzeros++;
if (responseI[189712]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[370]=0;
	else	if (nzeros<nones) vnodeI[370]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[370];
 }
if (cwI[371]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[371]) nones=1; else nzeros=1; // count the original value
if (responseI[190042]) nones++;
else nzeros++;
if (responseI[190047]) nones++;
else nzeros++;
if (responseI[190155]) nones++;
else nzeros++;
if (responseI[190168]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[371]=0;
	else	if (nzeros<nones) vnodeI[371]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[371];
 }
if (cwI[372]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[372]) nones=1; else nzeros=1; // count the original value
if (responseI[190518]) nones++;
else nzeros++;
if (responseI[190622]) nones++;
else nzeros++;
if (responseI[190675]) nones++;
else nzeros++;
if (responseI[190684]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[372]=0;
	else	if (nzeros<nones) vnodeI[372]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[372];
 }
if (cwI[373]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[373]) nones=1; else nzeros=1; // count the original value
if (responseI[191041]) nones++;
else nzeros++;
if (responseI[191084]) nones++;
else nzeros++;
if (responseI[191275]) nones++;
else nzeros++;
if (responseI[191287]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[373]=0;
	else	if (nzeros<nones) vnodeI[373]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[373];
 }
if (cwI[374]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[374]) nones=1; else nzeros=1; // count the original value
if (responseI[191583]) nones++;
else nzeros++;
if (responseI[191749]) nones++;
else nzeros++;
if (responseI[191789]) nones++;
else nzeros++;
if (responseI[191802]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[374]=0;
	else	if (nzeros<nones) vnodeI[374]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[374];
 }
if (cwI[375]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[375]) nones=1; else nzeros=1; // count the original value
if (responseI[192063]) nones++;
else nzeros++;
if (responseI[192465]) nones++;
else nzeros++;
if (responseI[192495]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[375]=0;
	else	if (nzeros<nones) vnodeI[375]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[375];
 }
if (cwI[376]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[376]) nones=1; else nzeros=1; // count the original value
if (responseI[192635]) nones++;
else nzeros++;
if (responseI[192702]) nones++;
else nzeros++;
if (responseI[192749]) nones++;
else nzeros++;
if (responseI[192885]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[376]=0;
	else	if (nzeros<nones) vnodeI[376]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[376];
 }
if (cwI[377]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[377]) nones=1; else nzeros=1; // count the original value
if (responseI[193065]) nones++;
else nzeros++;
if (responseI[193084]) nones++;
else nzeros++;
if (responseI[193191]) nones++;
else nzeros++;
if (responseI[193208]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[377]=0;
	else	if (nzeros<nones) vnodeI[377]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[377];
 }
if (cwI[378]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[378]) nones=1; else nzeros=1; // count the original value
if (responseI[193916]) nones++;
else nzeros++;
if (responseI[193948]) nones++;
else nzeros++;
if (responseI[194016]) nones++;
else nzeros++;
if (responseI[194047]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[378]=0;
	else	if (nzeros<nones) vnodeI[378]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[378];
 }
if (cwI[379]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[379]) nones=1; else nzeros=1; // count the original value
if (responseI[194227]) nones++;
else nzeros++;
if (responseI[194354]) nones++;
else nzeros++;
if (responseI[194397]) nones++;
else nzeros++;
if (responseI[194451]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[379]=0;
	else	if (nzeros<nones) vnodeI[379]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[379];
 }
if (cwI[380]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[380]) nones=1; else nzeros=1; // count the original value
if (responseI[194579]) nones++;
else nzeros++;
if (responseI[194605]) nones++;
else nzeros++;
if (responseI[194904]) nones++;
else nzeros++;
if (responseI[194943]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[380]=0;
	else	if (nzeros<nones) vnodeI[380]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[380];
 }
if (cwI[381]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[381]) nones=1; else nzeros=1; // count the original value
if (responseI[195088]) nones++;
else nzeros++;
if (responseI[195108]) nones++;
else nzeros++;
if (responseI[195188]) nones++;
else nzeros++;
if (responseI[195254]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[381]=0;
	else	if (nzeros<nones) vnodeI[381]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[381];
 }
if (cwI[382]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[382]) nones=1; else nzeros=1; // count the original value
if (responseI[195876]) nones++;
else nzeros++;
if (responseI[196019]) nones++;
else nzeros++;
if (responseI[196049]) nones++;
else nzeros++;
if (responseI[196091]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[382]=0;
	else	if (nzeros<nones) vnodeI[382]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[382];
 }
if (cwI[383]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[383]) nones=1; else nzeros=1; // count the original value
if (responseI[196133]) nones++;
else nzeros++;
if (responseI[196304]) nones++;
else nzeros++;
if (responseI[196306]) nones++;
else nzeros++;
if (responseI[196535]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[383]=0;
	else	if (nzeros<nones) vnodeI[383]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[383];
 }
if (cwI[384]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[384]) nones=1; else nzeros=1; // count the original value
if (responseI[196801]) nones++;
else nzeros++;
if (responseI[196828]) nones++;
else nzeros++;
if (responseI[196956]) nones++;
else nzeros++;
if (responseI[197070]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[384]=0;
	else	if (nzeros<nones) vnodeI[384]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[384];
 }
if (cwI[385]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[385]) nones=1; else nzeros=1; // count the original value
if (responseI[197212]) nones++;
else nzeros++;
if (responseI[197360]) nones++;
else nzeros++;
if (responseI[197589]) nones++;
else nzeros++;
if (responseI[197614]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[385]=0;
	else	if (nzeros<nones) vnodeI[385]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[385];
 }
if (cwI[386]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[386]) nones=1; else nzeros=1; // count the original value
if (responseI[197652]) nones++;
else nzeros++;
if (responseI[197665]) nones++;
else nzeros++;
if (responseI[197880]) nones++;
else nzeros++;
if (responseI[198140]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[386]=0;
	else	if (nzeros<nones) vnodeI[386]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[386];
 }
if (cwI[387]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[387]) nones=1; else nzeros=1; // count the original value
if (responseI[198147]) nones++;
else nzeros++;
if (responseI[198237]) nones++;
else nzeros++;
if (responseI[198265]) nones++;
else nzeros++;
if (responseI[198582]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[387]=0;
	else	if (nzeros<nones) vnodeI[387]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[387];
 }
if (cwI[388]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[388]) nones=1; else nzeros=1; // count the original value
if (responseI[198720]) nones++;
else nzeros++;
if (responseI[198804]) nones++;
else nzeros++;
if (responseI[199076]) nones++;
else nzeros++;
if (responseI[199134]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[388]=0;
	else	if (nzeros<nones) vnodeI[388]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[388];
 }
if (cwI[389]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[389]) nones=1; else nzeros=1; // count the original value
if (responseI[199394]) nones++;
else nzeros++;
if (responseI[199493]) nones++;
else nzeros++;
if (responseI[199500]) nones++;
else nzeros++;
if (responseI[199526]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[389]=0;
	else	if (nzeros<nones) vnodeI[389]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[389];
 }
if (cwI[390]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[390]) nones=1; else nzeros=1; // count the original value
if (responseI[200093]) nones++;
else nzeros++;
if (responseI[200142]) nones++;
else nzeros++;
if (responseI[200170]) nones++;
else nzeros++;
if (responseI[200174]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[390]=0;
	else	if (nzeros<nones) vnodeI[390]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[390];
 }
if (cwI[391]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[391]) nones=1; else nzeros=1; // count the original value
if (responseI[200228]) nones++;
else nzeros++;
if (responseI[200263]) nones++;
else nzeros++;
if (responseI[200330]) nones++;
else nzeros++;
if (responseI[200627]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[391]=0;
	else	if (nzeros<nones) vnodeI[391]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[391];
 }
if (cwI[392]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[392]) nones=1; else nzeros=1; // count the original value
if (responseI[200722]) nones++;
else nzeros++;
if (responseI[200845]) nones++;
else nzeros++;
if (responseI[201094]) nones++;
else nzeros++;
if (responseI[201097]) nones++;
else nzeros++;
if (responseI[201202]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[392]=0;
	else	if (nzeros<nones) vnodeI[392]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[392];
 }
if (cwI[393]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[393]) nones=1; else nzeros=1; // count the original value
if (responseI[201315]) nones++;
else nzeros++;
if (responseI[201426]) nones++;
else nzeros++;
if (responseI[201581]) nones++;
else nzeros++;
if (responseI[201722]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[393]=0;
	else	if (nzeros<nones) vnodeI[393]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[393];
 }
if (cwI[394]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[394]) nones=1; else nzeros=1; // count the original value
if (responseI[201767]) nones++;
else nzeros++;
if (responseI[201883]) nones++;
else nzeros++;
if (responseI[202103]) nones++;
else nzeros++;
if (responseI[202148]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[394]=0;
	else	if (nzeros<nones) vnodeI[394]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[394];
 }
if (cwI[395]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[395]) nones=1; else nzeros=1; // count the original value
if (responseI[202349]) nones++;
else nzeros++;
if (responseI[202599]) nones++;
else nzeros++;
if (responseI[202612]) nones++;
else nzeros++;
if (responseI[202635]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[395]=0;
	else	if (nzeros<nones) vnodeI[395]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[395];
 }
if (cwI[396]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[396]) nones=1; else nzeros=1; // count the original value
if (responseI[202879]) nones++;
else nzeros++;
if (responseI[202920]) nones++;
else nzeros++;
if (responseI[202967]) nones++;
else nzeros++;
if (responseI[203129]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[396]=0;
	else	if (nzeros<nones) vnodeI[396]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[396];
 }
if (cwI[397]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[397]) nones=1; else nzeros=1; // count the original value
if (responseI[203401]) nones++;
else nzeros++;
if (responseI[203555]) nones++;
else nzeros++;
if (responseI[203622]) nones++;
else nzeros++;
if (responseI[203623]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[397]=0;
	else	if (nzeros<nones) vnodeI[397]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[397];
 }
if (cwI[398]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[398]) nones=1; else nzeros=1; // count the original value
if (responseI[203794]) nones++;
else nzeros++;
if (responseI[203840]) nones++;
else nzeros++;
if (responseI[204065]) nones++;
else nzeros++;
if (responseI[204121]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[398]=0;
	else	if (nzeros<nones) vnodeI[398]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[398];
 }
if (cwI[399]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[399]) nones=1; else nzeros=1; // count the original value
if (responseI[204308]) nones++;
else nzeros++;
if (responseI[204550]) nones++;
else nzeros++;
if (responseI[204706]) nones++;
else nzeros++;
if (responseI[204799]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[399]=0;
	else	if (nzeros<nones) vnodeI[399]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[399];
 }
if (cwI[400]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[400]) nones=1; else nzeros=1; // count the original value
if (responseI[204900]) nones++;
else nzeros++;
if (responseI[204974]) nones++;
else nzeros++;
if (responseI[205024]) nones++;
else nzeros++;
if (responseI[205208]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[400]=0;
	else	if (nzeros<nones) vnodeI[400]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[400];
 }
if (cwI[401]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[401]) nones=1; else nzeros=1; // count the original value
if (responseI[205426]) nones++;
else nzeros++;
if (responseI[205512]) nones++;
else nzeros++;
if (responseI[205701]) nones++;
else nzeros++;
if (responseI[205791]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[401]=0;
	else	if (nzeros<nones) vnodeI[401]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[401];
 }
if (cwI[402]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[402]) nones=1; else nzeros=1; // count the original value
if (responseI[206241]) nones++;
else nzeros++;
if (responseI[206308]) nones++;
else nzeros++;
if (responseI[206320]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[402]=0;
	else	if (nzeros<nones) vnodeI[402]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[402];
 }
if (cwI[403]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[403]) nones=1; else nzeros=1; // count the original value
if (responseI[206367]) nones++;
else nzeros++;
if (responseI[206383]) nones++;
else nzeros++;
if (responseI[206488]) nones++;
else nzeros++;
if (responseI[206613]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[403]=0;
	else	if (nzeros<nones) vnodeI[403]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[403];
 }
if (cwI[404]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[404]) nones=1; else nzeros=1; // count the original value
if (responseI[206990]) nones++;
else nzeros++;
if (responseI[206993]) nones++;
else nzeros++;
if (responseI[207022]) nones++;
else nzeros++;
if (responseI[207322]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[404]=0;
	else	if (nzeros<nones) vnodeI[404]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[404];
 }
if (cwI[405]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[405]) nones=1; else nzeros=1; // count the original value
if (responseI[207389]) nones++;
else nzeros++;
if (responseI[207423]) nones++;
else nzeros++;
if (responseI[207457]) nones++;
else nzeros++;
if (responseI[207533]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[405]=0;
	else	if (nzeros<nones) vnodeI[405]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[405];
 }
if (cwI[406]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[406]) nones=1; else nzeros=1; // count the original value
if (responseI[207876]) nones++;
else nzeros++;
if (responseI[207882]) nones++;
else nzeros++;
if (responseI[208102]) nones++;
else nzeros++;
if (responseI[208294]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[406]=0;
	else	if (nzeros<nones) vnodeI[406]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[406];
 }
if (cwI[407]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[407]) nones=1; else nzeros=1; // count the original value
if (responseI[208683]) nones++;
else nzeros++;
if (responseI[208708]) nones++;
else nzeros++;
if (responseI[208738]) nones++;
else nzeros++;
if (responseI[208887]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[407]=0;
	else	if (nzeros<nones) vnodeI[407]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[407];
 }
if (cwI[408]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[408]) nones=1; else nzeros=1; // count the original value
if (responseI[208972]) nones++;
else nzeros++;
if (responseI[209130]) nones++;
else nzeros++;
if (responseI[209151]) nones++;
else nzeros++;
if (responseI[209388]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[408]=0;
	else	if (nzeros<nones) vnodeI[408]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[408];
 }
if (cwI[409]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[409]) nones=1; else nzeros=1; // count the original value
if (responseI[209581]) nones++;
else nzeros++;
if (responseI[209596]) nones++;
else nzeros++;
if (responseI[209691]) nones++;
else nzeros++;
if (responseI[209745]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[409]=0;
	else	if (nzeros<nones) vnodeI[409]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[409];
 }
if (cwI[410]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[410]) nones=1; else nzeros=1; // count the original value
if (responseI[210041]) nones++;
else nzeros++;
if (responseI[210194]) nones++;
else nzeros++;
if (responseI[210391]) nones++;
else nzeros++;
if (responseI[210421]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[410]=0;
	else	if (nzeros<nones) vnodeI[410]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[410];
 }
if (cwI[411]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[411]) nones=1; else nzeros=1; // count the original value
if (responseI[210513]) nones++;
else nzeros++;
if (responseI[210522]) nones++;
else nzeros++;
if (responseI[210609]) nones++;
else nzeros++;
if (responseI[210684]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[411]=0;
	else	if (nzeros<nones) vnodeI[411]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[411];
 }
if (cwI[412]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[412]) nones=1; else nzeros=1; // count the original value
if (responseI[210973]) nones++;
else nzeros++;
if (responseI[211103]) nones++;
else nzeros++;
if (responseI[211105]) nones++;
else nzeros++;
if (responseI[211352]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[412]=0;
	else	if (nzeros<nones) vnodeI[412]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[412];
 }
if (cwI[413]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[413]) nones=1; else nzeros=1; // count the original value
if (responseI[211463]) nones++;
else nzeros++;
if (responseI[211579]) nones++;
else nzeros++;
if (responseI[211669]) nones++;
else nzeros++;
if (responseI[211761]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[413]=0;
	else	if (nzeros<nones) vnodeI[413]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[413];
 }
if (cwI[414]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[414]) nones=1; else nzeros=1; // count the original value
if (responseI[211979]) nones++;
else nzeros++;
if (responseI[212329]) nones++;
else nzeros++;
if (responseI[212383]) nones++;
else nzeros++;
if (responseI[212442]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[414]=0;
	else	if (nzeros<nones) vnodeI[414]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[414];
 }
if (cwI[415]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[415]) nones=1; else nzeros=1; // count the original value
if (responseI[212530]) nones++;
else nzeros++;
if (responseI[212682]) nones++;
else nzeros++;
if (responseI[212808]) nones++;
else nzeros++;
if (responseI[212973]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[415]=0;
	else	if (nzeros<nones) vnodeI[415]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[415];
 }
if (cwI[416]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[416]) nones=1; else nzeros=1; // count the original value
if (responseI[213002]) nones++;
else nzeros++;
if (responseI[213024]) nones++;
else nzeros++;
if (responseI[213291]) nones++;
else nzeros++;
if (responseI[213435]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[416]=0;
	else	if (nzeros<nones) vnodeI[416]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[416];
 }
if (cwI[417]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[417]) nones=1; else nzeros=1; // count the original value
if (responseI[213561]) nones++;
else nzeros++;
if (responseI[213823]) nones++;
else nzeros++;
if (responseI[213873]) nones++;
else nzeros++;
if (responseI[213997]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[417]=0;
	else	if (nzeros<nones) vnodeI[417]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[417];
 }
if (cwI[418]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[418]) nones=1; else nzeros=1; // count the original value
if (responseI[214083]) nones++;
else nzeros++;
if (responseI[214152]) nones++;
else nzeros++;
if (responseI[214280]) nones++;
else nzeros++;
if (responseI[214354]) nones++;
else nzeros++;
if (responseI[214505]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[418]=0;
	else	if (nzeros<nones) vnodeI[418]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[418];
 }
if (cwI[419]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[419]) nones=1; else nzeros=1; // count the original value
if (responseI[214594]) nones++;
else nzeros++;
if (responseI[214674]) nones++;
else nzeros++;
if (responseI[214819]) nones++;
else nzeros++;
if (responseI[215016]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[419]=0;
	else	if (nzeros<nones) vnodeI[419]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[419];
 }
if (cwI[420]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[420]) nones=1; else nzeros=1; // count the original value
if (responseI[215073]) nones++;
else nzeros++;
if (responseI[215089]) nones++;
else nzeros++;
if (responseI[215091]) nones++;
else nzeros++;
if (responseI[215483]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[420]=0;
	else	if (nzeros<nones) vnodeI[420]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[420];
 }
if (cwI[421]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[421]) nones=1; else nzeros=1; // count the original value
if (responseI[215579]) nones++;
else nzeros++;
if (responseI[215719]) nones++;
else nzeros++;
if (responseI[215778]) nones++;
else nzeros++;
if (responseI[215792]) nones++;
else nzeros++;
if (responseI[215960]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[421]=0;
	else	if (nzeros<nones) vnodeI[421]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[421];
 }
if (cwI[422]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[422]) nones=1; else nzeros=1; // count the original value
if (responseI[216210]) nones++;
else nzeros++;
if (responseI[216239]) nones++;
else nzeros++;
if (responseI[216307]) nones++;
else nzeros++;
if (responseI[216414]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[422]=0;
	else	if (nzeros<nones) vnodeI[422]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[422];
 }
if (cwI[423]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[423]) nones=1; else nzeros=1; // count the original value
if (responseI[216657]) nones++;
else nzeros++;
if (responseI[216707]) nones++;
else nzeros++;
if (responseI[216831]) nones++;
else nzeros++;
if (responseI[216851]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[423]=0;
	else	if (nzeros<nones) vnodeI[423]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[423];
 }
if (cwI[424]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[424]) nones=1; else nzeros=1; // count the original value
if (responseI[217110]) nones++;
else nzeros++;
if (responseI[217212]) nones++;
else nzeros++;
if (responseI[217231]) nones++;
else nzeros++;
if (responseI[217437]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[424]=0;
	else	if (nzeros<nones) vnodeI[424]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[424];
 }
if (cwI[425]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[425]) nones=1; else nzeros=1; // count the original value
if (responseI[217675]) nones++;
else nzeros++;
if (responseI[217781]) nones++;
else nzeros++;
if (responseI[217791]) nones++;
else nzeros++;
if (responseI[217831]) nones++;
else nzeros++;
if (responseI[217874]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[425]=0;
	else	if (nzeros<nones) vnodeI[425]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[425];
 }
if (cwI[426]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[426]) nones=1; else nzeros=1; // count the original value
if (responseI[218432]) nones++;
else nzeros++;
if (responseI[218572]) nones++;
else nzeros++;
if (responseI[218587]) nones++;
else nzeros++;
if (responseI[218621]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[426]=0;
	else	if (nzeros<nones) vnodeI[426]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[426];
 }
if (cwI[427]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[427]) nones=1; else nzeros=1; // count the original value
if (responseI[218690]) nones++;
else nzeros++;
if (responseI[218708]) nones++;
else nzeros++;
if (responseI[218774]) nones++;
else nzeros++;
if (responseI[218996]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[427]=0;
	else	if (nzeros<nones) vnodeI[427]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[427];
 }
if (cwI[428]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[428]) nones=1; else nzeros=1; // count the original value
if (responseI[219152]) nones++;
else nzeros++;
if (responseI[219160]) nones++;
else nzeros++;
if (responseI[219170]) nones++;
else nzeros++;
if (responseI[219493]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[428]=0;
	else	if (nzeros<nones) vnodeI[428]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[428];
 }
if (cwI[429]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[429]) nones=1; else nzeros=1; // count the original value
if (responseI[219792]) nones++;
else nzeros++;
if (responseI[219834]) nones++;
else nzeros++;
if (responseI[220002]) nones++;
else nzeros++;
if (responseI[220116]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[429]=0;
	else	if (nzeros<nones) vnodeI[429]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[429];
 }
if (cwI[430]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[430]) nones=1; else nzeros=1; // count the original value
if (responseI[220202]) nones++;
else nzeros++;
if (responseI[220291]) nones++;
else nzeros++;
if (responseI[220341]) nones++;
else nzeros++;
if (responseI[220342]) nones++;
else nzeros++;
if (responseI[220409]) nones++;
else nzeros++;
if (responseI[220570]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[430]=0;
	else	if (nzeros<nones) vnodeI[430]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[430];
 }
if (cwI[431]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[431]) nones=1; else nzeros=1; // count the original value
if (responseI[220785]) nones++;
else nzeros++;
if (responseI[220826]) nones++;
else nzeros++;
if (responseI[220850]) nones++;
else nzeros++;
if (responseI[220979]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[431]=0;
	else	if (nzeros<nones) vnodeI[431]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[431];
 }
if (cwI[432]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[432]) nones=1; else nzeros=1; // count the original value
if (responseI[221218]) nones++;
else nzeros++;
if (responseI[221230]) nones++;
else nzeros++;
if (responseI[221290]) nones++;
else nzeros++;
if (responseI[221346]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[432]=0;
	else	if (nzeros<nones) vnodeI[432]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[432];
 }
if (cwI[433]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[433]) nones=1; else nzeros=1; // count the original value
if (responseI[221961]) nones++;
else nzeros++;
if (responseI[221996]) nones++;
else nzeros++;
if (responseI[222146]) nones++;
else nzeros++;
if (responseI[222189]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[433]=0;
	else	if (nzeros<nones) vnodeI[433]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[433];
 }
if (cwI[434]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[434]) nones=1; else nzeros=1; // count the original value
if (responseI[222330]) nones++;
else nzeros++;
if (responseI[222436]) nones++;
else nzeros++;
if (responseI[222437]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[434]=0;
	else	if (nzeros<nones) vnodeI[434]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[434];
 }
if (cwI[435]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[435]) nones=1; else nzeros=1; // count the original value
if (responseI[222897]) nones++;
else nzeros++;
if (responseI[222980]) nones++;
else nzeros++;
if (responseI[222982]) nones++;
else nzeros++;
if (responseI[223001]) nones++;
else nzeros++;
if (responseI[223139]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[435]=0;
	else	if (nzeros<nones) vnodeI[435]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[435];
 }
if (cwI[436]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[436]) nones=1; else nzeros=1; // count the original value
if (responseI[223297]) nones++;
else nzeros++;
if (responseI[223347]) nones++;
else nzeros++;
if (responseI[223605]) nones++;
else nzeros++;
if (responseI[223637]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[436]=0;
	else	if (nzeros<nones) vnodeI[436]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[436];
 }
if (cwI[437]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[437]) nones=1; else nzeros=1; // count the original value
if (responseI[223758]) nones++;
else nzeros++;
if (responseI[223770]) nones++;
else nzeros++;
if (responseI[223774]) nones++;
else nzeros++;
if (responseI[224182]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[437]=0;
	else	if (nzeros<nones) vnodeI[437]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[437];
 }
if (cwI[438]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[438]) nones=1; else nzeros=1; // count the original value
if (responseI[224265]) nones++;
else nzeros++;
if (responseI[224329]) nones++;
else nzeros++;
if (responseI[224364]) nones++;
else nzeros++;
if (responseI[224378]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[438]=0;
	else	if (nzeros<nones) vnodeI[438]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[438];
 }
if (cwI[439]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[439]) nones=1; else nzeros=1; // count the original value
if (responseI[225029]) nones++;
else nzeros++;
if (responseI[225048]) nones++;
else nzeros++;
if (responseI[225122]) nones++;
else nzeros++;
if (responseI[225238]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[439]=0;
	else	if (nzeros<nones) vnodeI[439]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[439];
 }
if (cwI[440]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[440]) nones=1; else nzeros=1; // count the original value
if (responseI[225518]) nones++;
else nzeros++;
if (responseI[225561]) nones++;
else nzeros++;
if (responseI[225604]) nones++;
else nzeros++;
if (responseI[225674]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[440]=0;
	else	if (nzeros<nones) vnodeI[440]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[440];
 }
if (cwI[441]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[441]) nones=1; else nzeros=1; // count the original value
if (responseI[225820]) nones++;
else nzeros++;
if (responseI[226177]) nones++;
else nzeros++;
if (responseI[226206]) nones++;
else nzeros++;
if (responseI[226216]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[441]=0;
	else	if (nzeros<nones) vnodeI[441]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[441];
 }
if (cwI[442]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[442]) nones=1; else nzeros=1; // count the original value
if (responseI[226474]) nones++;
else nzeros++;
if (responseI[226523]) nones++;
else nzeros++;
if (responseI[226668]) nones++;
else nzeros++;
if (responseI[226735]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[442]=0;
	else	if (nzeros<nones) vnodeI[442]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[442];
 }
if (cwI[443]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[443]) nones=1; else nzeros=1; // count the original value
if (responseI[226818]) nones++;
else nzeros++;
if (responseI[226861]) nones++;
else nzeros++;
if (responseI[226895]) nones++;
else nzeros++;
if (responseI[226989]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[443]=0;
	else	if (nzeros<nones) vnodeI[443]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[443];
 }
if (cwI[444]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[444]) nones=1; else nzeros=1; // count the original value
if (responseI[227344]) nones++;
else nzeros++;
if (responseI[227382]) nones++;
else nzeros++;
if (responseI[227436]) nones++;
else nzeros++;
if (responseI[227727]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[444]=0;
	else	if (nzeros<nones) vnodeI[444]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[444];
 }
if (cwI[445]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[445]) nones=1; else nzeros=1; // count the original value
if (responseI[227855]) nones++;
else nzeros++;
if (responseI[228007]) nones++;
else nzeros++;
if (responseI[228106]) nones++;
else nzeros++;
if (responseI[228116]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[445]=0;
	else	if (nzeros<nones) vnodeI[445]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[445];
 }
if (cwI[446]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[446]) nones=1; else nzeros=1; // count the original value
if (responseI[228366]) nones++;
else nzeros++;
if (responseI[228511]) nones++;
else nzeros++;
if (responseI[228601]) nones++;
else nzeros++;
if (responseI[228722]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[446]=0;
	else	if (nzeros<nones) vnodeI[446]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[446];
 }
if (cwI[447]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[447]) nones=1; else nzeros=1; // count the original value
if (responseI[228998]) nones++;
else nzeros++;
if (responseI[229036]) nones++;
else nzeros++;
if (responseI[229208]) nones++;
else nzeros++;
if (responseI[229246]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[447]=0;
	else	if (nzeros<nones) vnodeI[447]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[447];
 }
if (cwI[448]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[448]) nones=1; else nzeros=1; // count the original value
if (responseI[229390]) nones++;
else nzeros++;
if (responseI[229391]) nones++;
else nzeros++;
if (responseI[229397]) nones++;
else nzeros++;
if (responseI[229713]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[448]=0;
	else	if (nzeros<nones) vnodeI[448]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[448];
 }
if (cwI[449]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[449]) nones=1; else nzeros=1; // count the original value
if (responseI[230134]) nones++;
else nzeros++;
if (responseI[230183]) nones++;
else nzeros++;
if (responseI[230184]) nones++;
else nzeros++;
if (responseI[230381]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[449]=0;
	else	if (nzeros<nones) vnodeI[449]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[449];
 }
if (cwI[450]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[450]) nones=1; else nzeros=1; // count the original value
if (responseI[230501]) nones++;
else nzeros++;
if (responseI[230512]) nones++;
else nzeros++;
if (responseI[230667]) nones++;
else nzeros++;
if (responseI[230861]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[450]=0;
	else	if (nzeros<nones) vnodeI[450]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[450];
 }
if (cwI[451]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[451]) nones=1; else nzeros=1; // count the original value
if (responseI[231130]) nones++;
else nzeros++;
if (responseI[231168]) nones++;
else nzeros++;
if (responseI[231178]) nones++;
else nzeros++;
if (responseI[231229]) nones++;
else nzeros++;
if (responseI[231347]) nones++;
else nzeros++;
if (responseI[231354]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[451]=0;
	else	if (nzeros<nones) vnodeI[451]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[451];
 }
if (cwI[452]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[452]) nones=1; else nzeros=1; // count the original value
if (responseI[231480]) nones++;
else nzeros++;
if (responseI[231501]) nones++;
else nzeros++;
if (responseI[231834]) nones++;
else nzeros++;
if (responseI[231849]) nones++;
else nzeros++;
if (responseI[231850]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[452]=0;
	else	if (nzeros<nones) vnodeI[452]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[452];
 }
if (cwI[453]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[453]) nones=1; else nzeros=1; // count the original value
if (responseI[232030]) nones++;
else nzeros++;
if (responseI[232123]) nones++;
else nzeros++;
if (responseI[232129]) nones++;
else nzeros++;
if (responseI[232282]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[453]=0;
	else	if (nzeros<nones) vnodeI[453]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[453];
 }
if (cwI[454]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[454]) nones=1; else nzeros=1; // count the original value
if (responseI[232522]) nones++;
else nzeros++;
if (responseI[232551]) nones++;
else nzeros++;
if (responseI[232564]) nones++;
else nzeros++;
if (responseI[232657]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[454]=0;
	else	if (nzeros<nones) vnodeI[454]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[454];
 }
if (cwI[455]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[455]) nones=1; else nzeros=1; // count the original value
if (responseI[233171]) nones++;
else nzeros++;
if (responseI[233254]) nones++;
else nzeros++;
if (responseI[233283]) nones++;
else nzeros++;
if (responseI[233293]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[455]=0;
	else	if (nzeros<nones) vnodeI[455]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[455];
 }
if (cwI[456]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[456]) nones=1; else nzeros=1; // count the original value
if (responseI[233515]) nones++;
else nzeros++;
if (responseI[233758]) nones++;
else nzeros++;
if (responseI[233921]) nones++;
else nzeros++;
if (responseI[233927]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[456]=0;
	else	if (nzeros<nones) vnodeI[456]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[456];
 }
if (cwI[457]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[457]) nones=1; else nzeros=1; // count the original value
if (responseI[233997]) nones++;
else nzeros++;
if (responseI[234026]) nones++;
else nzeros++;
if (responseI[234160]) nones++;
else nzeros++;
if (responseI[234459]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[457]=0;
	else	if (nzeros<nones) vnodeI[457]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[457];
 }
if (cwI[458]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[458]) nones=1; else nzeros=1; // count the original value
if (responseI[234642]) nones++;
else nzeros++;
if (responseI[234727]) nones++;
else nzeros++;
if (responseI[234814]) nones++;
else nzeros++;
if (responseI[234954]) nones++;
else nzeros++;
if (responseI[234979]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[458]=0;
	else	if (nzeros<nones) vnodeI[458]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[458];
 }
if (cwI[459]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[459]) nones=1; else nzeros=1; // count the original value
if (responseI[235019]) nones++;
else nzeros++;
if (responseI[235085]) nones++;
else nzeros++;
if (responseI[235091]) nones++;
else nzeros++;
if (responseI[235138]) nones++;
else nzeros++;
if (responseI[235367]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[459]=0;
	else	if (nzeros<nones) vnodeI[459]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[459];
 }
if (cwI[460]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[460]) nones=1; else nzeros=1; // count the original value
if (responseI[235591]) nones++;
else nzeros++;
if (responseI[235710]) nones++;
else nzeros++;
if (responseI[235805]) nones++;
else nzeros++;
if (responseI[235845]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[460]=0;
	else	if (nzeros<nones) vnodeI[460]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[460];
 }
if (cwI[461]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[461]) nones=1; else nzeros=1; // count the original value
if (responseI[236151]) nones++;
else nzeros++;
if (responseI[236160]) nones++;
else nzeros++;
if (responseI[236241]) nones++;
else nzeros++;
if (responseI[236393]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[461]=0;
	else	if (nzeros<nones) vnodeI[461]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[461];
 }
if (cwI[462]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[462]) nones=1; else nzeros=1; // count the original value
if (responseI[236569]) nones++;
else nzeros++;
if (responseI[236586]) nones++;
else nzeros++;
if (responseI[236685]) nones++;
else nzeros++;
if (responseI[236708]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[462]=0;
	else	if (nzeros<nones) vnodeI[462]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[462];
 }
if (cwI[463]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[463]) nones=1; else nzeros=1; // count the original value
if (responseI[237076]) nones++;
else nzeros++;
if (responseI[237332]) nones++;
else nzeros++;
if (responseI[237475]) nones++;
else nzeros++;
if (responseI[237527]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[463]=0;
	else	if (nzeros<nones) vnodeI[463]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[463];
 }
if (cwI[464]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[464]) nones=1; else nzeros=1; // count the original value
if (responseI[237624]) nones++;
else nzeros++;
if (responseI[237820]) nones++;
else nzeros++;
if (responseI[238016]) nones++;
else nzeros++;
if (responseI[238057]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[464]=0;
	else	if (nzeros<nones) vnodeI[464]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[464];
 }
if (cwI[465]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[465]) nones=1; else nzeros=1; // count the original value
if (responseI[238164]) nones++;
else nzeros++;
if (responseI[238172]) nones++;
else nzeros++;
if (responseI[238273]) nones++;
else nzeros++;
if (responseI[238325]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[465]=0;
	else	if (nzeros<nones) vnodeI[465]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[465];
 }
if (cwI[466]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[466]) nones=1; else nzeros=1; // count the original value
if (responseI[238817]) nones++;
else nzeros++;
if (responseI[238883]) nones++;
else nzeros++;
if (responseI[238904]) nones++;
else nzeros++;
if (responseI[238976]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[466]=0;
	else	if (nzeros<nones) vnodeI[466]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[466];
 }
if (cwI[467]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[467]) nones=1; else nzeros=1; // count the original value
if (responseI[239130]) nones++;
else nzeros++;
if (responseI[239186]) nones++;
else nzeros++;
if (responseI[239310]) nones++;
else nzeros++;
if (responseI[239445]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[467]=0;
	else	if (nzeros<nones) vnodeI[467]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[467];
 }
if (cwI[468]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[468]) nones=1; else nzeros=1; // count the original value
if (responseI[239678]) nones++;
else nzeros++;
if (responseI[239868]) nones++;
else nzeros++;
if (responseI[239987]) nones++;
else nzeros++;
if (responseI[240036]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[468]=0;
	else	if (nzeros<nones) vnodeI[468]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[468];
 }
if (cwI[469]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[469]) nones=1; else nzeros=1; // count the original value
if (responseI[240331]) nones++;
else nzeros++;
if (responseI[240388]) nones++;
else nzeros++;
if (responseI[240497]) nones++;
else nzeros++;
if (responseI[240623]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[469]=0;
	else	if (nzeros<nones) vnodeI[469]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[469];
 }
if (cwI[470]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[470]) nones=1; else nzeros=1; // count the original value
if (responseI[240753]) nones++;
else nzeros++;
if (responseI[240995]) nones++;
else nzeros++;
if (responseI[241005]) nones++;
else nzeros++;
if (responseI[241017]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[470]=0;
	else	if (nzeros<nones) vnodeI[470]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[470];
 }
if (cwI[471]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[471]) nones=1; else nzeros=1; // count the original value
if (responseI[241175]) nones++;
else nzeros++;
if (responseI[241230]) nones++;
else nzeros++;
if (responseI[241234]) nones++;
else nzeros++;
if (responseI[241483]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[471]=0;
	else	if (nzeros<nones) vnodeI[471]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[471];
 }
if (cwI[472]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[472]) nones=1; else nzeros=1; // count the original value
if (responseI[241670]) nones++;
else nzeros++;
if (responseI[241697]) nones++;
else nzeros++;
if (responseI[241774]) nones++;
else nzeros++;
if (responseI[241998]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[472]=0;
	else	if (nzeros<nones) vnodeI[472]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[472];
 }
if (cwI[473]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[473]) nones=1; else nzeros=1; // count the original value
if (responseI[242216]) nones++;
else nzeros++;
if (responseI[242220]) nones++;
else nzeros++;
if (responseI[242264]) nones++;
else nzeros++;
if (responseI[242381]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[473]=0;
	else	if (nzeros<nones) vnodeI[473]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[473];
 }
if (cwI[474]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[474]) nones=1; else nzeros=1; // count the original value
if (responseI[243028]) nones++;
else nzeros++;
if (responseI[243085]) nones++;
else nzeros++;
if (responseI[243097]) nones++;
else nzeros++;
if (responseI[243173]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[474]=0;
	else	if (nzeros<nones) vnodeI[474]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[474];
 }
if (cwI[475]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[475]) nones=1; else nzeros=1; // count the original value
if (responseI[243273]) nones++;
else nzeros++;
if (responseI[243621]) nones++;
else nzeros++;
if (responseI[243635]) nones++;
else nzeros++;
if (responseI[243694]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[475]=0;
	else	if (nzeros<nones) vnodeI[475]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[475];
 }
if (cwI[476]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[476]) nones=1; else nzeros=1; // count the original value
if (responseI[243801]) nones++;
else nzeros++;
if (responseI[243919]) nones++;
else nzeros++;
if (responseI[243988]) nones++;
else nzeros++;
if (responseI[244104]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[476]=0;
	else	if (nzeros<nones) vnodeI[476]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[476];
 }
if (cwI[477]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[477]) nones=1; else nzeros=1; // count the original value
if (responseI[244263]) nones++;
else nzeros++;
if (responseI[244399]) nones++;
else nzeros++;
if (responseI[244423]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[477]=0;
	else	if (nzeros<nones) vnodeI[477]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[477];
 }
if (cwI[478]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[478]) nones=1; else nzeros=1; // count the original value
if (responseI[244782]) nones++;
else nzeros++;
if (responseI[244865]) nones++;
else nzeros++;
if (responseI[244931]) nones++;
else nzeros++;
if (responseI[245031]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[478]=0;
	else	if (nzeros<nones) vnodeI[478]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[478];
 }
if (cwI[479]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[479]) nones=1; else nzeros=1; // count the original value
if (responseI[245337]) nones++;
else nzeros++;
if (responseI[245401]) nones++;
else nzeros++;
if (responseI[245417]) nones++;
else nzeros++;
if (responseI[245728]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[479]=0;
	else	if (nzeros<nones) vnodeI[479]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[479];
 }
if (cwI[480]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[480]) nones=1; else nzeros=1; // count the original value
if (responseI[245761]) nones++;
else nzeros++;
if (responseI[245772]) nones++;
else nzeros++;
if (responseI[245820]) nones++;
else nzeros++;
if (responseI[245944]) nones++;
else nzeros++;
if (responseI[246172]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[480]=0;
	else	if (nzeros<nones) vnodeI[480]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[480];
 }
if (cwI[481]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[481]) nones=1; else nzeros=1; // count the original value
if (responseI[246385]) nones++;
else nzeros++;
if (responseI[246462]) nones++;
else nzeros++;
if (responseI[246484]) nones++;
else nzeros++;
if (responseI[246619]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[481]=0;
	else	if (nzeros<nones) vnodeI[481]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[481];
 }
if (cwI[482]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[482]) nones=1; else nzeros=1; // count the original value
if (responseI[246784]) nones++;
else nzeros++;
if (responseI[246913]) nones++;
else nzeros++;
if (responseI[247211]) nones++;
else nzeros++;
if (responseI[247293]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[482]=0;
	else	if (nzeros<nones) vnodeI[482]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[482];
 }
if (cwI[483]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[483]) nones=1; else nzeros=1; // count the original value
if (responseI[247332]) nones++;
else nzeros++;
if (responseI[247402]) nones++;
else nzeros++;
if (responseI[247482]) nones++;
else nzeros++;
if (responseI[247487]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[483]=0;
	else	if (nzeros<nones) vnodeI[483]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[483];
 }
if (cwI[484]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[484]) nones=1; else nzeros=1; // count the original value
if (responseI[247855]) nones++;
else nzeros++;
if (responseI[247891]) nones++;
else nzeros++;
if (responseI[247957]) nones++;
else nzeros++;
if (responseI[248220]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[484]=0;
	else	if (nzeros<nones) vnodeI[484]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[484];
 }
if (cwI[485]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[485]) nones=1; else nzeros=1; // count the original value
if (responseI[248377]) nones++;
else nzeros++;
if (responseI[248470]) nones++;
else nzeros++;
if (responseI[248574]) nones++;
else nzeros++;
if (responseI[248697]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[485]=0;
	else	if (nzeros<nones) vnodeI[485]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[485];
 }
if (cwI[486]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[486]) nones=1; else nzeros=1; // count the original value
if (responseI[248863]) nones++;
else nzeros++;
if (responseI[248908]) nones++;
else nzeros++;
if (responseI[249018]) nones++;
else nzeros++;
if (responseI[249064]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[486]=0;
	else	if (nzeros<nones) vnodeI[486]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[486];
 }
if (cwI[487]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[487]) nones=1; else nzeros=1; // count the original value
if (responseI[249347]) nones++;
else nzeros++;
if (responseI[249365]) nones++;
else nzeros++;
if (responseI[249422]) nones++;
else nzeros++;
if (responseI[249824]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[487]=0;
	else	if (nzeros<nones) vnodeI[487]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[487];
 }
if (cwI[488]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[488]) nones=1; else nzeros=1; // count the original value
if (responseI[249873]) nones++;
else nzeros++;
if (responseI[249889]) nones++;
else nzeros++;
if (responseI[249935]) nones++;
else nzeros++;
if (responseI[250258]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[488]=0;
	else	if (nzeros<nones) vnodeI[488]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[488];
 }
if (cwI[489]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[489]) nones=1; else nzeros=1; // count the original value
if (responseI[250497]) nones++;
else nzeros++;
if (responseI[250589]) nones++;
else nzeros++;
if (responseI[250633]) nones++;
else nzeros++;
if (responseI[250819]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[489]=0;
	else	if (nzeros<nones) vnodeI[489]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[489];
 }
if (cwI[490]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[490]) nones=1; else nzeros=1; // count the original value
if (responseI[250916]) nones++;
else nzeros++;
if (responseI[250938]) nones++;
else nzeros++;
if (responseI[251150]) nones++;
else nzeros++;
if (responseI[251262]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[490]=0;
	else	if (nzeros<nones) vnodeI[490]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[490];
 }
if (cwI[491]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[491]) nones=1; else nzeros=1; // count the original value
if (responseI[251398]) nones++;
else nzeros++;
if (responseI[251406]) nones++;
else nzeros++;
if (responseI[251450]) nones++;
else nzeros++;
if (responseI[251502]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[491]=0;
	else	if (nzeros<nones) vnodeI[491]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[491];
 }
if (cwI[492]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[492]) nones=1; else nzeros=1; // count the original value
if (responseI[251944]) nones++;
else nzeros++;
if (responseI[252104]) nones++;
else nzeros++;
if (responseI[252141]) nones++;
else nzeros++;
if (responseI[252291]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[492]=0;
	else	if (nzeros<nones) vnodeI[492]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[492];
 }
if (cwI[493]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[493]) nones=1; else nzeros=1; // count the original value
if (responseI[252433]) nones++;
else nzeros++;
if (responseI[252441]) nones++;
else nzeros++;
if (responseI[252861]) nones++;
else nzeros++;
if (responseI[252874]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[493]=0;
	else	if (nzeros<nones) vnodeI[493]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[493];
 }
if (cwI[494]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[494]) nones=1; else nzeros=1; // count the original value
if (responseI[253088]) nones++;
else nzeros++;
if (responseI[253097]) nones++;
else nzeros++;
if (responseI[253302]) nones++;
else nzeros++;
if (responseI[253318]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[494]=0;
	else	if (nzeros<nones) vnodeI[494]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[494];
 }
if (cwI[495]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[495]) nones=1; else nzeros=1; // count the original value
if (responseI[253462]) nones++;
else nzeros++;
if (responseI[253518]) nones++;
else nzeros++;
if (responseI[253522]) nones++;
else nzeros++;
if (responseI[253665]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[495]=0;
	else	if (nzeros<nones) vnodeI[495]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[495];
 }
if (cwI[496]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[496]) nones=1; else nzeros=1; // count the original value
if (responseI[253952]) nones++;
else nzeros++;
if (responseI[253954]) nones++;
else nzeros++;
if (responseI[254000]) nones++;
else nzeros++;
if (responseI[254439]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[496]=0;
	else	if (nzeros<nones) vnodeI[496]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[496];
 }
if (cwI[497]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[497]) nones=1; else nzeros=1; // count the original value
if (responseI[254486]) nones++;
else nzeros++;
if (responseI[254630]) nones++;
else nzeros++;
if (responseI[254842]) nones++;
else nzeros++;
if (responseI[254943]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[497]=0;
	else	if (nzeros<nones) vnodeI[497]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[497];
 }
if (cwI[498]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[498]) nones=1; else nzeros=1; // count the original value
if (responseI[255011]) nones++;
else nzeros++;
if (responseI[255071]) nones++;
else nzeros++;
if (responseI[255133]) nones++;
else nzeros++;
if (responseI[255454]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[498]=0;
	else	if (nzeros<nones) vnodeI[498]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[498];
 }
if (cwI[499]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[499]) nones=1; else nzeros=1; // count the original value
if (responseI[255611]) nones++;
else nzeros++;
if (responseI[255616]) nones++;
else nzeros++;
if (responseI[255715]) nones++;
else nzeros++;
if (responseI[255725]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[499]=0;
	else	if (nzeros<nones) vnodeI[499]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[499];
 }
if (cwI[500]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[500]) nones=1; else nzeros=1; // count the original value
if (responseI[256039]) nones++;
else nzeros++;
if (responseI[256091]) nones++;
else nzeros++;
if (responseI[256254]) nones++;
else nzeros++;
if (responseI[256391]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[500]=0;
	else	if (nzeros<nones) vnodeI[500]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[500];
 }
if (cwI[501]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[501]) nones=1; else nzeros=1; // count the original value
if (responseI[256546]) nones++;
else nzeros++;
if (responseI[256558]) nones++;
else nzeros++;
if (responseI[256748]) nones++;
else nzeros++;
if (responseI[256931]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[501]=0;
	else	if (nzeros<nones) vnodeI[501]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[501];
 }
if (cwI[502]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[502]) nones=1; else nzeros=1; // count the original value
if (responseI[257110]) nones++;
else nzeros++;
if (responseI[257220]) nones++;
else nzeros++;
if (responseI[257293]) nones++;
else nzeros++;
if (responseI[257360]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[502]=0;
	else	if (nzeros<nones) vnodeI[502]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[502];
 }
if (cwI[503]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[503]) nones=1; else nzeros=1; // count the original value
if (responseI[257709]) nones++;
else nzeros++;
if (responseI[257938]) nones++;
else nzeros++;
if (responseI[257959]) nones++;
else nzeros++;
if (responseI[257966]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[503]=0;
	else	if (nzeros<nones) vnodeI[503]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[503];
 }
if (cwI[504]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[504]) nones=1; else nzeros=1; // count the original value
if (responseI[258100]) nones++;
else nzeros++;
if (responseI[258212]) nones++;
else nzeros++;
if (responseI[258321]) nones++;
else nzeros++;
if (responseI[258355]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[504]=0;
	else	if (nzeros<nones) vnodeI[504]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[504];
 }
if (cwI[505]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[505]) nones=1; else nzeros=1; // count the original value
if (responseI[258583]) nones++;
else nzeros++;
if (responseI[258699]) nones++;
else nzeros++;
if (responseI[258917]) nones++;
else nzeros++;
if (responseI[259021]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[505]=0;
	else	if (nzeros<nones) vnodeI[505]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[505];
 }
if (cwI[506]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[506]) nones=1; else nzeros=1; // count the original value
if (responseI[259123]) nones++;
else nzeros++;
if (responseI[259197]) nones++;
else nzeros++;
if (responseI[259286]) nones++;
else nzeros++;
if (responseI[259369]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[506]=0;
	else	if (nzeros<nones) vnodeI[506]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[506];
 }
if (cwI[507]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[507]) nones=1; else nzeros=1; // count the original value
if (responseI[259622]) nones++;
else nzeros++;
if (responseI[259807]) nones++;
else nzeros++;
if (responseI[259817]) nones++;
else nzeros++;
if (responseI[259944]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[507]=0;
	else	if (nzeros<nones) vnodeI[507]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[507];
 }
if (cwI[508]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[508]) nones=1; else nzeros=1; // count the original value
if (responseI[260177]) nones++;
else nzeros++;
if (responseI[260237]) nones++;
else nzeros++;
if (responseI[260354]) nones++;
else nzeros++;
if (responseI[260563]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[508]=0;
	else	if (nzeros<nones) vnodeI[508]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[508];
 }
if (cwI[509]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[509]) nones=1; else nzeros=1; // count the original value
if (responseI[260627]) nones++;
else nzeros++;
if (responseI[260633]) nones++;
else nzeros++;
if (responseI[260643]) nones++;
else nzeros++;
if (responseI[260815]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[509]=0;
	else	if (nzeros<nones) vnodeI[509]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[509];
 }
if (cwI[510]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[510]) nones=1; else nzeros=1; // count the original value
if (responseI[261186]) nones++;
else nzeros++;
if (responseI[261304]) nones++;
else nzeros++;
if (responseI[261342]) nones++;
else nzeros++;
if (responseI[261345]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[510]=0;
	else	if (nzeros<nones) vnodeI[510]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[510];
 }
if (cwI[511]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[511]) nones=1; else nzeros=1; // count the original value
if (responseI[261637]) nones++;
else nzeros++;
if (responseI[261682]) nones++;
else nzeros++;
if (responseI[261775]) nones++;
else nzeros++;
if (responseI[261814]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[511]=0;
	else	if (nzeros<nones) vnodeI[511]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[511];
 }
if (cwI[512]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[512]) nones=1; else nzeros=1; // count the original value
if (responseI[262144]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[512]=0;
	else	if (nzeros<nones) vnodeI[512]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[512];
 }
if (cwI[513]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[513]) nones=1; else nzeros=1; // count the original value
if (responseI[262657]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[513]=0;
	else	if (nzeros<nones) vnodeI[513]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[513];
 }
if (cwI[514]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[514]) nones=1; else nzeros=1; // count the original value
if (responseI[263170]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[514]=0;
	else	if (nzeros<nones) vnodeI[514]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[514];
 }
if (cwI[515]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[515]) nones=1; else nzeros=1; // count the original value
if (responseI[263683]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[515]=0;
	else	if (nzeros<nones) vnodeI[515]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[515];
 }
if (cwI[516]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[516]) nones=1; else nzeros=1; // count the original value
if (responseI[264196]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[516]=0;
	else	if (nzeros<nones) vnodeI[516]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[516];
 }
if (cwI[517]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[517]) nones=1; else nzeros=1; // count the original value
if (responseI[264709]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[517]=0;
	else	if (nzeros<nones) vnodeI[517]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[517];
 }
if (cwI[518]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[518]) nones=1; else nzeros=1; // count the original value
if (responseI[265222]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[518]=0;
	else	if (nzeros<nones) vnodeI[518]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[518];
 }
if (cwI[519]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[519]) nones=1; else nzeros=1; // count the original value
if (responseI[265735]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[519]=0;
	else	if (nzeros<nones) vnodeI[519]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[519];
 }
if (cwI[520]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[520]) nones=1; else nzeros=1; // count the original value
if (responseI[266248]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[520]=0;
	else	if (nzeros<nones) vnodeI[520]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[520];
 }
if (cwI[521]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[521]) nones=1; else nzeros=1; // count the original value
if (responseI[266761]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[521]=0;
	else	if (nzeros<nones) vnodeI[521]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[521];
 }
if (cwI[522]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[522]) nones=1; else nzeros=1; // count the original value
if (responseI[267274]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[522]=0;
	else	if (nzeros<nones) vnodeI[522]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[522];
 }
if (cwI[523]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[523]) nones=1; else nzeros=1; // count the original value
if (responseI[267787]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[523]=0;
	else	if (nzeros<nones) vnodeI[523]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[523];
 }
if (cwI[524]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[524]) nones=1; else nzeros=1; // count the original value
if (responseI[268300]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[524]=0;
	else	if (nzeros<nones) vnodeI[524]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[524];
 }
if (cwI[525]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[525]) nones=1; else nzeros=1; // count the original value
if (responseI[268813]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[525]=0;
	else	if (nzeros<nones) vnodeI[525]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[525];
 }
if (cwI[526]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[526]) nones=1; else nzeros=1; // count the original value
if (responseI[269326]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[526]=0;
	else	if (nzeros<nones) vnodeI[526]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[526];
 }
if (cwI[527]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[527]) nones=1; else nzeros=1; // count the original value
if (responseI[269839]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[527]=0;
	else	if (nzeros<nones) vnodeI[527]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[527];
 }
if (cwI[528]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[528]) nones=1; else nzeros=1; // count the original value
if (responseI[270352]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[528]=0;
	else	if (nzeros<nones) vnodeI[528]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[528];
 }
if (cwI[529]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[529]) nones=1; else nzeros=1; // count the original value
if (responseI[270865]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[529]=0;
	else	if (nzeros<nones) vnodeI[529]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[529];
 }
if (cwI[530]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[530]) nones=1; else nzeros=1; // count the original value
if (responseI[271378]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[530]=0;
	else	if (nzeros<nones) vnodeI[530]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[530];
 }
if (cwI[531]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[531]) nones=1; else nzeros=1; // count the original value
if (responseI[271891]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[531]=0;
	else	if (nzeros<nones) vnodeI[531]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[531];
 }
if (cwI[532]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[532]) nones=1; else nzeros=1; // count the original value
if (responseI[272404]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[532]=0;
	else	if (nzeros<nones) vnodeI[532]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[532];
 }
if (cwI[533]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[533]) nones=1; else nzeros=1; // count the original value
if (responseI[272917]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[533]=0;
	else	if (nzeros<nones) vnodeI[533]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[533];
 }
if (cwI[534]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[534]) nones=1; else nzeros=1; // count the original value
if (responseI[273430]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[534]=0;
	else	if (nzeros<nones) vnodeI[534]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[534];
 }
if (cwI[535]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[535]) nones=1; else nzeros=1; // count the original value
if (responseI[273943]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[535]=0;
	else	if (nzeros<nones) vnodeI[535]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[535];
 }
if (cwI[536]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[536]) nones=1; else nzeros=1; // count the original value
if (responseI[274456]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[536]=0;
	else	if (nzeros<nones) vnodeI[536]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[536];
 }
if (cwI[537]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[537]) nones=1; else nzeros=1; // count the original value
if (responseI[274969]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[537]=0;
	else	if (nzeros<nones) vnodeI[537]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[537];
 }
if (cwI[538]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[538]) nones=1; else nzeros=1; // count the original value
if (responseI[275482]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[538]=0;
	else	if (nzeros<nones) vnodeI[538]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[538];
 }
if (cwI[539]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[539]) nones=1; else nzeros=1; // count the original value
if (responseI[275995]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[539]=0;
	else	if (nzeros<nones) vnodeI[539]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[539];
 }
if (cwI[540]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[540]) nones=1; else nzeros=1; // count the original value
if (responseI[276508]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[540]=0;
	else	if (nzeros<nones) vnodeI[540]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[540];
 }
if (cwI[541]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[541]) nones=1; else nzeros=1; // count the original value
if (responseI[277021]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[541]=0;
	else	if (nzeros<nones) vnodeI[541]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[541];
 }
if (cwI[542]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[542]) nones=1; else nzeros=1; // count the original value
if (responseI[277534]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[542]=0;
	else	if (nzeros<nones) vnodeI[542]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[542];
 }
if (cwI[543]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[543]) nones=1; else nzeros=1; // count the original value
if (responseI[278047]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[543]=0;
	else	if (nzeros<nones) vnodeI[543]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[543];
 }
if (cwI[544]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[544]) nones=1; else nzeros=1; // count the original value
if (responseI[278560]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[544]=0;
	else	if (nzeros<nones) vnodeI[544]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[544];
 }
if (cwI[545]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[545]) nones=1; else nzeros=1; // count the original value
if (responseI[279073]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[545]=0;
	else	if (nzeros<nones) vnodeI[545]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[545];
 }
if (cwI[546]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[546]) nones=1; else nzeros=1; // count the original value
if (responseI[279586]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[546]=0;
	else	if (nzeros<nones) vnodeI[546]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[546];
 }
if (cwI[547]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[547]) nones=1; else nzeros=1; // count the original value
if (responseI[280099]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[547]=0;
	else	if (nzeros<nones) vnodeI[547]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[547];
 }
if (cwI[548]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[548]) nones=1; else nzeros=1; // count the original value
if (responseI[280612]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[548]=0;
	else	if (nzeros<nones) vnodeI[548]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[548];
 }
if (cwI[549]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[549]) nones=1; else nzeros=1; // count the original value
if (responseI[281125]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[549]=0;
	else	if (nzeros<nones) vnodeI[549]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[549];
 }
if (cwI[550]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[550]) nones=1; else nzeros=1; // count the original value
if (responseI[281638]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[550]=0;
	else	if (nzeros<nones) vnodeI[550]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[550];
 }
if (cwI[551]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[551]) nones=1; else nzeros=1; // count the original value
if (responseI[282151]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[551]=0;
	else	if (nzeros<nones) vnodeI[551]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[551];
 }
if (cwI[552]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[552]) nones=1; else nzeros=1; // count the original value
if (responseI[282664]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[552]=0;
	else	if (nzeros<nones) vnodeI[552]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[552];
 }
if (cwI[553]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[553]) nones=1; else nzeros=1; // count the original value
if (responseI[283177]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[553]=0;
	else	if (nzeros<nones) vnodeI[553]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[553];
 }
if (cwI[554]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[554]) nones=1; else nzeros=1; // count the original value
if (responseI[283690]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[554]=0;
	else	if (nzeros<nones) vnodeI[554]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[554];
 }
if (cwI[555]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[555]) nones=1; else nzeros=1; // count the original value
if (responseI[284203]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[555]=0;
	else	if (nzeros<nones) vnodeI[555]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[555];
 }
if (cwI[556]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[556]) nones=1; else nzeros=1; // count the original value
if (responseI[284716]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[556]=0;
	else	if (nzeros<nones) vnodeI[556]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[556];
 }
if (cwI[557]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[557]) nones=1; else nzeros=1; // count the original value
if (responseI[285229]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[557]=0;
	else	if (nzeros<nones) vnodeI[557]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[557];
 }
if (cwI[558]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[558]) nones=1; else nzeros=1; // count the original value
if (responseI[285742]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[558]=0;
	else	if (nzeros<nones) vnodeI[558]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[558];
 }
if (cwI[559]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[559]) nones=1; else nzeros=1; // count the original value
if (responseI[286255]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[559]=0;
	else	if (nzeros<nones) vnodeI[559]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[559];
 }
if (cwI[560]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[560]) nones=1; else nzeros=1; // count the original value
if (responseI[286768]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[560]=0;
	else	if (nzeros<nones) vnodeI[560]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[560];
 }
if (cwI[561]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[561]) nones=1; else nzeros=1; // count the original value
if (responseI[287281]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[561]=0;
	else	if (nzeros<nones) vnodeI[561]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[561];
 }
if (cwI[562]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[562]) nones=1; else nzeros=1; // count the original value
if (responseI[287794]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[562]=0;
	else	if (nzeros<nones) vnodeI[562]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[562];
 }
if (cwI[563]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[563]) nones=1; else nzeros=1; // count the original value
if (responseI[288307]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[563]=0;
	else	if (nzeros<nones) vnodeI[563]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[563];
 }
if (cwI[564]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[564]) nones=1; else nzeros=1; // count the original value
if (responseI[288820]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[564]=0;
	else	if (nzeros<nones) vnodeI[564]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[564];
 }
if (cwI[565]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[565]) nones=1; else nzeros=1; // count the original value
if (responseI[289333]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[565]=0;
	else	if (nzeros<nones) vnodeI[565]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[565];
 }
if (cwI[566]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[566]) nones=1; else nzeros=1; // count the original value
if (responseI[289846]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[566]=0;
	else	if (nzeros<nones) vnodeI[566]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[566];
 }
if (cwI[567]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[567]) nones=1; else nzeros=1; // count the original value
if (responseI[290359]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[567]=0;
	else	if (nzeros<nones) vnodeI[567]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[567];
 }
if (cwI[568]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[568]) nones=1; else nzeros=1; // count the original value
if (responseI[290872]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[568]=0;
	else	if (nzeros<nones) vnodeI[568]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[568];
 }
if (cwI[569]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[569]) nones=1; else nzeros=1; // count the original value
if (responseI[291385]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[569]=0;
	else	if (nzeros<nones) vnodeI[569]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[569];
 }
if (cwI[570]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[570]) nones=1; else nzeros=1; // count the original value
if (responseI[291898]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[570]=0;
	else	if (nzeros<nones) vnodeI[570]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[570];
 }
if (cwI[571]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[571]) nones=1; else nzeros=1; // count the original value
if (responseI[292411]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[571]=0;
	else	if (nzeros<nones) vnodeI[571]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[571];
 }
if (cwI[572]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[572]) nones=1; else nzeros=1; // count the original value
if (responseI[292924]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[572]=0;
	else	if (nzeros<nones) vnodeI[572]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[572];
 }
if (cwI[573]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[573]) nones=1; else nzeros=1; // count the original value
if (responseI[293437]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[573]=0;
	else	if (nzeros<nones) vnodeI[573]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[573];
 }
if (cwI[574]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[574]) nones=1; else nzeros=1; // count the original value
if (responseI[293950]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[574]=0;
	else	if (nzeros<nones) vnodeI[574]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[574];
 }
if (cwI[575]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[575]) nones=1; else nzeros=1; // count the original value
if (responseI[294463]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[575]=0;
	else	if (nzeros<nones) vnodeI[575]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[575];
 }
if (cwI[576]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[576]) nones=1; else nzeros=1; // count the original value
if (responseI[294976]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[576]=0;
	else	if (nzeros<nones) vnodeI[576]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[576];
 }
if (cwI[577]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[577]) nones=1; else nzeros=1; // count the original value
if (responseI[295489]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[577]=0;
	else	if (nzeros<nones) vnodeI[577]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[577];
 }
if (cwI[578]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[578]) nones=1; else nzeros=1; // count the original value
if (responseI[296002]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[578]=0;
	else	if (nzeros<nones) vnodeI[578]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[578];
 }
if (cwI[579]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[579]) nones=1; else nzeros=1; // count the original value
if (responseI[296515]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[579]=0;
	else	if (nzeros<nones) vnodeI[579]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[579];
 }
if (cwI[580]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[580]) nones=1; else nzeros=1; // count the original value
if (responseI[297028]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[580]=0;
	else	if (nzeros<nones) vnodeI[580]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[580];
 }
if (cwI[581]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[581]) nones=1; else nzeros=1; // count the original value
if (responseI[297541]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[581]=0;
	else	if (nzeros<nones) vnodeI[581]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[581];
 }
if (cwI[582]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[582]) nones=1; else nzeros=1; // count the original value
if (responseI[298054]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[582]=0;
	else	if (nzeros<nones) vnodeI[582]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[582];
 }
if (cwI[583]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[583]) nones=1; else nzeros=1; // count the original value
if (responseI[298567]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[583]=0;
	else	if (nzeros<nones) vnodeI[583]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[583];
 }
if (cwI[584]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[584]) nones=1; else nzeros=1; // count the original value
if (responseI[299080]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[584]=0;
	else	if (nzeros<nones) vnodeI[584]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[584];
 }
if (cwI[585]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[585]) nones=1; else nzeros=1; // count the original value
if (responseI[299593]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[585]=0;
	else	if (nzeros<nones) vnodeI[585]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[585];
 }
if (cwI[586]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[586]) nones=1; else nzeros=1; // count the original value
if (responseI[300106]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[586]=0;
	else	if (nzeros<nones) vnodeI[586]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[586];
 }
if (cwI[587]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[587]) nones=1; else nzeros=1; // count the original value
if (responseI[300619]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[587]=0;
	else	if (nzeros<nones) vnodeI[587]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[587];
 }
if (cwI[588]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[588]) nones=1; else nzeros=1; // count the original value
if (responseI[301132]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[588]=0;
	else	if (nzeros<nones) vnodeI[588]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[588];
 }
if (cwI[589]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[589]) nones=1; else nzeros=1; // count the original value
if (responseI[301645]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[589]=0;
	else	if (nzeros<nones) vnodeI[589]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[589];
 }
if (cwI[590]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[590]) nones=1; else nzeros=1; // count the original value
if (responseI[302158]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[590]=0;
	else	if (nzeros<nones) vnodeI[590]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[590];
 }
if (cwI[591]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[591]) nones=1; else nzeros=1; // count the original value
if (responseI[302671]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[591]=0;
	else	if (nzeros<nones) vnodeI[591]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[591];
 }
if (cwI[592]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[592]) nones=1; else nzeros=1; // count the original value
if (responseI[303184]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[592]=0;
	else	if (nzeros<nones) vnodeI[592]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[592];
 }
if (cwI[593]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[593]) nones=1; else nzeros=1; // count the original value
if (responseI[303697]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[593]=0;
	else	if (nzeros<nones) vnodeI[593]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[593];
 }
if (cwI[594]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[594]) nones=1; else nzeros=1; // count the original value
if (responseI[304210]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[594]=0;
	else	if (nzeros<nones) vnodeI[594]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[594];
 }
if (cwI[595]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[595]) nones=1; else nzeros=1; // count the original value
if (responseI[304723]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[595]=0;
	else	if (nzeros<nones) vnodeI[595]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[595];
 }
if (cwI[596]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[596]) nones=1; else nzeros=1; // count the original value
if (responseI[305236]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[596]=0;
	else	if (nzeros<nones) vnodeI[596]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[596];
 }
if (cwI[597]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[597]) nones=1; else nzeros=1; // count the original value
if (responseI[305749]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[597]=0;
	else	if (nzeros<nones) vnodeI[597]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[597];
 }
if (cwI[598]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[598]) nones=1; else nzeros=1; // count the original value
if (responseI[306262]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[598]=0;
	else	if (nzeros<nones) vnodeI[598]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[598];
 }
if (cwI[599]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[599]) nones=1; else nzeros=1; // count the original value
if (responseI[306775]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[599]=0;
	else	if (nzeros<nones) vnodeI[599]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[599];
 }
if (cwI[600]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[600]) nones=1; else nzeros=1; // count the original value
if (responseI[307288]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[600]=0;
	else	if (nzeros<nones) vnodeI[600]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[600];
 }
if (cwI[601]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[601]) nones=1; else nzeros=1; // count the original value
if (responseI[307801]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[601]=0;
	else	if (nzeros<nones) vnodeI[601]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[601];
 }
if (cwI[602]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[602]) nones=1; else nzeros=1; // count the original value
if (responseI[308314]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[602]=0;
	else	if (nzeros<nones) vnodeI[602]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[602];
 }
if (cwI[603]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[603]) nones=1; else nzeros=1; // count the original value
if (responseI[308827]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[603]=0;
	else	if (nzeros<nones) vnodeI[603]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[603];
 }
if (cwI[604]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[604]) nones=1; else nzeros=1; // count the original value
if (responseI[309340]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[604]=0;
	else	if (nzeros<nones) vnodeI[604]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[604];
 }
if (cwI[605]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[605]) nones=1; else nzeros=1; // count the original value
if (responseI[309853]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[605]=0;
	else	if (nzeros<nones) vnodeI[605]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[605];
 }
if (cwI[606]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[606]) nones=1; else nzeros=1; // count the original value
if (responseI[310366]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[606]=0;
	else	if (nzeros<nones) vnodeI[606]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[606];
 }
if (cwI[607]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[607]) nones=1; else nzeros=1; // count the original value
if (responseI[310879]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[607]=0;
	else	if (nzeros<nones) vnodeI[607]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[607];
 }
if (cwI[608]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[608]) nones=1; else nzeros=1; // count the original value
if (responseI[311392]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[608]=0;
	else	if (nzeros<nones) vnodeI[608]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[608];
 }
if (cwI[609]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[609]) nones=1; else nzeros=1; // count the original value
if (responseI[311905]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[609]=0;
	else	if (nzeros<nones) vnodeI[609]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[609];
 }
if (cwI[610]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[610]) nones=1; else nzeros=1; // count the original value
if (responseI[312418]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[610]=0;
	else	if (nzeros<nones) vnodeI[610]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[610];
 }
if (cwI[611]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[611]) nones=1; else nzeros=1; // count the original value
if (responseI[312931]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[611]=0;
	else	if (nzeros<nones) vnodeI[611]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[611];
 }
if (cwI[612]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[612]) nones=1; else nzeros=1; // count the original value
if (responseI[313444]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[612]=0;
	else	if (nzeros<nones) vnodeI[612]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[612];
 }
if (cwI[613]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[613]) nones=1; else nzeros=1; // count the original value
if (responseI[313957]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[613]=0;
	else	if (nzeros<nones) vnodeI[613]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[613];
 }
if (cwI[614]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[614]) nones=1; else nzeros=1; // count the original value
if (responseI[314470]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[614]=0;
	else	if (nzeros<nones) vnodeI[614]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[614];
 }
if (cwI[615]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[615]) nones=1; else nzeros=1; // count the original value
if (responseI[314983]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[615]=0;
	else	if (nzeros<nones) vnodeI[615]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[615];
 }
if (cwI[616]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[616]) nones=1; else nzeros=1; // count the original value
if (responseI[315496]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[616]=0;
	else	if (nzeros<nones) vnodeI[616]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[616];
 }
if (cwI[617]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[617]) nones=1; else nzeros=1; // count the original value
if (responseI[316009]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[617]=0;
	else	if (nzeros<nones) vnodeI[617]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[617];
 }
if (cwI[618]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[618]) nones=1; else nzeros=1; // count the original value
if (responseI[316522]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[618]=0;
	else	if (nzeros<nones) vnodeI[618]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[618];
 }
if (cwI[619]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[619]) nones=1; else nzeros=1; // count the original value
if (responseI[317035]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[619]=0;
	else	if (nzeros<nones) vnodeI[619]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[619];
 }
if (cwI[620]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[620]) nones=1; else nzeros=1; // count the original value
if (responseI[317548]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[620]=0;
	else	if (nzeros<nones) vnodeI[620]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[620];
 }
if (cwI[621]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[621]) nones=1; else nzeros=1; // count the original value
if (responseI[318061]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[621]=0;
	else	if (nzeros<nones) vnodeI[621]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[621];
 }
if (cwI[622]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[622]) nones=1; else nzeros=1; // count the original value
if (responseI[318574]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[622]=0;
	else	if (nzeros<nones) vnodeI[622]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[622];
 }
if (cwI[623]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[623]) nones=1; else nzeros=1; // count the original value
if (responseI[319087]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[623]=0;
	else	if (nzeros<nones) vnodeI[623]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[623];
 }
if (cwI[624]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[624]) nones=1; else nzeros=1; // count the original value
if (responseI[319600]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[624]=0;
	else	if (nzeros<nones) vnodeI[624]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[624];
 }
if (cwI[625]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[625]) nones=1; else nzeros=1; // count the original value
if (responseI[320113]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[625]=0;
	else	if (nzeros<nones) vnodeI[625]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[625];
 }
if (cwI[626]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[626]) nones=1; else nzeros=1; // count the original value
if (responseI[320626]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[626]=0;
	else	if (nzeros<nones) vnodeI[626]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[626];
 }
if (cwI[627]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[627]) nones=1; else nzeros=1; // count the original value
if (responseI[321139]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[627]=0;
	else	if (nzeros<nones) vnodeI[627]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[627];
 }
if (cwI[628]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[628]) nones=1; else nzeros=1; // count the original value
if (responseI[321652]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[628]=0;
	else	if (nzeros<nones) vnodeI[628]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[628];
 }
if (cwI[629]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[629]) nones=1; else nzeros=1; // count the original value
if (responseI[322165]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[629]=0;
	else	if (nzeros<nones) vnodeI[629]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[629];
 }
if (cwI[630]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[630]) nones=1; else nzeros=1; // count the original value
if (responseI[322678]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[630]=0;
	else	if (nzeros<nones) vnodeI[630]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[630];
 }
if (cwI[631]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[631]) nones=1; else nzeros=1; // count the original value
if (responseI[323191]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[631]=0;
	else	if (nzeros<nones) vnodeI[631]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[631];
 }
if (cwI[632]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[632]) nones=1; else nzeros=1; // count the original value
if (responseI[323704]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[632]=0;
	else	if (nzeros<nones) vnodeI[632]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[632];
 }
if (cwI[633]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[633]) nones=1; else nzeros=1; // count the original value
if (responseI[324217]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[633]=0;
	else	if (nzeros<nones) vnodeI[633]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[633];
 }
if (cwI[634]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[634]) nones=1; else nzeros=1; // count the original value
if (responseI[324730]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[634]=0;
	else	if (nzeros<nones) vnodeI[634]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[634];
 }
if (cwI[635]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[635]) nones=1; else nzeros=1; // count the original value
if (responseI[325243]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[635]=0;
	else	if (nzeros<nones) vnodeI[635]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[635];
 }
if (cwI[636]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[636]) nones=1; else nzeros=1; // count the original value
if (responseI[325756]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[636]=0;
	else	if (nzeros<nones) vnodeI[636]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[636];
 }
if (cwI[637]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[637]) nones=1; else nzeros=1; // count the original value
if (responseI[326269]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[637]=0;
	else	if (nzeros<nones) vnodeI[637]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[637];
 }
if (cwI[638]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[638]) nones=1; else nzeros=1; // count the original value
if (responseI[326782]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[638]=0;
	else	if (nzeros<nones) vnodeI[638]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[638];
 }
if (cwI[639]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[639]) nones=1; else nzeros=1; // count the original value
if (responseI[327295]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[639]=0;
	else	if (nzeros<nones) vnodeI[639]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[639];
 }
if (cwI[640]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[640]) nones=1; else nzeros=1; // count the original value
if (responseI[327808]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[640]=0;
	else	if (nzeros<nones) vnodeI[640]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[640];
 }
if (cwI[641]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[641]) nones=1; else nzeros=1; // count the original value
if (responseI[328321]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[641]=0;
	else	if (nzeros<nones) vnodeI[641]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[641];
 }
if (cwI[642]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[642]) nones=1; else nzeros=1; // count the original value
if (responseI[328834]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[642]=0;
	else	if (nzeros<nones) vnodeI[642]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[642];
 }
if (cwI[643]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[643]) nones=1; else nzeros=1; // count the original value
if (responseI[329347]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[643]=0;
	else	if (nzeros<nones) vnodeI[643]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[643];
 }
if (cwI[644]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[644]) nones=1; else nzeros=1; // count the original value
if (responseI[329860]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[644]=0;
	else	if (nzeros<nones) vnodeI[644]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[644];
 }
if (cwI[645]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[645]) nones=1; else nzeros=1; // count the original value
if (responseI[330373]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[645]=0;
	else	if (nzeros<nones) vnodeI[645]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[645];
 }
if (cwI[646]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[646]) nones=1; else nzeros=1; // count the original value
if (responseI[330886]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[646]=0;
	else	if (nzeros<nones) vnodeI[646]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[646];
 }
if (cwI[647]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[647]) nones=1; else nzeros=1; // count the original value
if (responseI[331399]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[647]=0;
	else	if (nzeros<nones) vnodeI[647]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[647];
 }
if (cwI[648]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[648]) nones=1; else nzeros=1; // count the original value
if (responseI[331912]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[648]=0;
	else	if (nzeros<nones) vnodeI[648]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[648];
 }
if (cwI[649]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[649]) nones=1; else nzeros=1; // count the original value
if (responseI[332425]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[649]=0;
	else	if (nzeros<nones) vnodeI[649]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[649];
 }
if (cwI[650]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[650]) nones=1; else nzeros=1; // count the original value
if (responseI[332938]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[650]=0;
	else	if (nzeros<nones) vnodeI[650]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[650];
 }
if (cwI[651]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[651]) nones=1; else nzeros=1; // count the original value
if (responseI[333451]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[651]=0;
	else	if (nzeros<nones) vnodeI[651]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[651];
 }
if (cwI[652]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[652]) nones=1; else nzeros=1; // count the original value
if (responseI[333964]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[652]=0;
	else	if (nzeros<nones) vnodeI[652]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[652];
 }
if (cwI[653]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[653]) nones=1; else nzeros=1; // count the original value
if (responseI[334477]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[653]=0;
	else	if (nzeros<nones) vnodeI[653]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[653];
 }
if (cwI[654]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[654]) nones=1; else nzeros=1; // count the original value
if (responseI[334990]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[654]=0;
	else	if (nzeros<nones) vnodeI[654]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[654];
 }
if (cwI[655]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[655]) nones=1; else nzeros=1; // count the original value
if (responseI[335503]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[655]=0;
	else	if (nzeros<nones) vnodeI[655]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[655];
 }
if (cwI[656]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[656]) nones=1; else nzeros=1; // count the original value
if (responseI[336016]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[656]=0;
	else	if (nzeros<nones) vnodeI[656]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[656];
 }
if (cwI[657]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[657]) nones=1; else nzeros=1; // count the original value
if (responseI[336529]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[657]=0;
	else	if (nzeros<nones) vnodeI[657]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[657];
 }
if (cwI[658]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[658]) nones=1; else nzeros=1; // count the original value
if (responseI[337042]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[658]=0;
	else	if (nzeros<nones) vnodeI[658]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[658];
 }
if (cwI[659]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[659]) nones=1; else nzeros=1; // count the original value
if (responseI[337555]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[659]=0;
	else	if (nzeros<nones) vnodeI[659]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[659];
 }
if (cwI[660]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[660]) nones=1; else nzeros=1; // count the original value
if (responseI[338068]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[660]=0;
	else	if (nzeros<nones) vnodeI[660]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[660];
 }
if (cwI[661]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[661]) nones=1; else nzeros=1; // count the original value
if (responseI[338581]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[661]=0;
	else	if (nzeros<nones) vnodeI[661]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[661];
 }
if (cwI[662]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[662]) nones=1; else nzeros=1; // count the original value
if (responseI[339094]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[662]=0;
	else	if (nzeros<nones) vnodeI[662]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[662];
 }
if (cwI[663]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[663]) nones=1; else nzeros=1; // count the original value
if (responseI[339607]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[663]=0;
	else	if (nzeros<nones) vnodeI[663]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[663];
 }
if (cwI[664]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[664]) nones=1; else nzeros=1; // count the original value
if (responseI[340120]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[664]=0;
	else	if (nzeros<nones) vnodeI[664]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[664];
 }
if (cwI[665]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[665]) nones=1; else nzeros=1; // count the original value
if (responseI[340633]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[665]=0;
	else	if (nzeros<nones) vnodeI[665]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[665];
 }
if (cwI[666]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[666]) nones=1; else nzeros=1; // count the original value
if (responseI[341146]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[666]=0;
	else	if (nzeros<nones) vnodeI[666]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[666];
 }
if (cwI[667]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[667]) nones=1; else nzeros=1; // count the original value
if (responseI[341659]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[667]=0;
	else	if (nzeros<nones) vnodeI[667]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[667];
 }
if (cwI[668]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[668]) nones=1; else nzeros=1; // count the original value
if (responseI[342172]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[668]=0;
	else	if (nzeros<nones) vnodeI[668]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[668];
 }
if (cwI[669]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[669]) nones=1; else nzeros=1; // count the original value
if (responseI[342685]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[669]=0;
	else	if (nzeros<nones) vnodeI[669]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[669];
 }
if (cwI[670]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[670]) nones=1; else nzeros=1; // count the original value
if (responseI[343198]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[670]=0;
	else	if (nzeros<nones) vnodeI[670]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[670];
 }
if (cwI[671]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[671]) nones=1; else nzeros=1; // count the original value
if (responseI[343711]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[671]=0;
	else	if (nzeros<nones) vnodeI[671]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[671];
 }
if (cwI[672]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[672]) nones=1; else nzeros=1; // count the original value
if (responseI[344224]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[672]=0;
	else	if (nzeros<nones) vnodeI[672]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[672];
 }
if (cwI[673]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[673]) nones=1; else nzeros=1; // count the original value
if (responseI[344737]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[673]=0;
	else	if (nzeros<nones) vnodeI[673]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[673];
 }
if (cwI[674]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[674]) nones=1; else nzeros=1; // count the original value
if (responseI[345250]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[674]=0;
	else	if (nzeros<nones) vnodeI[674]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[674];
 }
if (cwI[675]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[675]) nones=1; else nzeros=1; // count the original value
if (responseI[345763]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[675]=0;
	else	if (nzeros<nones) vnodeI[675]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[675];
 }
if (cwI[676]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[676]) nones=1; else nzeros=1; // count the original value
if (responseI[346276]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[676]=0;
	else	if (nzeros<nones) vnodeI[676]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[676];
 }
if (cwI[677]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[677]) nones=1; else nzeros=1; // count the original value
if (responseI[346789]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[677]=0;
	else	if (nzeros<nones) vnodeI[677]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[677];
 }
if (cwI[678]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[678]) nones=1; else nzeros=1; // count the original value
if (responseI[347302]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[678]=0;
	else	if (nzeros<nones) vnodeI[678]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[678];
 }
if (cwI[679]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[679]) nones=1; else nzeros=1; // count the original value
if (responseI[347815]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[679]=0;
	else	if (nzeros<nones) vnodeI[679]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[679];
 }
if (cwI[680]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[680]) nones=1; else nzeros=1; // count the original value
if (responseI[348328]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[680]=0;
	else	if (nzeros<nones) vnodeI[680]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[680];
 }
if (cwI[681]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[681]) nones=1; else nzeros=1; // count the original value
if (responseI[348841]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[681]=0;
	else	if (nzeros<nones) vnodeI[681]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[681];
 }
if (cwI[682]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[682]) nones=1; else nzeros=1; // count the original value
if (responseI[349354]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[682]=0;
	else	if (nzeros<nones) vnodeI[682]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[682];
 }
if (cwI[683]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[683]) nones=1; else nzeros=1; // count the original value
if (responseI[349867]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[683]=0;
	else	if (nzeros<nones) vnodeI[683]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[683];
 }
if (cwI[684]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[684]) nones=1; else nzeros=1; // count the original value
if (responseI[350380]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[684]=0;
	else	if (nzeros<nones) vnodeI[684]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[684];
 }
if (cwI[685]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[685]) nones=1; else nzeros=1; // count the original value
if (responseI[350893]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[685]=0;
	else	if (nzeros<nones) vnodeI[685]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[685];
 }
if (cwI[686]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[686]) nones=1; else nzeros=1; // count the original value
if (responseI[351406]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[686]=0;
	else	if (nzeros<nones) vnodeI[686]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[686];
 }
if (cwI[687]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[687]) nones=1; else nzeros=1; // count the original value
if (responseI[351919]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[687]=0;
	else	if (nzeros<nones) vnodeI[687]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[687];
 }
if (cwI[688]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[688]) nones=1; else nzeros=1; // count the original value
if (responseI[352432]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[688]=0;
	else	if (nzeros<nones) vnodeI[688]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[688];
 }
if (cwI[689]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[689]) nones=1; else nzeros=1; // count the original value
if (responseI[352945]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[689]=0;
	else	if (nzeros<nones) vnodeI[689]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[689];
 }
if (cwI[690]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[690]) nones=1; else nzeros=1; // count the original value
if (responseI[353458]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[690]=0;
	else	if (nzeros<nones) vnodeI[690]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[690];
 }
if (cwI[691]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[691]) nones=1; else nzeros=1; // count the original value
if (responseI[353971]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[691]=0;
	else	if (nzeros<nones) vnodeI[691]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[691];
 }
if (cwI[692]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[692]) nones=1; else nzeros=1; // count the original value
if (responseI[354484]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[692]=0;
	else	if (nzeros<nones) vnodeI[692]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[692];
 }
if (cwI[693]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[693]) nones=1; else nzeros=1; // count the original value
if (responseI[354997]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[693]=0;
	else	if (nzeros<nones) vnodeI[693]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[693];
 }
if (cwI[694]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[694]) nones=1; else nzeros=1; // count the original value
if (responseI[355510]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[694]=0;
	else	if (nzeros<nones) vnodeI[694]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[694];
 }
if (cwI[695]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[695]) nones=1; else nzeros=1; // count the original value
if (responseI[356023]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[695]=0;
	else	if (nzeros<nones) vnodeI[695]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[695];
 }
if (cwI[696]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[696]) nones=1; else nzeros=1; // count the original value
if (responseI[356536]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[696]=0;
	else	if (nzeros<nones) vnodeI[696]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[696];
 }
if (cwI[697]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[697]) nones=1; else nzeros=1; // count the original value
if (responseI[357049]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[697]=0;
	else	if (nzeros<nones) vnodeI[697]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[697];
 }
if (cwI[698]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[698]) nones=1; else nzeros=1; // count the original value
if (responseI[357562]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[698]=0;
	else	if (nzeros<nones) vnodeI[698]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[698];
 }
if (cwI[699]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[699]) nones=1; else nzeros=1; // count the original value
if (responseI[358075]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[699]=0;
	else	if (nzeros<nones) vnodeI[699]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[699];
 }
if (cwI[700]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[700]) nones=1; else nzeros=1; // count the original value
if (responseI[358588]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[700]=0;
	else	if (nzeros<nones) vnodeI[700]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[700];
 }
if (cwI[701]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[701]) nones=1; else nzeros=1; // count the original value
if (responseI[359101]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[701]=0;
	else	if (nzeros<nones) vnodeI[701]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[701];
 }
if (cwI[702]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[702]) nones=1; else nzeros=1; // count the original value
if (responseI[359614]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[702]=0;
	else	if (nzeros<nones) vnodeI[702]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[702];
 }
if (cwI[703]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[703]) nones=1; else nzeros=1; // count the original value
if (responseI[360127]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[703]=0;
	else	if (nzeros<nones) vnodeI[703]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[703];
 }
if (cwI[704]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[704]) nones=1; else nzeros=1; // count the original value
if (responseI[360640]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[704]=0;
	else	if (nzeros<nones) vnodeI[704]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[704];
 }
if (cwI[705]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[705]) nones=1; else nzeros=1; // count the original value
if (responseI[361153]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[705]=0;
	else	if (nzeros<nones) vnodeI[705]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[705];
 }
if (cwI[706]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[706]) nones=1; else nzeros=1; // count the original value
if (responseI[361666]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[706]=0;
	else	if (nzeros<nones) vnodeI[706]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[706];
 }
if (cwI[707]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[707]) nones=1; else nzeros=1; // count the original value
if (responseI[362179]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[707]=0;
	else	if (nzeros<nones) vnodeI[707]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[707];
 }
if (cwI[708]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[708]) nones=1; else nzeros=1; // count the original value
if (responseI[362692]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[708]=0;
	else	if (nzeros<nones) vnodeI[708]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[708];
 }
if (cwI[709]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[709]) nones=1; else nzeros=1; // count the original value
if (responseI[363205]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[709]=0;
	else	if (nzeros<nones) vnodeI[709]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[709];
 }
if (cwI[710]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[710]) nones=1; else nzeros=1; // count the original value
if (responseI[363718]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[710]=0;
	else	if (nzeros<nones) vnodeI[710]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[710];
 }
if (cwI[711]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[711]) nones=1; else nzeros=1; // count the original value
if (responseI[364231]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[711]=0;
	else	if (nzeros<nones) vnodeI[711]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[711];
 }
if (cwI[712]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[712]) nones=1; else nzeros=1; // count the original value
if (responseI[364744]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[712]=0;
	else	if (nzeros<nones) vnodeI[712]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[712];
 }
if (cwI[713]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[713]) nones=1; else nzeros=1; // count the original value
if (responseI[365257]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[713]=0;
	else	if (nzeros<nones) vnodeI[713]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[713];
 }
if (cwI[714]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[714]) nones=1; else nzeros=1; // count the original value
if (responseI[365770]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[714]=0;
	else	if (nzeros<nones) vnodeI[714]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[714];
 }
if (cwI[715]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[715]) nones=1; else nzeros=1; // count the original value
if (responseI[366283]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[715]=0;
	else	if (nzeros<nones) vnodeI[715]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[715];
 }
if (cwI[716]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[716]) nones=1; else nzeros=1; // count the original value
if (responseI[366796]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[716]=0;
	else	if (nzeros<nones) vnodeI[716]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[716];
 }
if (cwI[717]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[717]) nones=1; else nzeros=1; // count the original value
if (responseI[367309]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[717]=0;
	else	if (nzeros<nones) vnodeI[717]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[717];
 }
if (cwI[718]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[718]) nones=1; else nzeros=1; // count the original value
if (responseI[367822]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[718]=0;
	else	if (nzeros<nones) vnodeI[718]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[718];
 }
if (cwI[719]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[719]) nones=1; else nzeros=1; // count the original value
if (responseI[368335]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[719]=0;
	else	if (nzeros<nones) vnodeI[719]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[719];
 }
if (cwI[720]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[720]) nones=1; else nzeros=1; // count the original value
if (responseI[368848]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[720]=0;
	else	if (nzeros<nones) vnodeI[720]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[720];
 }
if (cwI[721]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[721]) nones=1; else nzeros=1; // count the original value
if (responseI[369361]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[721]=0;
	else	if (nzeros<nones) vnodeI[721]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[721];
 }
if (cwI[722]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[722]) nones=1; else nzeros=1; // count the original value
if (responseI[369874]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[722]=0;
	else	if (nzeros<nones) vnodeI[722]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[722];
 }
if (cwI[723]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[723]) nones=1; else nzeros=1; // count the original value
if (responseI[370387]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[723]=0;
	else	if (nzeros<nones) vnodeI[723]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[723];
 }
if (cwI[724]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[724]) nones=1; else nzeros=1; // count the original value
if (responseI[370900]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[724]=0;
	else	if (nzeros<nones) vnodeI[724]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[724];
 }
if (cwI[725]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[725]) nones=1; else nzeros=1; // count the original value
if (responseI[371413]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[725]=0;
	else	if (nzeros<nones) vnodeI[725]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[725];
 }
if (cwI[726]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[726]) nones=1; else nzeros=1; // count the original value
if (responseI[371926]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[726]=0;
	else	if (nzeros<nones) vnodeI[726]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[726];
 }
if (cwI[727]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[727]) nones=1; else nzeros=1; // count the original value
if (responseI[372439]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[727]=0;
	else	if (nzeros<nones) vnodeI[727]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[727];
 }
if (cwI[728]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[728]) nones=1; else nzeros=1; // count the original value
if (responseI[372952]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[728]=0;
	else	if (nzeros<nones) vnodeI[728]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[728];
 }
if (cwI[729]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[729]) nones=1; else nzeros=1; // count the original value
if (responseI[373465]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[729]=0;
	else	if (nzeros<nones) vnodeI[729]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[729];
 }
if (cwI[730]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[730]) nones=1; else nzeros=1; // count the original value
if (responseI[373978]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[730]=0;
	else	if (nzeros<nones) vnodeI[730]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[730];
 }
if (cwI[731]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[731]) nones=1; else nzeros=1; // count the original value
if (responseI[374491]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[731]=0;
	else	if (nzeros<nones) vnodeI[731]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[731];
 }
if (cwI[732]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[732]) nones=1; else nzeros=1; // count the original value
if (responseI[375004]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[732]=0;
	else	if (nzeros<nones) vnodeI[732]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[732];
 }
if (cwI[733]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[733]) nones=1; else nzeros=1; // count the original value
if (responseI[375517]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[733]=0;
	else	if (nzeros<nones) vnodeI[733]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[733];
 }
if (cwI[734]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[734]) nones=1; else nzeros=1; // count the original value
if (responseI[376030]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[734]=0;
	else	if (nzeros<nones) vnodeI[734]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[734];
 }
if (cwI[735]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[735]) nones=1; else nzeros=1; // count the original value
if (responseI[376543]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[735]=0;
	else	if (nzeros<nones) vnodeI[735]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[735];
 }
if (cwI[736]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[736]) nones=1; else nzeros=1; // count the original value
if (responseI[377056]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[736]=0;
	else	if (nzeros<nones) vnodeI[736]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[736];
 }
if (cwI[737]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[737]) nones=1; else nzeros=1; // count the original value
if (responseI[377569]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[737]=0;
	else	if (nzeros<nones) vnodeI[737]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[737];
 }
if (cwI[738]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[738]) nones=1; else nzeros=1; // count the original value
if (responseI[378082]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[738]=0;
	else	if (nzeros<nones) vnodeI[738]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[738];
 }
if (cwI[739]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[739]) nones=1; else nzeros=1; // count the original value
if (responseI[378595]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[739]=0;
	else	if (nzeros<nones) vnodeI[739]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[739];
 }
if (cwI[740]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[740]) nones=1; else nzeros=1; // count the original value
if (responseI[379108]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[740]=0;
	else	if (nzeros<nones) vnodeI[740]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[740];
 }
if (cwI[741]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[741]) nones=1; else nzeros=1; // count the original value
if (responseI[379621]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[741]=0;
	else	if (nzeros<nones) vnodeI[741]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[741];
 }
if (cwI[742]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[742]) nones=1; else nzeros=1; // count the original value
if (responseI[380134]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[742]=0;
	else	if (nzeros<nones) vnodeI[742]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[742];
 }
if (cwI[743]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[743]) nones=1; else nzeros=1; // count the original value
if (responseI[380647]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[743]=0;
	else	if (nzeros<nones) vnodeI[743]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[743];
 }
if (cwI[744]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[744]) nones=1; else nzeros=1; // count the original value
if (responseI[381160]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[744]=0;
	else	if (nzeros<nones) vnodeI[744]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[744];
 }
if (cwI[745]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[745]) nones=1; else nzeros=1; // count the original value
if (responseI[381673]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[745]=0;
	else	if (nzeros<nones) vnodeI[745]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[745];
 }
if (cwI[746]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[746]) nones=1; else nzeros=1; // count the original value
if (responseI[382186]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[746]=0;
	else	if (nzeros<nones) vnodeI[746]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[746];
 }
if (cwI[747]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[747]) nones=1; else nzeros=1; // count the original value
if (responseI[382699]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[747]=0;
	else	if (nzeros<nones) vnodeI[747]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[747];
 }
if (cwI[748]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[748]) nones=1; else nzeros=1; // count the original value
if (responseI[383212]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[748]=0;
	else	if (nzeros<nones) vnodeI[748]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[748];
 }
if (cwI[749]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[749]) nones=1; else nzeros=1; // count the original value
if (responseI[383725]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[749]=0;
	else	if (nzeros<nones) vnodeI[749]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[749];
 }
if (cwI[750]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[750]) nones=1; else nzeros=1; // count the original value
if (responseI[384238]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[750]=0;
	else	if (nzeros<nones) vnodeI[750]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[750];
 }
if (cwI[751]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[751]) nones=1; else nzeros=1; // count the original value
if (responseI[384751]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[751]=0;
	else	if (nzeros<nones) vnodeI[751]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[751];
 }
if (cwI[752]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[752]) nones=1; else nzeros=1; // count the original value
if (responseI[385264]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[752]=0;
	else	if (nzeros<nones) vnodeI[752]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[752];
 }
if (cwI[753]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[753]) nones=1; else nzeros=1; // count the original value
if (responseI[385777]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[753]=0;
	else	if (nzeros<nones) vnodeI[753]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[753];
 }
if (cwI[754]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[754]) nones=1; else nzeros=1; // count the original value
if (responseI[386290]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[754]=0;
	else	if (nzeros<nones) vnodeI[754]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[754];
 }
if (cwI[755]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[755]) nones=1; else nzeros=1; // count the original value
if (responseI[386803]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[755]=0;
	else	if (nzeros<nones) vnodeI[755]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[755];
 }
if (cwI[756]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[756]) nones=1; else nzeros=1; // count the original value
if (responseI[387316]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[756]=0;
	else	if (nzeros<nones) vnodeI[756]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[756];
 }
if (cwI[757]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[757]) nones=1; else nzeros=1; // count the original value
if (responseI[387829]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[757]=0;
	else	if (nzeros<nones) vnodeI[757]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[757];
 }
if (cwI[758]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[758]) nones=1; else nzeros=1; // count the original value
if (responseI[388342]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[758]=0;
	else	if (nzeros<nones) vnodeI[758]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[758];
 }
if (cwI[759]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[759]) nones=1; else nzeros=1; // count the original value
if (responseI[388855]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[759]=0;
	else	if (nzeros<nones) vnodeI[759]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[759];
 }
if (cwI[760]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[760]) nones=1; else nzeros=1; // count the original value
if (responseI[389368]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[760]=0;
	else	if (nzeros<nones) vnodeI[760]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[760];
 }
if (cwI[761]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[761]) nones=1; else nzeros=1; // count the original value
if (responseI[389881]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[761]=0;
	else	if (nzeros<nones) vnodeI[761]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[761];
 }
if (cwI[762]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[762]) nones=1; else nzeros=1; // count the original value
if (responseI[390394]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[762]=0;
	else	if (nzeros<nones) vnodeI[762]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[762];
 }
if (cwI[763]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[763]) nones=1; else nzeros=1; // count the original value
if (responseI[390907]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[763]=0;
	else	if (nzeros<nones) vnodeI[763]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[763];
 }
if (cwI[764]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[764]) nones=1; else nzeros=1; // count the original value
if (responseI[391420]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[764]=0;
	else	if (nzeros<nones) vnodeI[764]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[764];
 }
if (cwI[765]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[765]) nones=1; else nzeros=1; // count the original value
if (responseI[391933]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[765]=0;
	else	if (nzeros<nones) vnodeI[765]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[765];
 }
if (cwI[766]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[766]) nones=1; else nzeros=1; // count the original value
if (responseI[392446]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[766]=0;
	else	if (nzeros<nones) vnodeI[766]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[766];
 }
if (cwI[767]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[767]) nones=1; else nzeros=1; // count the original value
if (responseI[392959]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[767]=0;
	else	if (nzeros<nones) vnodeI[767]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[767];
 }
if (cwI[768]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[768]) nones=1; else nzeros=1; // count the original value
if (responseI[393472]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[768]=0;
	else	if (nzeros<nones) vnodeI[768]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[768];
 }
if (cwI[769]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[769]) nones=1; else nzeros=1; // count the original value
if (responseI[393985]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[769]=0;
	else	if (nzeros<nones) vnodeI[769]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[769];
 }
if (cwI[770]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[770]) nones=1; else nzeros=1; // count the original value
if (responseI[394498]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[770]=0;
	else	if (nzeros<nones) vnodeI[770]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[770];
 }
if (cwI[771]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[771]) nones=1; else nzeros=1; // count the original value
if (responseI[395011]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[771]=0;
	else	if (nzeros<nones) vnodeI[771]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[771];
 }
if (cwI[772]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[772]) nones=1; else nzeros=1; // count the original value
if (responseI[395524]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[772]=0;
	else	if (nzeros<nones) vnodeI[772]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[772];
 }
if (cwI[773]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[773]) nones=1; else nzeros=1; // count the original value
if (responseI[396037]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[773]=0;
	else	if (nzeros<nones) vnodeI[773]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[773];
 }
if (cwI[774]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[774]) nones=1; else nzeros=1; // count the original value
if (responseI[396550]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[774]=0;
	else	if (nzeros<nones) vnodeI[774]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[774];
 }
if (cwI[775]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[775]) nones=1; else nzeros=1; // count the original value
if (responseI[397063]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[775]=0;
	else	if (nzeros<nones) vnodeI[775]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[775];
 }
if (cwI[776]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[776]) nones=1; else nzeros=1; // count the original value
if (responseI[397576]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[776]=0;
	else	if (nzeros<nones) vnodeI[776]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[776];
 }
if (cwI[777]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[777]) nones=1; else nzeros=1; // count the original value
if (responseI[398089]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[777]=0;
	else	if (nzeros<nones) vnodeI[777]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[777];
 }
if (cwI[778]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[778]) nones=1; else nzeros=1; // count the original value
if (responseI[398602]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[778]=0;
	else	if (nzeros<nones) vnodeI[778]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[778];
 }
if (cwI[779]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[779]) nones=1; else nzeros=1; // count the original value
if (responseI[399115]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[779]=0;
	else	if (nzeros<nones) vnodeI[779]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[779];
 }
if (cwI[780]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[780]) nones=1; else nzeros=1; // count the original value
if (responseI[399628]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[780]=0;
	else	if (nzeros<nones) vnodeI[780]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[780];
 }
if (cwI[781]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[781]) nones=1; else nzeros=1; // count the original value
if (responseI[400141]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[781]=0;
	else	if (nzeros<nones) vnodeI[781]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[781];
 }
if (cwI[782]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[782]) nones=1; else nzeros=1; // count the original value
if (responseI[400654]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[782]=0;
	else	if (nzeros<nones) vnodeI[782]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[782];
 }
if (cwI[783]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[783]) nones=1; else nzeros=1; // count the original value
if (responseI[401167]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[783]=0;
	else	if (nzeros<nones) vnodeI[783]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[783];
 }
if (cwI[784]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[784]) nones=1; else nzeros=1; // count the original value
if (responseI[401680]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[784]=0;
	else	if (nzeros<nones) vnodeI[784]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[784];
 }
if (cwI[785]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[785]) nones=1; else nzeros=1; // count the original value
if (responseI[402193]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[785]=0;
	else	if (nzeros<nones) vnodeI[785]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[785];
 }
if (cwI[786]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[786]) nones=1; else nzeros=1; // count the original value
if (responseI[402706]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[786]=0;
	else	if (nzeros<nones) vnodeI[786]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[786];
 }
if (cwI[787]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[787]) nones=1; else nzeros=1; // count the original value
if (responseI[403219]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[787]=0;
	else	if (nzeros<nones) vnodeI[787]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[787];
 }
if (cwI[788]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[788]) nones=1; else nzeros=1; // count the original value
if (responseI[403732]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[788]=0;
	else	if (nzeros<nones) vnodeI[788]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[788];
 }
if (cwI[789]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[789]) nones=1; else nzeros=1; // count the original value
if (responseI[404245]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[789]=0;
	else	if (nzeros<nones) vnodeI[789]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[789];
 }
if (cwI[790]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[790]) nones=1; else nzeros=1; // count the original value
if (responseI[404758]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[790]=0;
	else	if (nzeros<nones) vnodeI[790]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[790];
 }
if (cwI[791]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[791]) nones=1; else nzeros=1; // count the original value
if (responseI[405271]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[791]=0;
	else	if (nzeros<nones) vnodeI[791]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[791];
 }
if (cwI[792]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[792]) nones=1; else nzeros=1; // count the original value
if (responseI[405784]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[792]=0;
	else	if (nzeros<nones) vnodeI[792]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[792];
 }
if (cwI[793]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[793]) nones=1; else nzeros=1; // count the original value
if (responseI[406297]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[793]=0;
	else	if (nzeros<nones) vnodeI[793]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[793];
 }
if (cwI[794]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[794]) nones=1; else nzeros=1; // count the original value
if (responseI[406810]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[794]=0;
	else	if (nzeros<nones) vnodeI[794]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[794];
 }
if (cwI[795]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[795]) nones=1; else nzeros=1; // count the original value
if (responseI[407323]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[795]=0;
	else	if (nzeros<nones) vnodeI[795]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[795];
 }
if (cwI[796]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[796]) nones=1; else nzeros=1; // count the original value
if (responseI[407836]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[796]=0;
	else	if (nzeros<nones) vnodeI[796]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[796];
 }
if (cwI[797]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[797]) nones=1; else nzeros=1; // count the original value
if (responseI[408349]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[797]=0;
	else	if (nzeros<nones) vnodeI[797]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[797];
 }
if (cwI[798]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[798]) nones=1; else nzeros=1; // count the original value
if (responseI[408862]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[798]=0;
	else	if (nzeros<nones) vnodeI[798]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[798];
 }
if (cwI[799]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[799]) nones=1; else nzeros=1; // count the original value
if (responseI[409375]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[799]=0;
	else	if (nzeros<nones) vnodeI[799]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[799];
 }
if (cwI[800]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[800]) nones=1; else nzeros=1; // count the original value
if (responseI[409888]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[800]=0;
	else	if (nzeros<nones) vnodeI[800]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[800];
 }
if (cwI[801]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[801]) nones=1; else nzeros=1; // count the original value
if (responseI[410401]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[801]=0;
	else	if (nzeros<nones) vnodeI[801]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[801];
 }
if (cwI[802]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[802]) nones=1; else nzeros=1; // count the original value
if (responseI[410914]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[802]=0;
	else	if (nzeros<nones) vnodeI[802]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[802];
 }
if (cwI[803]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[803]) nones=1; else nzeros=1; // count the original value
if (responseI[411427]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[803]=0;
	else	if (nzeros<nones) vnodeI[803]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[803];
 }
if (cwI[804]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[804]) nones=1; else nzeros=1; // count the original value
if (responseI[411940]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[804]=0;
	else	if (nzeros<nones) vnodeI[804]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[804];
 }
if (cwI[805]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[805]) nones=1; else nzeros=1; // count the original value
if (responseI[412453]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[805]=0;
	else	if (nzeros<nones) vnodeI[805]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[805];
 }
if (cwI[806]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[806]) nones=1; else nzeros=1; // count the original value
if (responseI[412966]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[806]=0;
	else	if (nzeros<nones) vnodeI[806]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[806];
 }
if (cwI[807]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[807]) nones=1; else nzeros=1; // count the original value
if (responseI[413479]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[807]=0;
	else	if (nzeros<nones) vnodeI[807]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[807];
 }
if (cwI[808]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[808]) nones=1; else nzeros=1; // count the original value
if (responseI[413992]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[808]=0;
	else	if (nzeros<nones) vnodeI[808]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[808];
 }
if (cwI[809]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[809]) nones=1; else nzeros=1; // count the original value
if (responseI[414505]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[809]=0;
	else	if (nzeros<nones) vnodeI[809]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[809];
 }
if (cwI[810]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[810]) nones=1; else nzeros=1; // count the original value
if (responseI[415018]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[810]=0;
	else	if (nzeros<nones) vnodeI[810]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[810];
 }
if (cwI[811]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[811]) nones=1; else nzeros=1; // count the original value
if (responseI[415531]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[811]=0;
	else	if (nzeros<nones) vnodeI[811]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[811];
 }
if (cwI[812]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[812]) nones=1; else nzeros=1; // count the original value
if (responseI[416044]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[812]=0;
	else	if (nzeros<nones) vnodeI[812]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[812];
 }
if (cwI[813]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[813]) nones=1; else nzeros=1; // count the original value
if (responseI[416557]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[813]=0;
	else	if (nzeros<nones) vnodeI[813]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[813];
 }
if (cwI[814]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[814]) nones=1; else nzeros=1; // count the original value
if (responseI[417070]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[814]=0;
	else	if (nzeros<nones) vnodeI[814]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[814];
 }
if (cwI[815]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[815]) nones=1; else nzeros=1; // count the original value
if (responseI[417583]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[815]=0;
	else	if (nzeros<nones) vnodeI[815]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[815];
 }
if (cwI[816]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[816]) nones=1; else nzeros=1; // count the original value
if (responseI[418096]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[816]=0;
	else	if (nzeros<nones) vnodeI[816]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[816];
 }
if (cwI[817]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[817]) nones=1; else nzeros=1; // count the original value
if (responseI[418609]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[817]=0;
	else	if (nzeros<nones) vnodeI[817]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[817];
 }
if (cwI[818]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[818]) nones=1; else nzeros=1; // count the original value
if (responseI[419122]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[818]=0;
	else	if (nzeros<nones) vnodeI[818]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[818];
 }
if (cwI[819]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[819]) nones=1; else nzeros=1; // count the original value
if (responseI[419635]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[819]=0;
	else	if (nzeros<nones) vnodeI[819]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[819];
 }
if (cwI[820]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[820]) nones=1; else nzeros=1; // count the original value
if (responseI[420148]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[820]=0;
	else	if (nzeros<nones) vnodeI[820]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[820];
 }
if (cwI[821]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[821]) nones=1; else nzeros=1; // count the original value
if (responseI[420661]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[821]=0;
	else	if (nzeros<nones) vnodeI[821]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[821];
 }
if (cwI[822]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[822]) nones=1; else nzeros=1; // count the original value
if (responseI[421174]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[822]=0;
	else	if (nzeros<nones) vnodeI[822]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[822];
 }
if (cwI[823]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[823]) nones=1; else nzeros=1; // count the original value
if (responseI[421687]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[823]=0;
	else	if (nzeros<nones) vnodeI[823]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[823];
 }
if (cwI[824]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[824]) nones=1; else nzeros=1; // count the original value
if (responseI[422200]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[824]=0;
	else	if (nzeros<nones) vnodeI[824]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[824];
 }
if (cwI[825]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[825]) nones=1; else nzeros=1; // count the original value
if (responseI[422713]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[825]=0;
	else	if (nzeros<nones) vnodeI[825]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[825];
 }
if (cwI[826]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[826]) nones=1; else nzeros=1; // count the original value
if (responseI[423226]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[826]=0;
	else	if (nzeros<nones) vnodeI[826]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[826];
 }
if (cwI[827]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[827]) nones=1; else nzeros=1; // count the original value
if (responseI[423739]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[827]=0;
	else	if (nzeros<nones) vnodeI[827]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[827];
 }
if (cwI[828]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[828]) nones=1; else nzeros=1; // count the original value
if (responseI[424252]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[828]=0;
	else	if (nzeros<nones) vnodeI[828]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[828];
 }
if (cwI[829]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[829]) nones=1; else nzeros=1; // count the original value
if (responseI[424765]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[829]=0;
	else	if (nzeros<nones) vnodeI[829]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[829];
 }
if (cwI[830]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[830]) nones=1; else nzeros=1; // count the original value
if (responseI[425278]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[830]=0;
	else	if (nzeros<nones) vnodeI[830]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[830];
 }
if (cwI[831]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[831]) nones=1; else nzeros=1; // count the original value
if (responseI[425791]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[831]=0;
	else	if (nzeros<nones) vnodeI[831]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[831];
 }
if (cwI[832]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[832]) nones=1; else nzeros=1; // count the original value
if (responseI[426304]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[832]=0;
	else	if (nzeros<nones) vnodeI[832]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[832];
 }
if (cwI[833]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[833]) nones=1; else nzeros=1; // count the original value
if (responseI[426817]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[833]=0;
	else	if (nzeros<nones) vnodeI[833]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[833];
 }
if (cwI[834]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[834]) nones=1; else nzeros=1; // count the original value
if (responseI[427330]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[834]=0;
	else	if (nzeros<nones) vnodeI[834]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[834];
 }
if (cwI[835]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[835]) nones=1; else nzeros=1; // count the original value
if (responseI[427843]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[835]=0;
	else	if (nzeros<nones) vnodeI[835]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[835];
 }
if (cwI[836]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[836]) nones=1; else nzeros=1; // count the original value
if (responseI[428356]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[836]=0;
	else	if (nzeros<nones) vnodeI[836]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[836];
 }
if (cwI[837]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[837]) nones=1; else nzeros=1; // count the original value
if (responseI[428869]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[837]=0;
	else	if (nzeros<nones) vnodeI[837]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[837];
 }
if (cwI[838]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[838]) nones=1; else nzeros=1; // count the original value
if (responseI[429382]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[838]=0;
	else	if (nzeros<nones) vnodeI[838]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[838];
 }
if (cwI[839]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[839]) nones=1; else nzeros=1; // count the original value
if (responseI[429895]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[839]=0;
	else	if (nzeros<nones) vnodeI[839]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[839];
 }
if (cwI[840]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[840]) nones=1; else nzeros=1; // count the original value
if (responseI[430408]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[840]=0;
	else	if (nzeros<nones) vnodeI[840]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[840];
 }
if (cwI[841]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[841]) nones=1; else nzeros=1; // count the original value
if (responseI[430921]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[841]=0;
	else	if (nzeros<nones) vnodeI[841]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[841];
 }
if (cwI[842]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[842]) nones=1; else nzeros=1; // count the original value
if (responseI[431434]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[842]=0;
	else	if (nzeros<nones) vnodeI[842]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[842];
 }
if (cwI[843]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[843]) nones=1; else nzeros=1; // count the original value
if (responseI[431947]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[843]=0;
	else	if (nzeros<nones) vnodeI[843]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[843];
 }
if (cwI[844]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[844]) nones=1; else nzeros=1; // count the original value
if (responseI[432460]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[844]=0;
	else	if (nzeros<nones) vnodeI[844]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[844];
 }
if (cwI[845]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[845]) nones=1; else nzeros=1; // count the original value
if (responseI[432973]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[845]=0;
	else	if (nzeros<nones) vnodeI[845]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[845];
 }
if (cwI[846]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[846]) nones=1; else nzeros=1; // count the original value
if (responseI[433486]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[846]=0;
	else	if (nzeros<nones) vnodeI[846]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[846];
 }
if (cwI[847]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[847]) nones=1; else nzeros=1; // count the original value
if (responseI[433999]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[847]=0;
	else	if (nzeros<nones) vnodeI[847]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[847];
 }
if (cwI[848]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[848]) nones=1; else nzeros=1; // count the original value
if (responseI[434512]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[848]=0;
	else	if (nzeros<nones) vnodeI[848]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[848];
 }
if (cwI[849]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[849]) nones=1; else nzeros=1; // count the original value
if (responseI[435025]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[849]=0;
	else	if (nzeros<nones) vnodeI[849]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[849];
 }
if (cwI[850]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[850]) nones=1; else nzeros=1; // count the original value
if (responseI[435538]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[850]=0;
	else	if (nzeros<nones) vnodeI[850]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[850];
 }
if (cwI[851]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[851]) nones=1; else nzeros=1; // count the original value
if (responseI[436051]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[851]=0;
	else	if (nzeros<nones) vnodeI[851]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[851];
 }
if (cwI[852]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[852]) nones=1; else nzeros=1; // count the original value
if (responseI[436564]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[852]=0;
	else	if (nzeros<nones) vnodeI[852]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[852];
 }
if (cwI[853]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[853]) nones=1; else nzeros=1; // count the original value
if (responseI[437077]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[853]=0;
	else	if (nzeros<nones) vnodeI[853]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[853];
 }
if (cwI[854]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[854]) nones=1; else nzeros=1; // count the original value
if (responseI[437590]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[854]=0;
	else	if (nzeros<nones) vnodeI[854]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[854];
 }
if (cwI[855]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[855]) nones=1; else nzeros=1; // count the original value
if (responseI[438103]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[855]=0;
	else	if (nzeros<nones) vnodeI[855]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[855];
 }
if (cwI[856]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[856]) nones=1; else nzeros=1; // count the original value
if (responseI[438616]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[856]=0;
	else	if (nzeros<nones) vnodeI[856]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[856];
 }
if (cwI[857]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[857]) nones=1; else nzeros=1; // count the original value
if (responseI[439129]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[857]=0;
	else	if (nzeros<nones) vnodeI[857]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[857];
 }
if (cwI[858]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[858]) nones=1; else nzeros=1; // count the original value
if (responseI[439642]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[858]=0;
	else	if (nzeros<nones) vnodeI[858]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[858];
 }
if (cwI[859]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[859]) nones=1; else nzeros=1; // count the original value
if (responseI[440155]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[859]=0;
	else	if (nzeros<nones) vnodeI[859]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[859];
 }
if (cwI[860]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[860]) nones=1; else nzeros=1; // count the original value
if (responseI[440668]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[860]=0;
	else	if (nzeros<nones) vnodeI[860]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[860];
 }
if (cwI[861]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[861]) nones=1; else nzeros=1; // count the original value
if (responseI[441181]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[861]=0;
	else	if (nzeros<nones) vnodeI[861]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[861];
 }
if (cwI[862]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[862]) nones=1; else nzeros=1; // count the original value
if (responseI[441694]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[862]=0;
	else	if (nzeros<nones) vnodeI[862]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[862];
 }
if (cwI[863]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[863]) nones=1; else nzeros=1; // count the original value
if (responseI[442207]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[863]=0;
	else	if (nzeros<nones) vnodeI[863]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[863];
 }
if (cwI[864]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[864]) nones=1; else nzeros=1; // count the original value
if (responseI[442720]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[864]=0;
	else	if (nzeros<nones) vnodeI[864]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[864];
 }
if (cwI[865]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[865]) nones=1; else nzeros=1; // count the original value
if (responseI[443233]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[865]=0;
	else	if (nzeros<nones) vnodeI[865]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[865];
 }
if (cwI[866]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[866]) nones=1; else nzeros=1; // count the original value
if (responseI[443746]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[866]=0;
	else	if (nzeros<nones) vnodeI[866]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[866];
 }
if (cwI[867]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[867]) nones=1; else nzeros=1; // count the original value
if (responseI[444259]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[867]=0;
	else	if (nzeros<nones) vnodeI[867]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[867];
 }
if (cwI[868]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[868]) nones=1; else nzeros=1; // count the original value
if (responseI[444772]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[868]=0;
	else	if (nzeros<nones) vnodeI[868]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[868];
 }
if (cwI[869]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[869]) nones=1; else nzeros=1; // count the original value
if (responseI[445285]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[869]=0;
	else	if (nzeros<nones) vnodeI[869]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[869];
 }
if (cwI[870]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[870]) nones=1; else nzeros=1; // count the original value
if (responseI[445798]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[870]=0;
	else	if (nzeros<nones) vnodeI[870]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[870];
 }
if (cwI[871]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[871]) nones=1; else nzeros=1; // count the original value
if (responseI[446311]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[871]=0;
	else	if (nzeros<nones) vnodeI[871]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[871];
 }
if (cwI[872]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[872]) nones=1; else nzeros=1; // count the original value
if (responseI[446824]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[872]=0;
	else	if (nzeros<nones) vnodeI[872]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[872];
 }
if (cwI[873]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[873]) nones=1; else nzeros=1; // count the original value
if (responseI[447337]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[873]=0;
	else	if (nzeros<nones) vnodeI[873]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[873];
 }
if (cwI[874]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[874]) nones=1; else nzeros=1; // count the original value
if (responseI[447850]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[874]=0;
	else	if (nzeros<nones) vnodeI[874]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[874];
 }
if (cwI[875]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[875]) nones=1; else nzeros=1; // count the original value
if (responseI[448363]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[875]=0;
	else	if (nzeros<nones) vnodeI[875]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[875];
 }
if (cwI[876]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[876]) nones=1; else nzeros=1; // count the original value
if (responseI[448876]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[876]=0;
	else	if (nzeros<nones) vnodeI[876]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[876];
 }
if (cwI[877]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[877]) nones=1; else nzeros=1; // count the original value
if (responseI[449389]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[877]=0;
	else	if (nzeros<nones) vnodeI[877]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[877];
 }
if (cwI[878]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[878]) nones=1; else nzeros=1; // count the original value
if (responseI[449902]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[878]=0;
	else	if (nzeros<nones) vnodeI[878]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[878];
 }
if (cwI[879]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[879]) nones=1; else nzeros=1; // count the original value
if (responseI[450415]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[879]=0;
	else	if (nzeros<nones) vnodeI[879]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[879];
 }
if (cwI[880]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[880]) nones=1; else nzeros=1; // count the original value
if (responseI[450928]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[880]=0;
	else	if (nzeros<nones) vnodeI[880]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[880];
 }
if (cwI[881]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[881]) nones=1; else nzeros=1; // count the original value
if (responseI[451441]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[881]=0;
	else	if (nzeros<nones) vnodeI[881]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[881];
 }
if (cwI[882]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[882]) nones=1; else nzeros=1; // count the original value
if (responseI[451954]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[882]=0;
	else	if (nzeros<nones) vnodeI[882]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[882];
 }
if (cwI[883]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[883]) nones=1; else nzeros=1; // count the original value
if (responseI[452467]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[883]=0;
	else	if (nzeros<nones) vnodeI[883]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[883];
 }
if (cwI[884]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[884]) nones=1; else nzeros=1; // count the original value
if (responseI[452980]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[884]=0;
	else	if (nzeros<nones) vnodeI[884]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[884];
 }
if (cwI[885]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[885]) nones=1; else nzeros=1; // count the original value
if (responseI[453493]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[885]=0;
	else	if (nzeros<nones) vnodeI[885]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[885];
 }
if (cwI[886]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[886]) nones=1; else nzeros=1; // count the original value
if (responseI[454006]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[886]=0;
	else	if (nzeros<nones) vnodeI[886]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[886];
 }
if (cwI[887]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[887]) nones=1; else nzeros=1; // count the original value
if (responseI[454519]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[887]=0;
	else	if (nzeros<nones) vnodeI[887]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[887];
 }
if (cwI[888]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[888]) nones=1; else nzeros=1; // count the original value
if (responseI[455032]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[888]=0;
	else	if (nzeros<nones) vnodeI[888]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[888];
 }
if (cwI[889]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[889]) nones=1; else nzeros=1; // count the original value
if (responseI[455545]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[889]=0;
	else	if (nzeros<nones) vnodeI[889]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[889];
 }
if (cwI[890]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[890]) nones=1; else nzeros=1; // count the original value
if (responseI[456058]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[890]=0;
	else	if (nzeros<nones) vnodeI[890]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[890];
 }
if (cwI[891]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[891]) nones=1; else nzeros=1; // count the original value
if (responseI[456571]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[891]=0;
	else	if (nzeros<nones) vnodeI[891]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[891];
 }
if (cwI[892]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[892]) nones=1; else nzeros=1; // count the original value
if (responseI[457084]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[892]=0;
	else	if (nzeros<nones) vnodeI[892]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[892];
 }
if (cwI[893]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[893]) nones=1; else nzeros=1; // count the original value
if (responseI[457597]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[893]=0;
	else	if (nzeros<nones) vnodeI[893]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[893];
 }
if (cwI[894]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[894]) nones=1; else nzeros=1; // count the original value
if (responseI[458110]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[894]=0;
	else	if (nzeros<nones) vnodeI[894]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[894];
 }
if (cwI[895]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[895]) nones=1; else nzeros=1; // count the original value
if (responseI[458623]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[895]=0;
	else	if (nzeros<nones) vnodeI[895]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[895];
 }
if (cwI[896]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[896]) nones=1; else nzeros=1; // count the original value
if (responseI[459136]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[896]=0;
	else	if (nzeros<nones) vnodeI[896]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[896];
 }
if (cwI[897]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[897]) nones=1; else nzeros=1; // count the original value
if (responseI[459649]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[897]=0;
	else	if (nzeros<nones) vnodeI[897]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[897];
 }
if (cwI[898]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[898]) nones=1; else nzeros=1; // count the original value
if (responseI[460162]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[898]=0;
	else	if (nzeros<nones) vnodeI[898]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[898];
 }
if (cwI[899]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[899]) nones=1; else nzeros=1; // count the original value
if (responseI[460675]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[899]=0;
	else	if (nzeros<nones) vnodeI[899]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[899];
 }
if (cwI[900]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[900]) nones=1; else nzeros=1; // count the original value
if (responseI[461188]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[900]=0;
	else	if (nzeros<nones) vnodeI[900]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[900];
 }
if (cwI[901]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[901]) nones=1; else nzeros=1; // count the original value
if (responseI[461701]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[901]=0;
	else	if (nzeros<nones) vnodeI[901]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[901];
 }
if (cwI[902]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[902]) nones=1; else nzeros=1; // count the original value
if (responseI[462214]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[902]=0;
	else	if (nzeros<nones) vnodeI[902]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[902];
 }
if (cwI[903]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[903]) nones=1; else nzeros=1; // count the original value
if (responseI[462727]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[903]=0;
	else	if (nzeros<nones) vnodeI[903]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[903];
 }
if (cwI[904]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[904]) nones=1; else nzeros=1; // count the original value
if (responseI[463240]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[904]=0;
	else	if (nzeros<nones) vnodeI[904]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[904];
 }
if (cwI[905]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[905]) nones=1; else nzeros=1; // count the original value
if (responseI[463753]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[905]=0;
	else	if (nzeros<nones) vnodeI[905]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[905];
 }
if (cwI[906]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[906]) nones=1; else nzeros=1; // count the original value
if (responseI[464266]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[906]=0;
	else	if (nzeros<nones) vnodeI[906]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[906];
 }
if (cwI[907]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[907]) nones=1; else nzeros=1; // count the original value
if (responseI[464779]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[907]=0;
	else	if (nzeros<nones) vnodeI[907]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[907];
 }
if (cwI[908]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[908]) nones=1; else nzeros=1; // count the original value
if (responseI[465292]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[908]=0;
	else	if (nzeros<nones) vnodeI[908]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[908];
 }
if (cwI[909]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[909]) nones=1; else nzeros=1; // count the original value
if (responseI[465805]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[909]=0;
	else	if (nzeros<nones) vnodeI[909]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[909];
 }
if (cwI[910]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[910]) nones=1; else nzeros=1; // count the original value
if (responseI[466318]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[910]=0;
	else	if (nzeros<nones) vnodeI[910]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[910];
 }
if (cwI[911]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[911]) nones=1; else nzeros=1; // count the original value
if (responseI[466831]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[911]=0;
	else	if (nzeros<nones) vnodeI[911]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[911];
 }
if (cwI[912]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[912]) nones=1; else nzeros=1; // count the original value
if (responseI[467344]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[912]=0;
	else	if (nzeros<nones) vnodeI[912]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[912];
 }
if (cwI[913]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[913]) nones=1; else nzeros=1; // count the original value
if (responseI[467857]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[913]=0;
	else	if (nzeros<nones) vnodeI[913]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[913];
 }
if (cwI[914]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[914]) nones=1; else nzeros=1; // count the original value
if (responseI[468370]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[914]=0;
	else	if (nzeros<nones) vnodeI[914]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[914];
 }
if (cwI[915]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[915]) nones=1; else nzeros=1; // count the original value
if (responseI[468883]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[915]=0;
	else	if (nzeros<nones) vnodeI[915]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[915];
 }
if (cwI[916]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[916]) nones=1; else nzeros=1; // count the original value
if (responseI[469396]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[916]=0;
	else	if (nzeros<nones) vnodeI[916]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[916];
 }
if (cwI[917]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[917]) nones=1; else nzeros=1; // count the original value
if (responseI[469909]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[917]=0;
	else	if (nzeros<nones) vnodeI[917]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[917];
 }
if (cwI[918]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[918]) nones=1; else nzeros=1; // count the original value
if (responseI[470422]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[918]=0;
	else	if (nzeros<nones) vnodeI[918]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[918];
 }
if (cwI[919]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[919]) nones=1; else nzeros=1; // count the original value
if (responseI[470935]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[919]=0;
	else	if (nzeros<nones) vnodeI[919]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[919];
 }
if (cwI[920]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[920]) nones=1; else nzeros=1; // count the original value
if (responseI[471448]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[920]=0;
	else	if (nzeros<nones) vnodeI[920]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[920];
 }
if (cwI[921]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[921]) nones=1; else nzeros=1; // count the original value
if (responseI[471961]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[921]=0;
	else	if (nzeros<nones) vnodeI[921]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[921];
 }
if (cwI[922]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[922]) nones=1; else nzeros=1; // count the original value
if (responseI[472474]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[922]=0;
	else	if (nzeros<nones) vnodeI[922]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[922];
 }
if (cwI[923]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[923]) nones=1; else nzeros=1; // count the original value
if (responseI[472987]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[923]=0;
	else	if (nzeros<nones) vnodeI[923]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[923];
 }
if (cwI[924]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[924]) nones=1; else nzeros=1; // count the original value
if (responseI[473500]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[924]=0;
	else	if (nzeros<nones) vnodeI[924]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[924];
 }
if (cwI[925]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[925]) nones=1; else nzeros=1; // count the original value
if (responseI[474013]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[925]=0;
	else	if (nzeros<nones) vnodeI[925]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[925];
 }
if (cwI[926]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[926]) nones=1; else nzeros=1; // count the original value
if (responseI[474526]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[926]=0;
	else	if (nzeros<nones) vnodeI[926]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[926];
 }
if (cwI[927]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[927]) nones=1; else nzeros=1; // count the original value
if (responseI[475039]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[927]=0;
	else	if (nzeros<nones) vnodeI[927]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[927];
 }
if (cwI[928]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[928]) nones=1; else nzeros=1; // count the original value
if (responseI[475552]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[928]=0;
	else	if (nzeros<nones) vnodeI[928]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[928];
 }
if (cwI[929]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[929]) nones=1; else nzeros=1; // count the original value
if (responseI[476065]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[929]=0;
	else	if (nzeros<nones) vnodeI[929]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[929];
 }
if (cwI[930]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[930]) nones=1; else nzeros=1; // count the original value
if (responseI[476578]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[930]=0;
	else	if (nzeros<nones) vnodeI[930]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[930];
 }
if (cwI[931]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[931]) nones=1; else nzeros=1; // count the original value
if (responseI[477091]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[931]=0;
	else	if (nzeros<nones) vnodeI[931]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[931];
 }
if (cwI[932]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[932]) nones=1; else nzeros=1; // count the original value
if (responseI[477604]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[932]=0;
	else	if (nzeros<nones) vnodeI[932]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[932];
 }
if (cwI[933]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[933]) nones=1; else nzeros=1; // count the original value
if (responseI[478117]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[933]=0;
	else	if (nzeros<nones) vnodeI[933]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[933];
 }
if (cwI[934]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[934]) nones=1; else nzeros=1; // count the original value
if (responseI[478630]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[934]=0;
	else	if (nzeros<nones) vnodeI[934]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[934];
 }
if (cwI[935]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[935]) nones=1; else nzeros=1; // count the original value
if (responseI[479143]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[935]=0;
	else	if (nzeros<nones) vnodeI[935]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[935];
 }
if (cwI[936]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[936]) nones=1; else nzeros=1; // count the original value
if (responseI[479656]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[936]=0;
	else	if (nzeros<nones) vnodeI[936]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[936];
 }
if (cwI[937]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[937]) nones=1; else nzeros=1; // count the original value
if (responseI[480169]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[937]=0;
	else	if (nzeros<nones) vnodeI[937]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[937];
 }
if (cwI[938]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[938]) nones=1; else nzeros=1; // count the original value
if (responseI[480682]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[938]=0;
	else	if (nzeros<nones) vnodeI[938]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[938];
 }
if (cwI[939]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[939]) nones=1; else nzeros=1; // count the original value
if (responseI[481195]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[939]=0;
	else	if (nzeros<nones) vnodeI[939]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[939];
 }
if (cwI[940]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[940]) nones=1; else nzeros=1; // count the original value
if (responseI[481708]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[940]=0;
	else	if (nzeros<nones) vnodeI[940]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[940];
 }
if (cwI[941]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[941]) nones=1; else nzeros=1; // count the original value
if (responseI[482221]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[941]=0;
	else	if (nzeros<nones) vnodeI[941]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[941];
 }
if (cwI[942]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[942]) nones=1; else nzeros=1; // count the original value
if (responseI[482734]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[942]=0;
	else	if (nzeros<nones) vnodeI[942]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[942];
 }
if (cwI[943]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[943]) nones=1; else nzeros=1; // count the original value
if (responseI[483247]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[943]=0;
	else	if (nzeros<nones) vnodeI[943]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[943];
 }
if (cwI[944]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[944]) nones=1; else nzeros=1; // count the original value
if (responseI[483760]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[944]=0;
	else	if (nzeros<nones) vnodeI[944]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[944];
 }
if (cwI[945]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[945]) nones=1; else nzeros=1; // count the original value
if (responseI[484273]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[945]=0;
	else	if (nzeros<nones) vnodeI[945]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[945];
 }
if (cwI[946]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[946]) nones=1; else nzeros=1; // count the original value
if (responseI[484786]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[946]=0;
	else	if (nzeros<nones) vnodeI[946]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[946];
 }
if (cwI[947]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[947]) nones=1; else nzeros=1; // count the original value
if (responseI[485299]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[947]=0;
	else	if (nzeros<nones) vnodeI[947]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[947];
 }
if (cwI[948]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[948]) nones=1; else nzeros=1; // count the original value
if (responseI[485812]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[948]=0;
	else	if (nzeros<nones) vnodeI[948]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[948];
 }
if (cwI[949]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[949]) nones=1; else nzeros=1; // count the original value
if (responseI[486325]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[949]=0;
	else	if (nzeros<nones) vnodeI[949]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[949];
 }
if (cwI[950]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[950]) nones=1; else nzeros=1; // count the original value
if (responseI[486838]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[950]=0;
	else	if (nzeros<nones) vnodeI[950]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[950];
 }
if (cwI[951]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[951]) nones=1; else nzeros=1; // count the original value
if (responseI[487351]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[951]=0;
	else	if (nzeros<nones) vnodeI[951]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[951];
 }
if (cwI[952]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[952]) nones=1; else nzeros=1; // count the original value
if (responseI[487864]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[952]=0;
	else	if (nzeros<nones) vnodeI[952]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[952];
 }
if (cwI[953]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[953]) nones=1; else nzeros=1; // count the original value
if (responseI[488377]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[953]=0;
	else	if (nzeros<nones) vnodeI[953]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[953];
 }
if (cwI[954]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[954]) nones=1; else nzeros=1; // count the original value
if (responseI[488890]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[954]=0;
	else	if (nzeros<nones) vnodeI[954]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[954];
 }
if (cwI[955]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[955]) nones=1; else nzeros=1; // count the original value
if (responseI[489403]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[955]=0;
	else	if (nzeros<nones) vnodeI[955]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[955];
 }
if (cwI[956]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[956]) nones=1; else nzeros=1; // count the original value
if (responseI[489916]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[956]=0;
	else	if (nzeros<nones) vnodeI[956]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[956];
 }
if (cwI[957]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[957]) nones=1; else nzeros=1; // count the original value
if (responseI[490429]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[957]=0;
	else	if (nzeros<nones) vnodeI[957]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[957];
 }
if (cwI[958]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[958]) nones=1; else nzeros=1; // count the original value
if (responseI[490942]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[958]=0;
	else	if (nzeros<nones) vnodeI[958]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[958];
 }
if (cwI[959]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[959]) nones=1; else nzeros=1; // count the original value
if (responseI[491455]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[959]=0;
	else	if (nzeros<nones) vnodeI[959]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[959];
 }
if (cwI[960]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[960]) nones=1; else nzeros=1; // count the original value
if (responseI[491968]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[960]=0;
	else	if (nzeros<nones) vnodeI[960]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[960];
 }
if (cwI[961]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[961]) nones=1; else nzeros=1; // count the original value
if (responseI[492481]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[961]=0;
	else	if (nzeros<nones) vnodeI[961]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[961];
 }
if (cwI[962]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[962]) nones=1; else nzeros=1; // count the original value
if (responseI[492994]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[962]=0;
	else	if (nzeros<nones) vnodeI[962]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[962];
 }
if (cwI[963]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[963]) nones=1; else nzeros=1; // count the original value
if (responseI[493507]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[963]=0;
	else	if (nzeros<nones) vnodeI[963]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[963];
 }
if (cwI[964]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[964]) nones=1; else nzeros=1; // count the original value
if (responseI[494020]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[964]=0;
	else	if (nzeros<nones) vnodeI[964]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[964];
 }
if (cwI[965]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[965]) nones=1; else nzeros=1; // count the original value
if (responseI[494533]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[965]=0;
	else	if (nzeros<nones) vnodeI[965]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[965];
 }
if (cwI[966]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[966]) nones=1; else nzeros=1; // count the original value
if (responseI[495046]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[966]=0;
	else	if (nzeros<nones) vnodeI[966]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[966];
 }
if (cwI[967]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[967]) nones=1; else nzeros=1; // count the original value
if (responseI[495559]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[967]=0;
	else	if (nzeros<nones) vnodeI[967]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[967];
 }
if (cwI[968]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[968]) nones=1; else nzeros=1; // count the original value
if (responseI[496072]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[968]=0;
	else	if (nzeros<nones) vnodeI[968]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[968];
 }
if (cwI[969]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[969]) nones=1; else nzeros=1; // count the original value
if (responseI[496585]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[969]=0;
	else	if (nzeros<nones) vnodeI[969]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[969];
 }
if (cwI[970]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[970]) nones=1; else nzeros=1; // count the original value
if (responseI[497098]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[970]=0;
	else	if (nzeros<nones) vnodeI[970]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[970];
 }
if (cwI[971]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[971]) nones=1; else nzeros=1; // count the original value
if (responseI[497611]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[971]=0;
	else	if (nzeros<nones) vnodeI[971]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[971];
 }
if (cwI[972]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[972]) nones=1; else nzeros=1; // count the original value
if (responseI[498124]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[972]=0;
	else	if (nzeros<nones) vnodeI[972]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[972];
 }
if (cwI[973]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[973]) nones=1; else nzeros=1; // count the original value
if (responseI[498637]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[973]=0;
	else	if (nzeros<nones) vnodeI[973]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[973];
 }
if (cwI[974]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[974]) nones=1; else nzeros=1; // count the original value
if (responseI[499150]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[974]=0;
	else	if (nzeros<nones) vnodeI[974]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[974];
 }
if (cwI[975]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[975]) nones=1; else nzeros=1; // count the original value
if (responseI[499663]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[975]=0;
	else	if (nzeros<nones) vnodeI[975]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[975];
 }
if (cwI[976]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[976]) nones=1; else nzeros=1; // count the original value
if (responseI[500176]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[976]=0;
	else	if (nzeros<nones) vnodeI[976]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[976];
 }
if (cwI[977]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[977]) nones=1; else nzeros=1; // count the original value
if (responseI[500689]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[977]=0;
	else	if (nzeros<nones) vnodeI[977]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[977];
 }
if (cwI[978]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[978]) nones=1; else nzeros=1; // count the original value
if (responseI[501202]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[978]=0;
	else	if (nzeros<nones) vnodeI[978]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[978];
 }
if (cwI[979]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[979]) nones=1; else nzeros=1; // count the original value
if (responseI[501715]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[979]=0;
	else	if (nzeros<nones) vnodeI[979]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[979];
 }
if (cwI[980]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[980]) nones=1; else nzeros=1; // count the original value
if (responseI[502228]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[980]=0;
	else	if (nzeros<nones) vnodeI[980]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[980];
 }
if (cwI[981]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[981]) nones=1; else nzeros=1; // count the original value
if (responseI[502741]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[981]=0;
	else	if (nzeros<nones) vnodeI[981]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[981];
 }
if (cwI[982]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[982]) nones=1; else nzeros=1; // count the original value
if (responseI[503254]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[982]=0;
	else	if (nzeros<nones) vnodeI[982]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[982];
 }
if (cwI[983]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[983]) nones=1; else nzeros=1; // count the original value
if (responseI[503767]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[983]=0;
	else	if (nzeros<nones) vnodeI[983]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[983];
 }
if (cwI[984]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[984]) nones=1; else nzeros=1; // count the original value
if (responseI[504280]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[984]=0;
	else	if (nzeros<nones) vnodeI[984]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[984];
 }
if (cwI[985]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[985]) nones=1; else nzeros=1; // count the original value
if (responseI[504793]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[985]=0;
	else	if (nzeros<nones) vnodeI[985]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[985];
 }
if (cwI[986]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[986]) nones=1; else nzeros=1; // count the original value
if (responseI[505306]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[986]=0;
	else	if (nzeros<nones) vnodeI[986]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[986];
 }
if (cwI[987]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[987]) nones=1; else nzeros=1; // count the original value
if (responseI[505819]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[987]=0;
	else	if (nzeros<nones) vnodeI[987]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[987];
 }
if (cwI[988]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[988]) nones=1; else nzeros=1; // count the original value
if (responseI[506332]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[988]=0;
	else	if (nzeros<nones) vnodeI[988]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[988];
 }
if (cwI[989]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[989]) nones=1; else nzeros=1; // count the original value
if (responseI[506845]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[989]=0;
	else	if (nzeros<nones) vnodeI[989]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[989];
 }
if (cwI[990]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[990]) nones=1; else nzeros=1; // count the original value
if (responseI[507358]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[990]=0;
	else	if (nzeros<nones) vnodeI[990]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[990];
 }
if (cwI[991]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[991]) nones=1; else nzeros=1; // count the original value
if (responseI[507871]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[991]=0;
	else	if (nzeros<nones) vnodeI[991]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[991];
 }
if (cwI[992]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[992]) nones=1; else nzeros=1; // count the original value
if (responseI[508384]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[992]=0;
	else	if (nzeros<nones) vnodeI[992]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[992];
 }
if (cwI[993]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[993]) nones=1; else nzeros=1; // count the original value
if (responseI[508897]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[993]=0;
	else	if (nzeros<nones) vnodeI[993]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[993];
 }
if (cwI[994]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[994]) nones=1; else nzeros=1; // count the original value
if (responseI[509410]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[994]=0;
	else	if (nzeros<nones) vnodeI[994]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[994];
 }
if (cwI[995]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[995]) nones=1; else nzeros=1; // count the original value
if (responseI[509923]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[995]=0;
	else	if (nzeros<nones) vnodeI[995]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[995];
 }
if (cwI[996]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[996]) nones=1; else nzeros=1; // count the original value
if (responseI[510436]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[996]=0;
	else	if (nzeros<nones) vnodeI[996]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[996];
 }
if (cwI[997]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[997]) nones=1; else nzeros=1; // count the original value
if (responseI[510949]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[997]=0;
	else	if (nzeros<nones) vnodeI[997]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[997];
 }
if (cwI[998]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[998]) nones=1; else nzeros=1; // count the original value
if (responseI[511462]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[998]=0;
	else	if (nzeros<nones) vnodeI[998]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[998];
 }
if (cwI[999]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[999]) nones=1; else nzeros=1; // count the original value
if (responseI[511975]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[999]=0;
	else	if (nzeros<nones) vnodeI[999]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[999];
 }
if (cwI[1000]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1000]) nones=1; else nzeros=1; // count the original value
if (responseI[512488]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1000]=0;
	else	if (nzeros<nones) vnodeI[1000]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1000];
 }
if (cwI[1001]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1001]) nones=1; else nzeros=1; // count the original value
if (responseI[513001]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1001]=0;
	else	if (nzeros<nones) vnodeI[1001]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1001];
 }
if (cwI[1002]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1002]) nones=1; else nzeros=1; // count the original value
if (responseI[513514]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1002]=0;
	else	if (nzeros<nones) vnodeI[1002]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1002];
 }
if (cwI[1003]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1003]) nones=1; else nzeros=1; // count the original value
if (responseI[514027]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1003]=0;
	else	if (nzeros<nones) vnodeI[1003]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1003];
 }
if (cwI[1004]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1004]) nones=1; else nzeros=1; // count the original value
if (responseI[514540]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1004]=0;
	else	if (nzeros<nones) vnodeI[1004]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1004];
 }
if (cwI[1005]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1005]) nones=1; else nzeros=1; // count the original value
if (responseI[515053]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1005]=0;
	else	if (nzeros<nones) vnodeI[1005]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1005];
 }
if (cwI[1006]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1006]) nones=1; else nzeros=1; // count the original value
if (responseI[515566]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1006]=0;
	else	if (nzeros<nones) vnodeI[1006]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1006];
 }
if (cwI[1007]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1007]) nones=1; else nzeros=1; // count the original value
if (responseI[516079]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1007]=0;
	else	if (nzeros<nones) vnodeI[1007]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1007];
 }
if (cwI[1008]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1008]) nones=1; else nzeros=1; // count the original value
if (responseI[516592]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1008]=0;
	else	if (nzeros<nones) vnodeI[1008]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1008];
 }
if (cwI[1009]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1009]) nones=1; else nzeros=1; // count the original value
if (responseI[517105]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1009]=0;
	else	if (nzeros<nones) vnodeI[1009]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1009];
 }
if (cwI[1010]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1010]) nones=1; else nzeros=1; // count the original value
if (responseI[517618]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1010]=0;
	else	if (nzeros<nones) vnodeI[1010]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1010];
 }
if (cwI[1011]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1011]) nones=1; else nzeros=1; // count the original value
if (responseI[518131]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1011]=0;
	else	if (nzeros<nones) vnodeI[1011]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1011];
 }
if (cwI[1012]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1012]) nones=1; else nzeros=1; // count the original value
if (responseI[518644]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1012]=0;
	else	if (nzeros<nones) vnodeI[1012]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1012];
 }
if (cwI[1013]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1013]) nones=1; else nzeros=1; // count the original value
if (responseI[519157]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1013]=0;
	else	if (nzeros<nones) vnodeI[1013]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1013];
 }
if (cwI[1014]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1014]) nones=1; else nzeros=1; // count the original value
if (responseI[519670]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1014]=0;
	else	if (nzeros<nones) vnodeI[1014]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1014];
 }
if (cwI[1015]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1015]) nones=1; else nzeros=1; // count the original value
if (responseI[520183]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1015]=0;
	else	if (nzeros<nones) vnodeI[1015]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1015];
 }
if (cwI[1016]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1016]) nones=1; else nzeros=1; // count the original value
if (responseI[520696]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1016]=0;
	else	if (nzeros<nones) vnodeI[1016]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1016];
 }
if (cwI[1017]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1017]) nones=1; else nzeros=1; // count the original value
if (responseI[521209]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1017]=0;
	else	if (nzeros<nones) vnodeI[1017]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1017];
 }
if (cwI[1018]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1018]) nones=1; else nzeros=1; // count the original value
if (responseI[521722]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1018]=0;
	else	if (nzeros<nones) vnodeI[1018]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1018];
 }
if (cwI[1019]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1019]) nones=1; else nzeros=1; // count the original value
if (responseI[522235]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1019]=0;
	else	if (nzeros<nones) vnodeI[1019]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1019];
 }
if (cwI[1020]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1020]) nones=1; else nzeros=1; // count the original value
if (responseI[522748]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1020]=0;
	else	if (nzeros<nones) vnodeI[1020]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1020];
 }
if (cwI[1021]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1021]) nones=1; else nzeros=1; // count the original value
if (responseI[523261]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1021]=0;
	else	if (nzeros<nones) vnodeI[1021]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1021];
 }
if (cwI[1022]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1022]) nones=1; else nzeros=1; // count the original value
if (responseI[523774]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1022]=0;
	else	if (nzeros<nones) vnodeI[1022]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1022];
 }
if (cwI[1023]!=0) { // assymetric
nzeros = 0;nones=0;
if (vnodeI[1023]) nones=1; else nzeros=1; // count the original value
if (responseI[524287]) nones++;
else nzeros++;
if (nzeros>nones) vnodeI[1023]=0;
	else	if (nzeros<nones) vnodeI[1023]=1;
	else	if (r>3) vnodeI[i]=1-vnodeI[1023];
 }
parityerrors=0;parity=0;
parity=0;
parity+=vnodeI[336];
parity+=vnodeI[482];
parity+=vnodeI[496];
parity+=vnodeI[512];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163328]=parity;
if (cwI[319]==0) responseI[163328]=0; //assymetric
if (responseI[163328] != vnodeI[319]) parityerrors++;
parity=0;
parity+=vnodeI[319];
parity+=vnodeI[482];
parity+=vnodeI[496];
parity+=vnodeI[512];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172032]=parity;
if (cwI[336]==0) responseI[172032]=0; //assymetric
if (responseI[172032] != vnodeI[336]) parityerrors++;
parity=0;
parity+=vnodeI[319];
parity+=vnodeI[336];
parity+=vnodeI[496];
parity+=vnodeI[512];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246784]=parity;
if (cwI[482]==0) responseI[246784]=0; //assymetric
if (responseI[246784] != vnodeI[482]) parityerrors++;
parity=0;
parity+=vnodeI[319];
parity+=vnodeI[336];
parity+=vnodeI[482];
parity+=vnodeI[512];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253952]=parity;
if (cwI[496]==0) responseI[253952]=0; //assymetric
if (responseI[253952] != vnodeI[496]) parityerrors++;
parity=0;
parity+=vnodeI[319];
parity+=vnodeI[336];
parity+=vnodeI[482];
parity+=vnodeI[496];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[262144]=parity;
if (cwI[512]==0) responseI[262144]=0; //assymetric
if (responseI[262144] != vnodeI[512]) parityerrors++;
parity=0;
parity+=vnodeI[182];
parity+=vnodeI[349];
parity+=vnodeI[480];
parity+=vnodeI[513];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83969]=parity;
if (cwI[164]==0) responseI[83969]=0; //assymetric
if (responseI[83969] != vnodeI[164]) parityerrors++;
parity=0;
parity+=vnodeI[164];
parity+=vnodeI[349];
parity+=vnodeI[480];
parity+=vnodeI[513];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93185]=parity;
if (cwI[182]==0) responseI[93185]=0; //assymetric
if (responseI[93185] != vnodeI[182]) parityerrors++;
parity=0;
parity+=vnodeI[164];
parity+=vnodeI[182];
parity+=vnodeI[480];
parity+=vnodeI[513];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178689]=parity;
if (cwI[349]==0) responseI[178689]=0; //assymetric
if (responseI[178689] != vnodeI[349]) parityerrors++;
parity=0;
parity+=vnodeI[164];
parity+=vnodeI[182];
parity+=vnodeI[349];
parity+=vnodeI[513];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245761]=parity;
if (cwI[480]==0) responseI[245761]=0; //assymetric
if (responseI[245761] != vnodeI[480]) parityerrors++;
parity=0;
parity+=vnodeI[164];
parity+=vnodeI[182];
parity+=vnodeI[349];
parity+=vnodeI[480];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[262657]=parity;
if (cwI[513]==0) responseI[262657]=0; //assymetric
if (responseI[262657] != vnodeI[513]) parityerrors++;
parity=0;
parity+=vnodeI[342];
parity+=vnodeI[443];
parity+=vnodeI[496];
parity+=vnodeI[514];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31746]=parity;
if (cwI[62]==0) responseI[31746]=0; //assymetric
if (responseI[31746] != vnodeI[62]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[443];
parity+=vnodeI[496];
parity+=vnodeI[514];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175106]=parity;
if (cwI[342]==0) responseI[175106]=0; //assymetric
if (responseI[175106] != vnodeI[342]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[342];
parity+=vnodeI[496];
parity+=vnodeI[514];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226818]=parity;
if (cwI[443]==0) responseI[226818]=0; //assymetric
if (responseI[226818] != vnodeI[443]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[342];
parity+=vnodeI[443];
parity+=vnodeI[514];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253954]=parity;
if (cwI[496]==0) responseI[253954]=0; //assymetric
if (responseI[253954] != vnodeI[496]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[342];
parity+=vnodeI[443];
parity+=vnodeI[496];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[263170]=parity;
if (cwI[514]==0) responseI[263170]=0; //assymetric
if (responseI[263170] != vnodeI[514]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[387];
parity+=vnodeI[487];
parity+=vnodeI[515];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15363]=parity;
if (cwI[30]==0) responseI[15363]=0; //assymetric
if (responseI[15363] != vnodeI[30]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[387];
parity+=vnodeI[487];
parity+=vnodeI[515];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[101379]=parity;
if (cwI[198]==0) responseI[101379]=0; //assymetric
if (responseI[101379] != vnodeI[198]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[198];
parity+=vnodeI[487];
parity+=vnodeI[515];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198147]=parity;
if (cwI[387]==0) responseI[198147]=0; //assymetric
if (responseI[198147] != vnodeI[387]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[198];
parity+=vnodeI[387];
parity+=vnodeI[515];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249347]=parity;
if (cwI[487]==0) responseI[249347]=0; //assymetric
if (responseI[249347] != vnodeI[487]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[198];
parity+=vnodeI[387];
parity+=vnodeI[487];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[263683]=parity;
if (cwI[515]==0) responseI[263683]=0; //assymetric
if (responseI[263683] != vnodeI[515]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[210];
parity+=vnodeI[406];
parity+=vnodeI[516];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93700]=parity;
if (cwI[183]==0) responseI[93700]=0; //assymetric
if (responseI[93700] != vnodeI[183]) parityerrors++;
parity=0;
parity+=vnodeI[183];
parity+=vnodeI[210];
parity+=vnodeI[406];
parity+=vnodeI[516];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103940]=parity;
if (cwI[203]==0) responseI[103940]=0; //assymetric
if (responseI[103940] != vnodeI[203]) parityerrors++;
parity=0;
parity+=vnodeI[183];
parity+=vnodeI[203];
parity+=vnodeI[406];
parity+=vnodeI[516];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107524]=parity;
if (cwI[210]==0) responseI[107524]=0; //assymetric
if (responseI[107524] != vnodeI[210]) parityerrors++;
parity=0;
parity+=vnodeI[183];
parity+=vnodeI[203];
parity+=vnodeI[210];
parity+=vnodeI[516];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207876]=parity;
if (cwI[406]==0) responseI[207876]=0; //assymetric
if (responseI[207876] != vnodeI[406]) parityerrors++;
parity=0;
parity+=vnodeI[183];
parity+=vnodeI[203];
parity+=vnodeI[210];
parity+=vnodeI[406];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[264196]=parity;
if (cwI[516]==0) responseI[264196]=0; //assymetric
if (responseI[264196] != vnodeI[516]) parityerrors++;
parity=0;
parity+=vnodeI[175];
parity+=vnodeI[370];
parity+=vnodeI[511];
parity+=vnodeI[517];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30725]=parity;
if (cwI[60]==0) responseI[30725]=0; //assymetric
if (responseI[30725] != vnodeI[60]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[370];
parity+=vnodeI[511];
parity+=vnodeI[517];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89605]=parity;
if (cwI[175]==0) responseI[89605]=0; //assymetric
if (responseI[89605] != vnodeI[175]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[175];
parity+=vnodeI[511];
parity+=vnodeI[517];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[189445]=parity;
if (cwI[370]==0) responseI[189445]=0; //assymetric
if (responseI[189445] != vnodeI[370]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[175];
parity+=vnodeI[370];
parity+=vnodeI[517];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261637]=parity;
if (cwI[511]==0) responseI[261637]=0; //assymetric
if (responseI[261637] != vnodeI[511]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[175];
parity+=vnodeI[370];
parity+=vnodeI[511];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[264709]=parity;
if (cwI[517]==0) responseI[264709]=0; //assymetric
if (responseI[264709] != vnodeI[517]) parityerrors++;
parity=0;
parity+=vnodeI[308];
parity+=vnodeI[472];
parity+=vnodeI[491];
parity+=vnodeI[518];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110598]=parity;
if (cwI[216]==0) responseI[110598]=0; //assymetric
if (responseI[110598] != vnodeI[216]) parityerrors++;
parity=0;
parity+=vnodeI[216];
parity+=vnodeI[472];
parity+=vnodeI[491];
parity+=vnodeI[518];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157702]=parity;
if (cwI[308]==0) responseI[157702]=0; //assymetric
if (responseI[157702] != vnodeI[308]) parityerrors++;
parity=0;
parity+=vnodeI[216];
parity+=vnodeI[308];
parity+=vnodeI[491];
parity+=vnodeI[518];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241670]=parity;
if (cwI[472]==0) responseI[241670]=0; //assymetric
if (responseI[241670] != vnodeI[472]) parityerrors++;
parity=0;
parity+=vnodeI[216];
parity+=vnodeI[308];
parity+=vnodeI[472];
parity+=vnodeI[518];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251398]=parity;
if (cwI[491]==0) responseI[251398]=0; //assymetric
if (responseI[251398] != vnodeI[491]) parityerrors++;
parity=0;
parity+=vnodeI[216];
parity+=vnodeI[308];
parity+=vnodeI[472];
parity+=vnodeI[491];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[265222]=parity;
if (cwI[518]==0) responseI[265222]=0; //assymetric
if (responseI[265222] != vnodeI[518]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[243];
parity+=vnodeI[413];
parity+=vnodeI[519];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[72199]=parity;
if (cwI[141]==0) responseI[72199]=0; //assymetric
if (responseI[72199] != vnodeI[141]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[243];
parity+=vnodeI[413];
parity+=vnodeI[519];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77319]=parity;
if (cwI[151]==0) responseI[77319]=0; //assymetric
if (responseI[77319] != vnodeI[151]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[151];
parity+=vnodeI[413];
parity+=vnodeI[519];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124423]=parity;
if (cwI[243]==0) responseI[124423]=0; //assymetric
if (responseI[124423] != vnodeI[243]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[151];
parity+=vnodeI[243];
parity+=vnodeI[519];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211463]=parity;
if (cwI[413]==0) responseI[211463]=0; //assymetric
if (responseI[211463] != vnodeI[413]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[151];
parity+=vnodeI[243];
parity+=vnodeI[413];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[265735]=parity;
if (cwI[519]==0) responseI[265735]=0; //assymetric
if (responseI[265735] != vnodeI[519]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[281];
parity+=vnodeI[346];
parity+=vnodeI[520];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15368]=parity;
if (cwI[30]==0) responseI[15368]=0; //assymetric
if (responseI[15368] != vnodeI[30]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[281];
parity+=vnodeI[346];
parity+=vnodeI[520];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60936]=parity;
if (cwI[119]==0) responseI[60936]=0; //assymetric
if (responseI[60936] != vnodeI[119]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[119];
parity+=vnodeI[346];
parity+=vnodeI[520];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143880]=parity;
if (cwI[281]==0) responseI[143880]=0; //assymetric
if (responseI[143880] != vnodeI[281]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[119];
parity+=vnodeI[281];
parity+=vnodeI[520];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177160]=parity;
if (cwI[346]==0) responseI[177160]=0; //assymetric
if (responseI[177160] != vnodeI[346]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[119];
parity+=vnodeI[281];
parity+=vnodeI[346];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[266248]=parity;
if (cwI[520]==0) responseI[266248]=0; //assymetric
if (responseI[266248] != vnodeI[520]) parityerrors++;
parity=0;
parity+=vnodeI[321];
parity+=vnodeI[354];
parity+=vnodeI[438];
parity+=vnodeI[521];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134153]=parity;
if (cwI[262]==0) responseI[134153]=0; //assymetric
if (responseI[134153] != vnodeI[262]) parityerrors++;
parity=0;
parity+=vnodeI[262];
parity+=vnodeI[354];
parity+=vnodeI[438];
parity+=vnodeI[521];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164361]=parity;
if (cwI[321]==0) responseI[164361]=0; //assymetric
if (responseI[164361] != vnodeI[321]) parityerrors++;
parity=0;
parity+=vnodeI[262];
parity+=vnodeI[321];
parity+=vnodeI[438];
parity+=vnodeI[521];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181257]=parity;
if (cwI[354]==0) responseI[181257]=0; //assymetric
if (responseI[181257] != vnodeI[354]) parityerrors++;
parity=0;
parity+=vnodeI[262];
parity+=vnodeI[321];
parity+=vnodeI[354];
parity+=vnodeI[521];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[224265]=parity;
if (cwI[438]==0) responseI[224265]=0; //assymetric
if (responseI[224265] != vnodeI[438]) parityerrors++;
parity=0;
parity+=vnodeI[262];
parity+=vnodeI[321];
parity+=vnodeI[354];
parity+=vnodeI[438];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[266761]=parity;
if (cwI[521]==0) responseI[266761]=0; //assymetric
if (responseI[266761] != vnodeI[521]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[406];
parity+=vnodeI[416];
parity+=vnodeI[522];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2570]=parity;
if (cwI[5]==0) responseI[2570]=0; //assymetric
if (responseI[2570] != vnodeI[5]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[406];
parity+=vnodeI[416];
parity+=vnodeI[522];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65034]=parity;
if (cwI[127]==0) responseI[65034]=0; //assymetric
if (responseI[65034] != vnodeI[127]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[127];
parity+=vnodeI[416];
parity+=vnodeI[522];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207882]=parity;
if (cwI[406]==0) responseI[207882]=0; //assymetric
if (responseI[207882] != vnodeI[406]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[127];
parity+=vnodeI[406];
parity+=vnodeI[522];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213002]=parity;
if (cwI[416]==0) responseI[213002]=0; //assymetric
if (responseI[213002] != vnodeI[416]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[127];
parity+=vnodeI[406];
parity+=vnodeI[416];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[267274]=parity;
if (cwI[522]==0) responseI[267274]=0; //assymetric
if (responseI[267274] != vnodeI[522]) parityerrors++;
parity=0;
parity+=vnodeI[69];
parity+=vnodeI[414];
parity+=vnodeI[459];
parity+=vnodeI[523];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14347]=parity;
if (cwI[28]==0) responseI[14347]=0; //assymetric
if (responseI[14347] != vnodeI[28]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[414];
parity+=vnodeI[459];
parity+=vnodeI[523];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[35339]=parity;
if (cwI[69]==0) responseI[35339]=0; //assymetric
if (responseI[35339] != vnodeI[69]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[69];
parity+=vnodeI[459];
parity+=vnodeI[523];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211979]=parity;
if (cwI[414]==0) responseI[211979]=0; //assymetric
if (responseI[211979] != vnodeI[414]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[69];
parity+=vnodeI[414];
parity+=vnodeI[523];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235019]=parity;
if (cwI[459]==0) responseI[235019]=0; //assymetric
if (responseI[235019] != vnodeI[459]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[69];
parity+=vnodeI[414];
parity+=vnodeI[459];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[267787]=parity;
if (cwI[523]==0) responseI[267787]=0; //assymetric
if (responseI[267787] != vnodeI[523]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[352];
parity+=vnodeI[480];
parity+=vnodeI[524];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73740]=parity;
if (cwI[144]==0) responseI[73740]=0; //assymetric
if (responseI[73740] != vnodeI[144]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[352];
parity+=vnodeI[480];
parity+=vnodeI[524];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94220]=parity;
if (cwI[184]==0) responseI[94220]=0; //assymetric
if (responseI[94220] != vnodeI[184]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[184];
parity+=vnodeI[480];
parity+=vnodeI[524];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180236]=parity;
if (cwI[352]==0) responseI[180236]=0; //assymetric
if (responseI[180236] != vnodeI[352]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[184];
parity+=vnodeI[352];
parity+=vnodeI[524];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245772]=parity;
if (cwI[480]==0) responseI[245772]=0; //assymetric
if (responseI[245772] != vnodeI[480]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[184];
parity+=vnodeI[352];
parity+=vnodeI[480];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[268300]=parity;
if (cwI[524]==0) responseI[268300]=0; //assymetric
if (responseI[268300] != vnodeI[524]) parityerrors++;
parity=0;
parity+=vnodeI[194];
parity+=vnodeI[271];
parity+=vnodeI[457];
parity+=vnodeI[525];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80909]=parity;
if (cwI[158]==0) responseI[80909]=0; //assymetric
if (responseI[80909] != vnodeI[158]) parityerrors++;
parity=0;
parity+=vnodeI[158];
parity+=vnodeI[271];
parity+=vnodeI[457];
parity+=vnodeI[525];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99341]=parity;
if (cwI[194]==0) responseI[99341]=0; //assymetric
if (responseI[99341] != vnodeI[194]) parityerrors++;
parity=0;
parity+=vnodeI[158];
parity+=vnodeI[194];
parity+=vnodeI[457];
parity+=vnodeI[525];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138765]=parity;
if (cwI[271]==0) responseI[138765]=0; //assymetric
if (responseI[138765] != vnodeI[271]) parityerrors++;
parity=0;
parity+=vnodeI[158];
parity+=vnodeI[194];
parity+=vnodeI[271];
parity+=vnodeI[525];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233997]=parity;
if (cwI[457]==0) responseI[233997]=0; //assymetric
if (responseI[233997] != vnodeI[457]) parityerrors++;
parity=0;
parity+=vnodeI[158];
parity+=vnodeI[194];
parity+=vnodeI[271];
parity+=vnodeI[457];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[268813]=parity;
if (cwI[525]==0) responseI[268813]=0; //assymetric
if (responseI[268813] != vnodeI[525]) parityerrors++;
parity=0;
parity+=vnodeI[446];
parity+=vnodeI[448];
parity+=vnodeI[491];
parity+=vnodeI[526];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223758]=parity;
if (cwI[437]==0) responseI[223758]=0; //assymetric
if (responseI[223758] != vnodeI[437]) parityerrors++;
parity=0;
parity+=vnodeI[437];
parity+=vnodeI[448];
parity+=vnodeI[491];
parity+=vnodeI[526];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228366]=parity;
if (cwI[446]==0) responseI[228366]=0; //assymetric
if (responseI[228366] != vnodeI[446]) parityerrors++;
parity=0;
parity+=vnodeI[437];
parity+=vnodeI[446];
parity+=vnodeI[491];
parity+=vnodeI[526];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229390]=parity;
if (cwI[448]==0) responseI[229390]=0; //assymetric
if (responseI[229390] != vnodeI[448]) parityerrors++;
parity=0;
parity+=vnodeI[437];
parity+=vnodeI[446];
parity+=vnodeI[448];
parity+=vnodeI[526];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251406]=parity;
if (cwI[491]==0) responseI[251406]=0; //assymetric
if (responseI[251406] != vnodeI[491]) parityerrors++;
parity=0;
parity+=vnodeI[437];
parity+=vnodeI[446];
parity+=vnodeI[448];
parity+=vnodeI[491];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[269326]=parity;
if (cwI[526]==0) responseI[269326]=0; //assymetric
if (responseI[269326] != vnodeI[526]) parityerrors++;
parity=0;
parity+=vnodeI[445];
parity+=vnodeI[448];
parity+=vnodeI[527];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125455]=parity;
if (cwI[245]==0) responseI[125455]=0; //assymetric
if (responseI[125455] != vnodeI[245]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[448];
parity+=vnodeI[527];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[227855]=parity;
if (cwI[445]==0) responseI[227855]=0; //assymetric
if (responseI[227855] != vnodeI[445]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[445];
parity+=vnodeI[527];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229391]=parity;
if (cwI[448]==0) responseI[229391]=0; //assymetric
if (responseI[229391] != vnodeI[448]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[445];
parity+=vnodeI[448];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[269839]=parity;
if (cwI[527]==0) responseI[269839]=0; //assymetric
if (responseI[269839] != vnodeI[527]) parityerrors++;
parity=0;
parity+=vnodeI[381];
parity+=vnodeI[428];
parity+=vnodeI[444];
parity+=vnodeI[528];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15376]=parity;
if (cwI[30]==0) responseI[15376]=0; //assymetric
if (responseI[15376] != vnodeI[30]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[428];
parity+=vnodeI[444];
parity+=vnodeI[528];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[195088]=parity;
if (cwI[381]==0) responseI[195088]=0; //assymetric
if (responseI[195088] != vnodeI[381]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[381];
parity+=vnodeI[444];
parity+=vnodeI[528];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[219152]=parity;
if (cwI[428]==0) responseI[219152]=0; //assymetric
if (responseI[219152] != vnodeI[428]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[381];
parity+=vnodeI[428];
parity+=vnodeI[528];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[227344]=parity;
if (cwI[444]==0) responseI[227344]=0; //assymetric
if (responseI[227344] != vnodeI[444]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[381];
parity+=vnodeI[428];
parity+=vnodeI[444];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[270352]=parity;
if (cwI[528]==0) responseI[270352]=0; //assymetric
if (responseI[270352] != vnodeI[528]) parityerrors++;
parity=0;
parity+=vnodeI[219];
parity+=vnodeI[488];
parity+=vnodeI[493];
parity+=vnodeI[529];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89617]=parity;
if (cwI[175]==0) responseI[89617]=0; //assymetric
if (responseI[89617] != vnodeI[175]) parityerrors++;
parity=0;
parity+=vnodeI[175];
parity+=vnodeI[488];
parity+=vnodeI[493];
parity+=vnodeI[529];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112145]=parity;
if (cwI[219]==0) responseI[112145]=0; //assymetric
if (responseI[112145] != vnodeI[219]) parityerrors++;
parity=0;
parity+=vnodeI[175];
parity+=vnodeI[219];
parity+=vnodeI[493];
parity+=vnodeI[529];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249873]=parity;
if (cwI[488]==0) responseI[249873]=0; //assymetric
if (responseI[249873] != vnodeI[488]) parityerrors++;
parity=0;
parity+=vnodeI[175];
parity+=vnodeI[219];
parity+=vnodeI[488];
parity+=vnodeI[529];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252433]=parity;
if (cwI[493]==0) responseI[252433]=0; //assymetric
if (responseI[252433] != vnodeI[493]) parityerrors++;
parity=0;
parity+=vnodeI[175];
parity+=vnodeI[219];
parity+=vnodeI[488];
parity+=vnodeI[493];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[270865]=parity;
if (cwI[529]==0) responseI[270865]=0; //assymetric
if (responseI[270865] != vnodeI[529]) parityerrors++;
parity=0;
parity+=vnodeI[352];
parity+=vnodeI[392];
parity+=vnodeI[398];
parity+=vnodeI[530];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125458]=parity;
if (cwI[245]==0) responseI[125458]=0; //assymetric
if (responseI[125458] != vnodeI[245]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[392];
parity+=vnodeI[398];
parity+=vnodeI[530];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180242]=parity;
if (cwI[352]==0) responseI[180242]=0; //assymetric
if (responseI[180242] != vnodeI[352]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[352];
parity+=vnodeI[398];
parity+=vnodeI[530];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200722]=parity;
if (cwI[392]==0) responseI[200722]=0; //assymetric
if (responseI[200722] != vnodeI[392]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[352];
parity+=vnodeI[392];
parity+=vnodeI[530];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203794]=parity;
if (cwI[398]==0) responseI[203794]=0; //assymetric
if (responseI[203794] != vnodeI[398]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[352];
parity+=vnodeI[392];
parity+=vnodeI[398];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[271378]=parity;
if (cwI[530]==0) responseI[271378]=0; //assymetric
if (responseI[271378] != vnodeI[530]) parityerrors++;
parity=0;
parity+=vnodeI[300];
parity+=vnodeI[380];
parity+=vnodeI[509];
parity+=vnodeI[531];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77331]=parity;
if (cwI[151]==0) responseI[77331]=0; //assymetric
if (responseI[77331] != vnodeI[151]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[380];
parity+=vnodeI[509];
parity+=vnodeI[531];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153619]=parity;
if (cwI[300]==0) responseI[153619]=0; //assymetric
if (responseI[153619] != vnodeI[300]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[300];
parity+=vnodeI[509];
parity+=vnodeI[531];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194579]=parity;
if (cwI[380]==0) responseI[194579]=0; //assymetric
if (responseI[194579] != vnodeI[380]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[300];
parity+=vnodeI[380];
parity+=vnodeI[531];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260627]=parity;
if (cwI[509]==0) responseI[260627]=0; //assymetric
if (responseI[260627] != vnodeI[509]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[300];
parity+=vnodeI[380];
parity+=vnodeI[509];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[271891]=parity;
if (cwI[531]==0) responseI[271891]=0; //assymetric
if (responseI[271891] != vnodeI[531]) parityerrors++;
parity=0;
parity+=vnodeI[386];
parity+=vnodeI[399];
parity+=vnodeI[463];
parity+=vnodeI[532];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103956]=parity;
if (cwI[203]==0) responseI[103956]=0; //assymetric
if (responseI[103956] != vnodeI[203]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[399];
parity+=vnodeI[463];
parity+=vnodeI[532];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197652]=parity;
if (cwI[386]==0) responseI[197652]=0; //assymetric
if (responseI[197652] != vnodeI[386]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[386];
parity+=vnodeI[463];
parity+=vnodeI[532];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204308]=parity;
if (cwI[399]==0) responseI[204308]=0; //assymetric
if (responseI[204308] != vnodeI[399]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[386];
parity+=vnodeI[399];
parity+=vnodeI[532];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[237076]=parity;
if (cwI[463]==0) responseI[237076]=0; //assymetric
if (responseI[237076] != vnodeI[463]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[386];
parity+=vnodeI[399];
parity+=vnodeI[463];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[272404]=parity;
if (cwI[532]==0) responseI[272404]=0; //assymetric
if (responseI[272404] != vnodeI[532]) parityerrors++;
parity=0;
parity+=vnodeI[201];
parity+=vnodeI[448];
parity+=vnodeI[487];
parity+=vnodeI[533];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27157]=parity;
if (cwI[53]==0) responseI[27157]=0; //assymetric
if (responseI[27157] != vnodeI[53]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[448];
parity+=vnodeI[487];
parity+=vnodeI[533];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102933]=parity;
if (cwI[201]==0) responseI[102933]=0; //assymetric
if (responseI[102933] != vnodeI[201]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[201];
parity+=vnodeI[487];
parity+=vnodeI[533];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229397]=parity;
if (cwI[448]==0) responseI[229397]=0; //assymetric
if (responseI[229397] != vnodeI[448]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[201];
parity+=vnodeI[448];
parity+=vnodeI[533];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249365]=parity;
if (cwI[487]==0) responseI[249365]=0; //assymetric
if (responseI[249365] != vnodeI[487]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[201];
parity+=vnodeI[448];
parity+=vnodeI[487];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[272917]=parity;
if (cwI[533]==0) responseI[272917]=0; //assymetric
if (responseI[272917] != vnodeI[533]) parityerrors++;
parity=0;
parity+=vnodeI[424];
parity+=vnodeI[495];
parity+=vnodeI[497];
parity+=vnodeI[534];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109078]=parity;
if (cwI[213]==0) responseI[109078]=0; //assymetric
if (responseI[109078] != vnodeI[213]) parityerrors++;
parity=0;
parity+=vnodeI[213];
parity+=vnodeI[495];
parity+=vnodeI[497];
parity+=vnodeI[534];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217110]=parity;
if (cwI[424]==0) responseI[217110]=0; //assymetric
if (responseI[217110] != vnodeI[424]) parityerrors++;
parity=0;
parity+=vnodeI[213];
parity+=vnodeI[424];
parity+=vnodeI[497];
parity+=vnodeI[534];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253462]=parity;
if (cwI[495]==0) responseI[253462]=0; //assymetric
if (responseI[253462] != vnodeI[495]) parityerrors++;
parity=0;
parity+=vnodeI[213];
parity+=vnodeI[424];
parity+=vnodeI[495];
parity+=vnodeI[534];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[254486]=parity;
if (cwI[497]==0) responseI[254486]=0; //assymetric
if (responseI[254486] != vnodeI[497]) parityerrors++;
parity=0;
parity+=vnodeI[213];
parity+=vnodeI[424];
parity+=vnodeI[495];
parity+=vnodeI[497];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[273430]=parity;
if (cwI[534]==0) responseI[273430]=0; //assymetric
if (responseI[273430] != vnodeI[534]) parityerrors++;
parity=0;
parity+=vnodeI[471];
parity+=vnodeI[505];
parity+=vnodeI[535];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22551]=parity;
if (cwI[44]==0) responseI[22551]=0; //assymetric
if (responseI[22551] != vnodeI[44]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[505];
parity+=vnodeI[535];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241175]=parity;
if (cwI[471]==0) responseI[241175]=0; //assymetric
if (responseI[241175] != vnodeI[471]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[471];
parity+=vnodeI[535];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258583]=parity;
if (cwI[505]==0) responseI[258583]=0; //assymetric
if (responseI[258583] != vnodeI[505]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[471];
parity+=vnodeI[505];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[273943]=parity;
if (cwI[535]==0) responseI[273943]=0; //assymetric
if (responseI[273943] != vnodeI[535]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[135];
parity+=vnodeI[428];
parity+=vnodeI[536];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39448]=parity;
if (cwI[77]==0) responseI[39448]=0; //assymetric
if (responseI[39448] != vnodeI[77]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[135];
parity+=vnodeI[428];
parity+=vnodeI[536];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48664]=parity;
if (cwI[95]==0) responseI[48664]=0; //assymetric
if (responseI[48664] != vnodeI[95]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[95];
parity+=vnodeI[428];
parity+=vnodeI[536];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[69144]=parity;
if (cwI[135]==0) responseI[69144]=0; //assymetric
if (responseI[69144] != vnodeI[135]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[95];
parity+=vnodeI[135];
parity+=vnodeI[536];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[219160]=parity;
if (cwI[428]==0) responseI[219160]=0; //assymetric
if (responseI[219160] != vnodeI[428]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[95];
parity+=vnodeI[135];
parity+=vnodeI[428];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[274456]=parity;
if (cwI[536]==0) responseI[274456]=0; //assymetric
if (responseI[274456] != vnodeI[536]) parityerrors++;
parity=0;
parity+=vnodeI[296];
parity+=vnodeI[462];
parity+=vnodeI[493];
parity+=vnodeI[509];
parity+=vnodeI[537];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117785]=parity;
if (cwI[230]==0) responseI[117785]=0; //assymetric
if (responseI[117785] != vnodeI[230]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[462];
parity+=vnodeI[493];
parity+=vnodeI[509];
parity+=vnodeI[537];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151577]=parity;
if (cwI[296]==0) responseI[151577]=0; //assymetric
if (responseI[151577] != vnodeI[296]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[296];
parity+=vnodeI[493];
parity+=vnodeI[509];
parity+=vnodeI[537];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236569]=parity;
if (cwI[462]==0) responseI[236569]=0; //assymetric
if (responseI[236569] != vnodeI[462]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[296];
parity+=vnodeI[462];
parity+=vnodeI[509];
parity+=vnodeI[537];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252441]=parity;
if (cwI[493]==0) responseI[252441]=0; //assymetric
if (responseI[252441] != vnodeI[493]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[296];
parity+=vnodeI[462];
parity+=vnodeI[493];
parity+=vnodeI[537];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260633]=parity;
if (cwI[509]==0) responseI[260633]=0; //assymetric
if (responseI[260633] != vnodeI[509]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[296];
parity+=vnodeI[462];
parity+=vnodeI[493];
parity+=vnodeI[509];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[274969]=parity;
if (cwI[537]==0) responseI[274969]=0; //assymetric
if (responseI[274969] != vnodeI[537]) parityerrors++;
parity=0;
parity+=vnodeI[340];
parity+=vnodeI[437];
parity+=vnodeI[467];
parity+=vnodeI[538];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136218]=parity;
if (cwI[266]==0) responseI[136218]=0; //assymetric
if (responseI[136218] != vnodeI[266]) parityerrors++;
parity=0;
parity+=vnodeI[266];
parity+=vnodeI[437];
parity+=vnodeI[467];
parity+=vnodeI[538];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174106]=parity;
if (cwI[340]==0) responseI[174106]=0; //assymetric
if (responseI[174106] != vnodeI[340]) parityerrors++;
parity=0;
parity+=vnodeI[266];
parity+=vnodeI[340];
parity+=vnodeI[467];
parity+=vnodeI[538];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223770]=parity;
if (cwI[437]==0) responseI[223770]=0; //assymetric
if (responseI[223770] != vnodeI[437]) parityerrors++;
parity=0;
parity+=vnodeI[266];
parity+=vnodeI[340];
parity+=vnodeI[437];
parity+=vnodeI[538];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239130]=parity;
if (cwI[467]==0) responseI[239130]=0; //assymetric
if (responseI[239130] != vnodeI[467]) parityerrors++;
parity=0;
parity+=vnodeI[266];
parity+=vnodeI[340];
parity+=vnodeI[437];
parity+=vnodeI[467];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[275482]=parity;
if (cwI[538]==0) responseI[275482]=0; //assymetric
if (responseI[275482] != vnodeI[538]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[327];
parity+=vnodeI[421];
parity+=vnodeI[539];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75291]=parity;
if (cwI[147]==0) responseI[75291]=0; //assymetric
if (responseI[75291] != vnodeI[147]) parityerrors++;
parity=0;
parity+=vnodeI[147];
parity+=vnodeI[327];
parity+=vnodeI[421];
parity+=vnodeI[539];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111643]=parity;
if (cwI[218]==0) responseI[111643]=0; //assymetric
if (responseI[111643] != vnodeI[218]) parityerrors++;
parity=0;
parity+=vnodeI[147];
parity+=vnodeI[218];
parity+=vnodeI[421];
parity+=vnodeI[539];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167451]=parity;
if (cwI[327]==0) responseI[167451]=0; //assymetric
if (responseI[167451] != vnodeI[327]) parityerrors++;
parity=0;
parity+=vnodeI[147];
parity+=vnodeI[218];
parity+=vnodeI[327];
parity+=vnodeI[539];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215579]=parity;
if (cwI[421]==0) responseI[215579]=0; //assymetric
if (responseI[215579] != vnodeI[421]) parityerrors++;
parity=0;
parity+=vnodeI[147];
parity+=vnodeI[218];
parity+=vnodeI[327];
parity+=vnodeI[421];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[275995]=parity;
if (cwI[539]==0) responseI[275995]=0; //assymetric
if (responseI[275995] != vnodeI[539]) parityerrors++;
parity=0;
parity+=vnodeI[262];
parity+=vnodeI[276];
parity+=vnodeI[441];
parity+=vnodeI[540];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106524]=parity;
if (cwI[208]==0) responseI[106524]=0; //assymetric
if (responseI[106524] != vnodeI[208]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[276];
parity+=vnodeI[441];
parity+=vnodeI[540];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134172]=parity;
if (cwI[262]==0) responseI[134172]=0; //assymetric
if (responseI[134172] != vnodeI[262]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[262];
parity+=vnodeI[441];
parity+=vnodeI[540];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141340]=parity;
if (cwI[276]==0) responseI[141340]=0; //assymetric
if (responseI[141340] != vnodeI[276]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[262];
parity+=vnodeI[276];
parity+=vnodeI[540];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225820]=parity;
if (cwI[441]==0) responseI[225820]=0; //assymetric
if (responseI[225820] != vnodeI[441]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[262];
parity+=vnodeI[276];
parity+=vnodeI[441];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[276508]=parity;
if (cwI[540]==0) responseI[276508]=0; //assymetric
if (responseI[276508] != vnodeI[540]) parityerrors++;
parity=0;
parity+=vnodeI[336];
parity+=vnodeI[405];
parity+=vnodeI[412];
parity+=vnodeI[541];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[4637]=parity;
if (cwI[9]==0) responseI[4637]=0; //assymetric
if (responseI[4637] != vnodeI[9]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[405];
parity+=vnodeI[412];
parity+=vnodeI[541];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172061]=parity;
if (cwI[336]==0) responseI[172061]=0; //assymetric
if (responseI[172061] != vnodeI[336]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[336];
parity+=vnodeI[412];
parity+=vnodeI[541];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207389]=parity;
if (cwI[405]==0) responseI[207389]=0; //assymetric
if (responseI[207389] != vnodeI[405]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[336];
parity+=vnodeI[405];
parity+=vnodeI[541];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210973]=parity;
if (cwI[412]==0) responseI[210973]=0; //assymetric
if (responseI[210973] != vnodeI[412]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[336];
parity+=vnodeI[405];
parity+=vnodeI[412];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[277021]=parity;
if (cwI[541]==0) responseI[277021]=0; //assymetric
if (responseI[277021] != vnodeI[541]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[339];
parity+=vnodeI[437];
parity+=vnodeI[542];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86558]=parity;
if (cwI[169]==0) responseI[86558]=0; //assymetric
if (responseI[86558] != vnodeI[169]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[339];
parity+=vnodeI[437];
parity+=vnodeI[542];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108062]=parity;
if (cwI[211]==0) responseI[108062]=0; //assymetric
if (responseI[108062] != vnodeI[211]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[211];
parity+=vnodeI[437];
parity+=vnodeI[542];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173598]=parity;
if (cwI[339]==0) responseI[173598]=0; //assymetric
if (responseI[173598] != vnodeI[339]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[211];
parity+=vnodeI[339];
parity+=vnodeI[542];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223774]=parity;
if (cwI[437]==0) responseI[223774]=0; //assymetric
if (responseI[223774] != vnodeI[437]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[211];
parity+=vnodeI[339];
parity+=vnodeI[437];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[277534]=parity;
if (cwI[542]==0) responseI[277534]=0; //assymetric
if (responseI[277534] != vnodeI[542]) parityerrors++;
parity=0;
parity+=vnodeI[138];
parity+=vnodeI[403];
parity+=vnodeI[486];
parity+=vnodeI[543];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5663]=parity;
if (cwI[11]==0) responseI[5663]=0; //assymetric
if (responseI[5663] != vnodeI[11]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[403];
parity+=vnodeI[486];
parity+=vnodeI[543];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70687]=parity;
if (cwI[138]==0) responseI[70687]=0; //assymetric
if (responseI[70687] != vnodeI[138]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[138];
parity+=vnodeI[486];
parity+=vnodeI[543];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206367]=parity;
if (cwI[403]==0) responseI[206367]=0; //assymetric
if (responseI[206367] != vnodeI[403]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[138];
parity+=vnodeI[403];
parity+=vnodeI[543];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248863]=parity;
if (cwI[486]==0) responseI[248863]=0; //assymetric
if (responseI[248863] != vnodeI[486]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[138];
parity+=vnodeI[403];
parity+=vnodeI[486];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[278047]=parity;
if (cwI[543]==0) responseI[278047]=0; //assymetric
if (responseI[278047] != vnodeI[543]) parityerrors++;
parity=0;
parity+=vnodeI[327];
parity+=vnodeI[348];
parity+=vnodeI[416];
parity+=vnodeI[544];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[160288]=parity;
if (cwI[313]==0) responseI[160288]=0; //assymetric
if (responseI[160288] != vnodeI[313]) parityerrors++;
parity=0;
parity+=vnodeI[313];
parity+=vnodeI[348];
parity+=vnodeI[416];
parity+=vnodeI[544];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167456]=parity;
if (cwI[327]==0) responseI[167456]=0; //assymetric
if (responseI[167456] != vnodeI[327]) parityerrors++;
parity=0;
parity+=vnodeI[313];
parity+=vnodeI[327];
parity+=vnodeI[416];
parity+=vnodeI[544];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178208]=parity;
if (cwI[348]==0) responseI[178208]=0; //assymetric
if (responseI[178208] != vnodeI[348]) parityerrors++;
parity=0;
parity+=vnodeI[313];
parity+=vnodeI[327];
parity+=vnodeI[348];
parity+=vnodeI[544];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213024]=parity;
if (cwI[416]==0) responseI[213024]=0; //assymetric
if (responseI[213024] != vnodeI[416]) parityerrors++;
parity=0;
parity+=vnodeI[313];
parity+=vnodeI[327];
parity+=vnodeI[348];
parity+=vnodeI[416];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[278560]=parity;
if (cwI[544]==0) responseI[278560]=0; //assymetric
if (responseI[278560] != vnodeI[544]) parityerrors++;
parity=0;
parity+=vnodeI[420];
parity+=vnodeI[472];
parity+=vnodeI[488];
parity+=vnodeI[545];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197665]=parity;
if (cwI[386]==0) responseI[197665]=0; //assymetric
if (responseI[197665] != vnodeI[386]) parityerrors++;
parity=0;
parity+=vnodeI[386];
parity+=vnodeI[472];
parity+=vnodeI[488];
parity+=vnodeI[545];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215073]=parity;
if (cwI[420]==0) responseI[215073]=0; //assymetric
if (responseI[215073] != vnodeI[420]) parityerrors++;
parity=0;
parity+=vnodeI[386];
parity+=vnodeI[420];
parity+=vnodeI[488];
parity+=vnodeI[545];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241697]=parity;
if (cwI[472]==0) responseI[241697]=0; //assymetric
if (responseI[241697] != vnodeI[472]) parityerrors++;
parity=0;
parity+=vnodeI[386];
parity+=vnodeI[420];
parity+=vnodeI[472];
parity+=vnodeI[545];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249889]=parity;
if (cwI[488]==0) responseI[249889]=0; //assymetric
if (responseI[249889] != vnodeI[488]) parityerrors++;
parity=0;
parity+=vnodeI[386];
parity+=vnodeI[420];
parity+=vnodeI[472];
parity+=vnodeI[488];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[279073]=parity;
if (cwI[545]==0) responseI[279073]=0; //assymetric
if (responseI[279073] != vnodeI[545]) parityerrors++;
parity=0;
parity+=vnodeI[428];
parity+=vnodeI[432];
parity+=vnodeI[501];
parity+=vnodeI[546];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[101410]=parity;
if (cwI[198]==0) responseI[101410]=0; //assymetric
if (responseI[101410] != vnodeI[198]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[432];
parity+=vnodeI[501];
parity+=vnodeI[546];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[219170]=parity;
if (cwI[428]==0) responseI[219170]=0; //assymetric
if (responseI[219170] != vnodeI[428]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[428];
parity+=vnodeI[501];
parity+=vnodeI[546];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[221218]=parity;
if (cwI[432]==0) responseI[221218]=0; //assymetric
if (responseI[221218] != vnodeI[432]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[428];
parity+=vnodeI[432];
parity+=vnodeI[546];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256546]=parity;
if (cwI[501]==0) responseI[256546]=0; //assymetric
if (responseI[256546] != vnodeI[501]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[428];
parity+=vnodeI[432];
parity+=vnodeI[501];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[279586]=parity;
if (cwI[546]==0) responseI[279586]=0; //assymetric
if (responseI[279586] != vnodeI[546]) parityerrors++;
parity=0;
parity+=vnodeI[368];
parity+=vnodeI[498];
parity+=vnodeI[509];
parity+=vnodeI[547];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108067]=parity;
if (cwI[211]==0) responseI[108067]=0; //assymetric
if (responseI[108067] != vnodeI[211]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[498];
parity+=vnodeI[509];
parity+=vnodeI[547];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188451]=parity;
if (cwI[368]==0) responseI[188451]=0; //assymetric
if (responseI[188451] != vnodeI[368]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[368];
parity+=vnodeI[509];
parity+=vnodeI[547];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255011]=parity;
if (cwI[498]==0) responseI[255011]=0; //assymetric
if (responseI[255011] != vnodeI[498]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[368];
parity+=vnodeI[498];
parity+=vnodeI[547];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260643]=parity;
if (cwI[509]==0) responseI[260643]=0; //assymetric
if (responseI[260643] != vnodeI[509]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[368];
parity+=vnodeI[498];
parity+=vnodeI[509];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[280099]=parity;
if (cwI[547]==0) responseI[280099]=0; //assymetric
if (responseI[280099] != vnodeI[547]) parityerrors++;
parity=0;
parity+=vnodeI[391];
parity+=vnodeI[483];
parity+=vnodeI[490];
parity+=vnodeI[548];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[195108]=parity;
if (cwI[381]==0) responseI[195108]=0; //assymetric
if (responseI[195108] != vnodeI[381]) parityerrors++;
parity=0;
parity+=vnodeI[381];
parity+=vnodeI[483];
parity+=vnodeI[490];
parity+=vnodeI[548];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200228]=parity;
if (cwI[391]==0) responseI[200228]=0; //assymetric
if (responseI[200228] != vnodeI[391]) parityerrors++;
parity=0;
parity+=vnodeI[381];
parity+=vnodeI[391];
parity+=vnodeI[490];
parity+=vnodeI[548];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247332]=parity;
if (cwI[483]==0) responseI[247332]=0; //assymetric
if (responseI[247332] != vnodeI[483]) parityerrors++;
parity=0;
parity+=vnodeI[381];
parity+=vnodeI[391];
parity+=vnodeI[483];
parity+=vnodeI[548];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250916]=parity;
if (cwI[490]==0) responseI[250916]=0; //assymetric
if (responseI[250916] != vnodeI[490]) parityerrors++;
parity=0;
parity+=vnodeI[381];
parity+=vnodeI[391];
parity+=vnodeI[483];
parity+=vnodeI[490];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[280612]=parity;
if (cwI[548]==0) responseI[280612]=0; //assymetric
if (responseI[280612] != vnodeI[548]) parityerrors++;
parity=0;
parity+=vnodeI[197];
parity+=vnodeI[240];
parity+=vnodeI[383];
parity+=vnodeI[549];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2597]=parity;
if (cwI[5]==0) responseI[2597]=0; //assymetric
if (responseI[2597] != vnodeI[5]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[240];
parity+=vnodeI[383];
parity+=vnodeI[549];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100901]=parity;
if (cwI[197]==0) responseI[100901]=0; //assymetric
if (responseI[100901] != vnodeI[197]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[197];
parity+=vnodeI[383];
parity+=vnodeI[549];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122917]=parity;
if (cwI[240]==0) responseI[122917]=0; //assymetric
if (responseI[122917] != vnodeI[240]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[197];
parity+=vnodeI[240];
parity+=vnodeI[549];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196133]=parity;
if (cwI[383]==0) responseI[196133]=0; //assymetric
if (responseI[196133] != vnodeI[383]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[197];
parity+=vnodeI[240];
parity+=vnodeI[383];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[281125]=parity;
if (cwI[549]==0) responseI[281125]=0; //assymetric
if (responseI[281125] != vnodeI[549]) parityerrors++;
parity=0;
parity+=vnodeI[140];
parity+=vnodeI[299];
parity+=vnodeI[507];
parity+=vnodeI[550];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71206]=parity;
if (cwI[139]==0) responseI[71206]=0; //assymetric
if (responseI[71206] != vnodeI[139]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[299];
parity+=vnodeI[507];
parity+=vnodeI[550];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71718]=parity;
if (cwI[140]==0) responseI[71718]=0; //assymetric
if (responseI[71718] != vnodeI[140]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[140];
parity+=vnodeI[507];
parity+=vnodeI[550];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153126]=parity;
if (cwI[299]==0) responseI[153126]=0; //assymetric
if (responseI[153126] != vnodeI[299]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[140];
parity+=vnodeI[299];
parity+=vnodeI[550];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259622]=parity;
if (cwI[507]==0) responseI[259622]=0; //assymetric
if (responseI[259622] != vnodeI[507]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[140];
parity+=vnodeI[299];
parity+=vnodeI[507];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[281638]=parity;
if (cwI[550]==0) responseI[281638]=0; //assymetric
if (responseI[281638] != vnodeI[550]) parityerrors++;
parity=0;
parity+=vnodeI[394];
parity+=vnodeI[477];
parity+=vnodeI[500];
parity+=vnodeI[551];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20007]=parity;
if (cwI[39]==0) responseI[20007]=0; //assymetric
if (responseI[20007] != vnodeI[39]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[477];
parity+=vnodeI[500];
parity+=vnodeI[551];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201767]=parity;
if (cwI[394]==0) responseI[201767]=0; //assymetric
if (responseI[201767] != vnodeI[394]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[394];
parity+=vnodeI[500];
parity+=vnodeI[551];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244263]=parity;
if (cwI[477]==0) responseI[244263]=0; //assymetric
if (responseI[244263] != vnodeI[477]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[394];
parity+=vnodeI[477];
parity+=vnodeI[551];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256039]=parity;
if (cwI[500]==0) responseI[256039]=0; //assymetric
if (responseI[256039] != vnodeI[500]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[394];
parity+=vnodeI[477];
parity+=vnodeI[500];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[282151]=parity;
if (cwI[551]==0) responseI[282151]=0; //assymetric
if (responseI[282151] != vnodeI[551]) parityerrors++;
parity=0;
parity+=vnodeI[362];
parity+=vnodeI[473];
parity+=vnodeI[492];
parity+=vnodeI[552];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42536]=parity;
if (cwI[83]==0) responseI[42536]=0; //assymetric
if (responseI[42536] != vnodeI[83]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[473];
parity+=vnodeI[492];
parity+=vnodeI[552];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185384]=parity;
if (cwI[362]==0) responseI[185384]=0; //assymetric
if (responseI[185384] != vnodeI[362]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[362];
parity+=vnodeI[492];
parity+=vnodeI[552];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[242216]=parity;
if (cwI[473]==0) responseI[242216]=0; //assymetric
if (responseI[242216] != vnodeI[473]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[362];
parity+=vnodeI[473];
parity+=vnodeI[552];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251944]=parity;
if (cwI[492]==0) responseI[251944]=0; //assymetric
if (responseI[251944] != vnodeI[492]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[362];
parity+=vnodeI[473];
parity+=vnodeI[492];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[282664]=parity;
if (cwI[552]==0) responseI[282664]=0; //assymetric
if (responseI[282664] != vnodeI[552]) parityerrors++;
parity=0;
parity+=vnodeI[355];
parity+=vnodeI[356];
parity+=vnodeI[377];
parity+=vnodeI[553];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27177]=parity;
if (cwI[53]==0) responseI[27177]=0; //assymetric
if (responseI[27177] != vnodeI[53]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[356];
parity+=vnodeI[377];
parity+=vnodeI[553];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181801]=parity;
if (cwI[355]==0) responseI[181801]=0; //assymetric
if (responseI[181801] != vnodeI[355]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[355];
parity+=vnodeI[377];
parity+=vnodeI[553];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[182313]=parity;
if (cwI[356]==0) responseI[182313]=0; //assymetric
if (responseI[182313] != vnodeI[356]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[355];
parity+=vnodeI[356];
parity+=vnodeI[553];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[193065]=parity;
if (cwI[377]==0) responseI[193065]=0; //assymetric
if (responseI[193065] != vnodeI[377]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[355];
parity+=vnodeI[356];
parity+=vnodeI[377];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[283177]=parity;
if (cwI[553]==0) responseI[283177]=0; //assymetric
if (responseI[283177] != vnodeI[553]) parityerrors++;
parity=0;
parity+=vnodeI[430];
parity+=vnodeI[457];
parity+=vnodeI[462];
parity+=vnodeI[554];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145450]=parity;
if (cwI[284]==0) responseI[145450]=0; //assymetric
if (responseI[145450] != vnodeI[284]) parityerrors++;
parity=0;
parity+=vnodeI[284];
parity+=vnodeI[457];
parity+=vnodeI[462];
parity+=vnodeI[554];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220202]=parity;
if (cwI[430]==0) responseI[220202]=0; //assymetric
if (responseI[220202] != vnodeI[430]) parityerrors++;
parity=0;
parity+=vnodeI[284];
parity+=vnodeI[430];
parity+=vnodeI[462];
parity+=vnodeI[554];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234026]=parity;
if (cwI[457]==0) responseI[234026]=0; //assymetric
if (responseI[234026] != vnodeI[457]) parityerrors++;
parity=0;
parity+=vnodeI[284];
parity+=vnodeI[430];
parity+=vnodeI[457];
parity+=vnodeI[554];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236586]=parity;
if (cwI[462]==0) responseI[236586]=0; //assymetric
if (responseI[236586] != vnodeI[462]) parityerrors++;
parity=0;
parity+=vnodeI[284];
parity+=vnodeI[430];
parity+=vnodeI[457];
parity+=vnodeI[462];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[283690]=parity;
if (cwI[554]==0) responseI[283690]=0; //assymetric
if (responseI[283690] != vnodeI[554]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[309];
parity+=vnodeI[456];
parity+=vnodeI[555];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[32299]=parity;
if (cwI[63]==0) responseI[32299]=0; //assymetric
if (responseI[32299] != vnodeI[63]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[309];
parity+=vnodeI[456];
parity+=vnodeI[555];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55851]=parity;
if (cwI[109]==0) responseI[55851]=0; //assymetric
if (responseI[55851] != vnodeI[109]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[109];
parity+=vnodeI[456];
parity+=vnodeI[555];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158251]=parity;
if (cwI[309]==0) responseI[158251]=0; //assymetric
if (responseI[158251] != vnodeI[309]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[109];
parity+=vnodeI[309];
parity+=vnodeI[555];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233515]=parity;
if (cwI[456]==0) responseI[233515]=0; //assymetric
if (responseI[233515] != vnodeI[456]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[109];
parity+=vnodeI[309];
parity+=vnodeI[456];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[284203]=parity;
if (cwI[555]==0) responseI[284203]=0; //assymetric
if (responseI[284203] != vnodeI[555]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[369];
parity+=vnodeI[473];
parity+=vnodeI[556];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12332]=parity;
if (cwI[24]==0) responseI[12332]=0; //assymetric
if (responseI[12332] != vnodeI[24]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[369];
parity+=vnodeI[473];
parity+=vnodeI[556];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55852]=parity;
if (cwI[109]==0) responseI[55852]=0; //assymetric
if (responseI[55852] != vnodeI[109]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[109];
parity+=vnodeI[473];
parity+=vnodeI[556];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188972]=parity;
if (cwI[369]==0) responseI[188972]=0; //assymetric
if (responseI[188972] != vnodeI[369]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[109];
parity+=vnodeI[369];
parity+=vnodeI[556];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[242220]=parity;
if (cwI[473]==0) responseI[242220]=0; //assymetric
if (responseI[242220] != vnodeI[473]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[109];
parity+=vnodeI[369];
parity+=vnodeI[473];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[284716]=parity;
if (cwI[556]==0) responseI[284716]=0; //assymetric
if (responseI[284716] != vnodeI[556]) parityerrors++;
parity=0;
parity+=vnodeI[312];
parity+=vnodeI[380];
parity+=vnodeI[443];
parity+=vnodeI[557];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26669]=parity;
if (cwI[52]==0) responseI[26669]=0; //assymetric
if (responseI[26669] != vnodeI[52]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[380];
parity+=vnodeI[443];
parity+=vnodeI[557];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159789]=parity;
if (cwI[312]==0) responseI[159789]=0; //assymetric
if (responseI[159789] != vnodeI[312]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[312];
parity+=vnodeI[443];
parity+=vnodeI[557];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194605]=parity;
if (cwI[380]==0) responseI[194605]=0; //assymetric
if (responseI[194605] != vnodeI[380]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[312];
parity+=vnodeI[380];
parity+=vnodeI[557];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226861]=parity;
if (cwI[443]==0) responseI[226861]=0; //assymetric
if (responseI[226861] != vnodeI[443]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[312];
parity+=vnodeI[380];
parity+=vnodeI[443];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[285229]=parity;
if (cwI[557]==0) responseI[285229]=0; //assymetric
if (responseI[285229] != vnodeI[557]) parityerrors++;
parity=0;
parity+=vnodeI[432];
parity+=vnodeI[478];
parity+=vnodeI[501];
parity+=vnodeI[558];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63022]=parity;
if (cwI[123]==0) responseI[63022]=0; //assymetric
if (responseI[63022] != vnodeI[123]) parityerrors++;
parity=0;
parity+=vnodeI[123];
parity+=vnodeI[478];
parity+=vnodeI[501];
parity+=vnodeI[558];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[221230]=parity;
if (cwI[432]==0) responseI[221230]=0; //assymetric
if (responseI[221230] != vnodeI[432]) parityerrors++;
parity=0;
parity+=vnodeI[123];
parity+=vnodeI[432];
parity+=vnodeI[501];
parity+=vnodeI[558];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244782]=parity;
if (cwI[478]==0) responseI[244782]=0; //assymetric
if (responseI[244782] != vnodeI[478]) parityerrors++;
parity=0;
parity+=vnodeI[123];
parity+=vnodeI[432];
parity+=vnodeI[478];
parity+=vnodeI[558];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256558]=parity;
if (cwI[501]==0) responseI[256558]=0; //assymetric
if (responseI[256558] != vnodeI[501]) parityerrors++;
parity=0;
parity+=vnodeI[123];
parity+=vnodeI[432];
parity+=vnodeI[478];
parity+=vnodeI[501];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[285742]=parity;
if (cwI[558]==0) responseI[285742]=0; //assymetric
if (responseI[285742] != vnodeI[558]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[403];
parity+=vnodeI[484];
parity+=vnodeI[559];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16943]=parity;
if (cwI[33]==0) responseI[16943]=0; //assymetric
if (responseI[16943] != vnodeI[33]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[403];
parity+=vnodeI[484];
parity+=vnodeI[559];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46127]=parity;
if (cwI[90]==0) responseI[46127]=0; //assymetric
if (responseI[46127] != vnodeI[90]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[90];
parity+=vnodeI[484];
parity+=vnodeI[559];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206383]=parity;
if (cwI[403]==0) responseI[206383]=0; //assymetric
if (responseI[206383] != vnodeI[403]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[90];
parity+=vnodeI[403];
parity+=vnodeI[559];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247855]=parity;
if (cwI[484]==0) responseI[247855]=0; //assymetric
if (responseI[247855] != vnodeI[484]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[90];
parity+=vnodeI[403];
parity+=vnodeI[484];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[286255]=parity;
if (cwI[559]==0) responseI[286255]=0; //assymetric
if (responseI[286255] != vnodeI[559]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[290];
parity+=vnodeI[496];
parity+=vnodeI[560];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31792]=parity;
if (cwI[62]==0) responseI[31792]=0; //assymetric
if (responseI[31792] != vnodeI[62]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[290];
parity+=vnodeI[496];
parity+=vnodeI[560];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76336]=parity;
if (cwI[149]==0) responseI[76336]=0; //assymetric
if (responseI[76336] != vnodeI[149]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[149];
parity+=vnodeI[496];
parity+=vnodeI[560];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148528]=parity;
if (cwI[290]==0) responseI[148528]=0; //assymetric
if (responseI[148528] != vnodeI[290]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[149];
parity+=vnodeI[290];
parity+=vnodeI[560];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[254000]=parity;
if (cwI[496]==0) responseI[254000]=0; //assymetric
if (responseI[254000] != vnodeI[496]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[149];
parity+=vnodeI[290];
parity+=vnodeI[496];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[286768]=parity;
if (cwI[560]==0) responseI[286768]=0; //assymetric
if (responseI[286768] != vnodeI[560]) parityerrors++;
parity=0;
parity+=vnodeI[305];
parity+=vnodeI[360];
parity+=vnodeI[420];
parity+=vnodeI[561];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[4145]=parity;
if (cwI[8]==0) responseI[4145]=0; //assymetric
if (responseI[4145] != vnodeI[8]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[360];
parity+=vnodeI[420];
parity+=vnodeI[561];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156209]=parity;
if (cwI[305]==0) responseI[156209]=0; //assymetric
if (responseI[156209] != vnodeI[305]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[305];
parity+=vnodeI[420];
parity+=vnodeI[561];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184369]=parity;
if (cwI[360]==0) responseI[184369]=0; //assymetric
if (responseI[184369] != vnodeI[360]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[305];
parity+=vnodeI[360];
parity+=vnodeI[561];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215089]=parity;
if (cwI[420]==0) responseI[215089]=0; //assymetric
if (responseI[215089] != vnodeI[420]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[305];
parity+=vnodeI[360];
parity+=vnodeI[420];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[287281]=parity;
if (cwI[561]==0) responseI[287281]=0; //assymetric
if (responseI[287281] != vnodeI[561]) parityerrors++;
parity=0;
parity+=vnodeI[284];
parity+=vnodeI[415];
parity+=vnodeI[511];
parity+=vnodeI[562];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5170]=parity;
if (cwI[10]==0) responseI[5170]=0; //assymetric
if (responseI[5170] != vnodeI[10]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[415];
parity+=vnodeI[511];
parity+=vnodeI[562];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145458]=parity;
if (cwI[284]==0) responseI[145458]=0; //assymetric
if (responseI[145458] != vnodeI[284]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[284];
parity+=vnodeI[511];
parity+=vnodeI[562];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212530]=parity;
if (cwI[415]==0) responseI[212530]=0; //assymetric
if (responseI[212530] != vnodeI[415]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[284];
parity+=vnodeI[415];
parity+=vnodeI[562];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261682]=parity;
if (cwI[511]==0) responseI[261682]=0; //assymetric
if (responseI[261682] != vnodeI[511]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[284];
parity+=vnodeI[415];
parity+=vnodeI[511];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[287794]=parity;
if (cwI[562]==0) responseI[287794]=0; //assymetric
if (responseI[287794] != vnodeI[562]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[420];
parity+=vnodeI[506];
parity+=vnodeI[563];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110131]=parity;
if (cwI[215]==0) responseI[110131]=0; //assymetric
if (responseI[110131] != vnodeI[215]) parityerrors++;
parity=0;
parity+=vnodeI[215];
parity+=vnodeI[420];
parity+=vnodeI[506];
parity+=vnodeI[563];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157235]=parity;
if (cwI[307]==0) responseI[157235]=0; //assymetric
if (responseI[157235] != vnodeI[307]) parityerrors++;
parity=0;
parity+=vnodeI[215];
parity+=vnodeI[307];
parity+=vnodeI[506];
parity+=vnodeI[563];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215091]=parity;
if (cwI[420]==0) responseI[215091]=0; //assymetric
if (responseI[215091] != vnodeI[420]) parityerrors++;
parity=0;
parity+=vnodeI[215];
parity+=vnodeI[307];
parity+=vnodeI[420];
parity+=vnodeI[563];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259123]=parity;
if (cwI[506]==0) responseI[259123]=0; //assymetric
if (responseI[259123] != vnodeI[506]) parityerrors++;
parity=0;
parity+=vnodeI[215];
parity+=vnodeI[307];
parity+=vnodeI[420];
parity+=vnodeI[506];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[288307]=parity;
if (cwI[563]==0) responseI[288307]=0; //assymetric
if (responseI[288307] != vnodeI[563]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[298];
parity+=vnodeI[504];
parity+=vnodeI[564];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27188]=parity;
if (cwI[53]==0) responseI[27188]=0; //assymetric
if (responseI[27188] != vnodeI[53]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[298];
parity+=vnodeI[504];
parity+=vnodeI[564];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97844]=parity;
if (cwI[191]==0) responseI[97844]=0; //assymetric
if (responseI[97844] != vnodeI[191]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[191];
parity+=vnodeI[504];
parity+=vnodeI[564];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152628]=parity;
if (cwI[298]==0) responseI[152628]=0; //assymetric
if (responseI[152628] != vnodeI[298]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[191];
parity+=vnodeI[298];
parity+=vnodeI[564];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258100]=parity;
if (cwI[504]==0) responseI[258100]=0; //assymetric
if (responseI[258100] != vnodeI[504]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[191];
parity+=vnodeI[298];
parity+=vnodeI[504];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[288820]=parity;
if (cwI[564]==0) responseI[288820]=0; //assymetric
if (responseI[288820] != vnodeI[564]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[189];
parity+=vnodeI[235];
parity+=vnodeI[565];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20533]=parity;
if (cwI[40]==0) responseI[20533]=0; //assymetric
if (responseI[20533] != vnodeI[40]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[189];
parity+=vnodeI[235];
parity+=vnodeI[565];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29237]=parity;
if (cwI[57]==0) responseI[29237]=0; //assymetric
if (responseI[29237] != vnodeI[57]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[57];
parity+=vnodeI[235];
parity+=vnodeI[565];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96821]=parity;
if (cwI[189]==0) responseI[96821]=0; //assymetric
if (responseI[96821] != vnodeI[189]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[57];
parity+=vnodeI[189];
parity+=vnodeI[565];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120373]=parity;
if (cwI[235]==0) responseI[120373]=0; //assymetric
if (responseI[120373] != vnodeI[235]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[57];
parity+=vnodeI[189];
parity+=vnodeI[235];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[289333]=parity;
if (cwI[565]==0) responseI[289333]=0; //assymetric
if (responseI[289333] != vnodeI[565]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[163];
parity+=vnodeI[372];
parity+=vnodeI[444];
parity+=vnodeI[566];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30774]=parity;
if (cwI[60]==0) responseI[30774]=0; //assymetric
if (responseI[30774] != vnodeI[60]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[163];
parity+=vnodeI[372];
parity+=vnodeI[444];
parity+=vnodeI[566];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47158]=parity;
if (cwI[92]==0) responseI[47158]=0; //assymetric
if (responseI[47158] != vnodeI[92]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[92];
parity+=vnodeI[372];
parity+=vnodeI[444];
parity+=vnodeI[566];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83510]=parity;
if (cwI[163]==0) responseI[83510]=0; //assymetric
if (responseI[83510] != vnodeI[163]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[92];
parity+=vnodeI[163];
parity+=vnodeI[444];
parity+=vnodeI[566];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190518]=parity;
if (cwI[372]==0) responseI[190518]=0; //assymetric
if (responseI[190518] != vnodeI[372]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[92];
parity+=vnodeI[163];
parity+=vnodeI[372];
parity+=vnodeI[566];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[227382]=parity;
if (cwI[444]==0) responseI[227382]=0; //assymetric
if (responseI[227382] != vnodeI[444]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[92];
parity+=vnodeI[163];
parity+=vnodeI[372];
parity+=vnodeI[444];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[289846]=parity;
if (cwI[566]==0) responseI[289846]=0; //assymetric
if (responseI[289846] != vnodeI[566]) parityerrors++;
parity=0;
parity+=vnodeI[231];
parity+=vnodeI[251];
parity+=vnodeI[313];
parity+=vnodeI[567];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67639]=parity;
if (cwI[132]==0) responseI[67639]=0; //assymetric
if (responseI[67639] != vnodeI[132]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[251];
parity+=vnodeI[313];
parity+=vnodeI[567];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[118327]=parity;
if (cwI[231]==0) responseI[118327]=0; //assymetric
if (responseI[118327] != vnodeI[231]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[231];
parity+=vnodeI[313];
parity+=vnodeI[567];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128567]=parity;
if (cwI[251]==0) responseI[128567]=0; //assymetric
if (responseI[128567] != vnodeI[251]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[231];
parity+=vnodeI[251];
parity+=vnodeI[567];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[160311]=parity;
if (cwI[313]==0) responseI[160311]=0; //assymetric
if (responseI[160311] != vnodeI[313]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[231];
parity+=vnodeI[251];
parity+=vnodeI[313];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[290359]=parity;
if (cwI[567]==0) responseI[290359]=0; //assymetric
if (responseI[290359] != vnodeI[567]) parityerrors++;
parity=0;
parity+=vnodeI[452];
parity+=vnodeI[464];
parity+=vnodeI[568];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137272]=parity;
if (cwI[268]==0) responseI[137272]=0; //assymetric
if (responseI[137272] != vnodeI[268]) parityerrors++;
parity=0;
parity+=vnodeI[268];
parity+=vnodeI[464];
parity+=vnodeI[568];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231480]=parity;
if (cwI[452]==0) responseI[231480]=0; //assymetric
if (responseI[231480] != vnodeI[452]) parityerrors++;
parity=0;
parity+=vnodeI[268];
parity+=vnodeI[452];
parity+=vnodeI[568];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[237624]=parity;
if (cwI[464]==0) responseI[237624]=0; //assymetric
if (responseI[237624] != vnodeI[464]) parityerrors++;
parity=0;
parity+=vnodeI[268];
parity+=vnodeI[452];
parity+=vnodeI[464];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[290872]=parity;
if (cwI[568]==0) responseI[290872]=0; //assymetric
if (responseI[290872] != vnodeI[568]) parityerrors++;
parity=0;
parity+=vnodeI[359];
parity+=vnodeI[417];
parity+=vnodeI[485];
parity+=vnodeI[569];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156217]=parity;
if (cwI[305]==0) responseI[156217]=0; //assymetric
if (responseI[156217] != vnodeI[305]) parityerrors++;
parity=0;
parity+=vnodeI[305];
parity+=vnodeI[417];
parity+=vnodeI[485];
parity+=vnodeI[569];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183865]=parity;
if (cwI[359]==0) responseI[183865]=0; //assymetric
if (responseI[183865] != vnodeI[359]) parityerrors++;
parity=0;
parity+=vnodeI[305];
parity+=vnodeI[359];
parity+=vnodeI[485];
parity+=vnodeI[569];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213561]=parity;
if (cwI[417]==0) responseI[213561]=0; //assymetric
if (responseI[213561] != vnodeI[417]) parityerrors++;
parity=0;
parity+=vnodeI[305];
parity+=vnodeI[359];
parity+=vnodeI[417];
parity+=vnodeI[569];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248377]=parity;
if (cwI[485]==0) responseI[248377]=0; //assymetric
if (responseI[248377] != vnodeI[485]) parityerrors++;
parity=0;
parity+=vnodeI[305];
parity+=vnodeI[359];
parity+=vnodeI[417];
parity+=vnodeI[485];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[291385]=parity;
if (cwI[569]==0) responseI[291385]=0; //assymetric
if (responseI[291385] != vnodeI[569]) parityerrors++;
parity=0;
parity+=vnodeI[312];
parity+=vnodeI[490];
parity+=vnodeI[491];
parity+=vnodeI[570];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103994]=parity;
if (cwI[203]==0) responseI[103994]=0; //assymetric
if (responseI[103994] != vnodeI[203]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[490];
parity+=vnodeI[491];
parity+=vnodeI[570];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159802]=parity;
if (cwI[312]==0) responseI[159802]=0; //assymetric
if (responseI[159802] != vnodeI[312]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[312];
parity+=vnodeI[491];
parity+=vnodeI[570];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250938]=parity;
if (cwI[490]==0) responseI[250938]=0; //assymetric
if (responseI[250938] != vnodeI[490]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[312];
parity+=vnodeI[490];
parity+=vnodeI[570];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251450]=parity;
if (cwI[491]==0) responseI[251450]=0; //assymetric
if (responseI[251450] != vnodeI[491]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[312];
parity+=vnodeI[490];
parity+=vnodeI[491];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[291898]=parity;
if (cwI[570]==0) responseI[291898]=0; //assymetric
if (responseI[291898] != vnodeI[570]) parityerrors++;
parity=0;
parity+=vnodeI[294];
parity+=vnodeI[347];
parity+=vnodeI[350];
parity+=vnodeI[571];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2619]=parity;
if (cwI[5]==0) responseI[2619]=0; //assymetric
if (responseI[2619] != vnodeI[5]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[347];
parity+=vnodeI[350];
parity+=vnodeI[571];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150587]=parity;
if (cwI[294]==0) responseI[150587]=0; //assymetric
if (responseI[150587] != vnodeI[294]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[294];
parity+=vnodeI[350];
parity+=vnodeI[571];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177723]=parity;
if (cwI[347]==0) responseI[177723]=0; //assymetric
if (responseI[177723] != vnodeI[347]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[294];
parity+=vnodeI[347];
parity+=vnodeI[571];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[179259]=parity;
if (cwI[350]==0) responseI[179259]=0; //assymetric
if (responseI[179259] != vnodeI[350]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[294];
parity+=vnodeI[347];
parity+=vnodeI[350];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[292411]=parity;
if (cwI[571]==0) responseI[292411]=0; //assymetric
if (responseI[292411] != vnodeI[571]) parityerrors++;
parity=0;
parity+=vnodeI[290];
parity+=vnodeI[377];
parity+=vnodeI[480];
parity+=vnodeI[572];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[101436]=parity;
if (cwI[198]==0) responseI[101436]=0; //assymetric
if (responseI[101436] != vnodeI[198]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[377];
parity+=vnodeI[480];
parity+=vnodeI[572];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148540]=parity;
if (cwI[290]==0) responseI[148540]=0; //assymetric
if (responseI[148540] != vnodeI[290]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[290];
parity+=vnodeI[480];
parity+=vnodeI[572];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[193084]=parity;
if (cwI[377]==0) responseI[193084]=0; //assymetric
if (responseI[193084] != vnodeI[377]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[290];
parity+=vnodeI[377];
parity+=vnodeI[572];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245820]=parity;
if (cwI[480]==0) responseI[245820]=0; //assymetric
if (responseI[245820] != vnodeI[480]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[290];
parity+=vnodeI[377];
parity+=vnodeI[480];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[292924]=parity;
if (cwI[572]==0) responseI[292924]=0; //assymetric
if (responseI[292924] != vnodeI[572]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[302];
parity+=vnodeI[303];
parity+=vnodeI[573];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103997]=parity;
if (cwI[203]==0) responseI[103997]=0; //assymetric
if (responseI[103997] != vnodeI[203]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[302];
parity+=vnodeI[303];
parity+=vnodeI[573];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106045]=parity;
if (cwI[207]==0) responseI[106045]=0; //assymetric
if (responseI[106045] != vnodeI[207]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[207];
parity+=vnodeI[303];
parity+=vnodeI[573];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154685]=parity;
if (cwI[302]==0) responseI[154685]=0; //assymetric
if (responseI[154685] != vnodeI[302]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[207];
parity+=vnodeI[302];
parity+=vnodeI[573];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155197]=parity;
if (cwI[303]==0) responseI[155197]=0; //assymetric
if (responseI[155197] != vnodeI[303]) parityerrors++;
parity=0;
parity+=vnodeI[203];
parity+=vnodeI[207];
parity+=vnodeI[302];
parity+=vnodeI[303];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[293437]=parity;
if (cwI[573]==0) responseI[293437]=0; //assymetric
if (responseI[293437] != vnodeI[573]) parityerrors++;
parity=0;
parity+=vnodeI[311];
parity+=vnodeI[468];
parity+=vnodeI[574];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29758]=parity;
if (cwI[58]==0) responseI[29758]=0; //assymetric
if (responseI[29758] != vnodeI[58]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[468];
parity+=vnodeI[574];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159294]=parity;
if (cwI[311]==0) responseI[159294]=0; //assymetric
if (responseI[159294] != vnodeI[311]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[311];
parity+=vnodeI[574];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239678]=parity;
if (cwI[468]==0) responseI[239678]=0; //assymetric
if (responseI[239678] != vnodeI[468]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[311];
parity+=vnodeI[468];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[293950]=parity;
if (cwI[574]==0) responseI[293950]=0; //assymetric
if (responseI[293950] != vnodeI[574]) parityerrors++;
parity=0;
parity+=vnodeI[375];
parity+=vnodeI[405];
parity+=vnodeI[575];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49727]=parity;
if (cwI[97]==0) responseI[49727]=0; //assymetric
if (responseI[49727] != vnodeI[97]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[405];
parity+=vnodeI[575];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192063]=parity;
if (cwI[375]==0) responseI[192063]=0; //assymetric
if (responseI[192063] != vnodeI[375]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[375];
parity+=vnodeI[575];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207423]=parity;
if (cwI[405]==0) responseI[207423]=0; //assymetric
if (responseI[207423] != vnodeI[405]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[375];
parity+=vnodeI[405];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[294463]=parity;
if (cwI[575]==0) responseI[294463]=0; //assymetric
if (responseI[294463] != vnodeI[575]) parityerrors++;
parity=0;
parity+=vnodeI[310];
parity+=vnodeI[388];
parity+=vnodeI[398];
parity+=vnodeI[576];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59968]=parity;
if (cwI[117]==0) responseI[59968]=0; //assymetric
if (responseI[59968] != vnodeI[117]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[388];
parity+=vnodeI[398];
parity+=vnodeI[576];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158784]=parity;
if (cwI[310]==0) responseI[158784]=0; //assymetric
if (responseI[158784] != vnodeI[310]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[310];
parity+=vnodeI[398];
parity+=vnodeI[576];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198720]=parity;
if (cwI[388]==0) responseI[198720]=0; //assymetric
if (responseI[198720] != vnodeI[388]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[310];
parity+=vnodeI[388];
parity+=vnodeI[576];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203840]=parity;
if (cwI[398]==0) responseI[203840]=0; //assymetric
if (responseI[203840] != vnodeI[398]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[310];
parity+=vnodeI[388];
parity+=vnodeI[398];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[294976]=parity;
if (cwI[576]==0) responseI[294976]=0; //assymetric
if (responseI[294976] != vnodeI[576]) parityerrors++;
parity=0;
parity+=vnodeI[256];
parity+=vnodeI[373];
parity+=vnodeI[436];
parity+=vnodeI[577];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36417]=parity;
if (cwI[71]==0) responseI[36417]=0; //assymetric
if (responseI[36417] != vnodeI[71]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[373];
parity+=vnodeI[436];
parity+=vnodeI[577];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131137]=parity;
if (cwI[256]==0) responseI[131137]=0; //assymetric
if (responseI[131137] != vnodeI[256]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[256];
parity+=vnodeI[436];
parity+=vnodeI[577];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191041]=parity;
if (cwI[373]==0) responseI[191041]=0; //assymetric
if (responseI[191041] != vnodeI[373]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[256];
parity+=vnodeI[373];
parity+=vnodeI[577];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223297]=parity;
if (cwI[436]==0) responseI[223297]=0; //assymetric
if (responseI[223297] != vnodeI[436]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[256];
parity+=vnodeI[373];
parity+=vnodeI[436];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[295489]=parity;
if (cwI[577]==0) responseI[295489]=0; //assymetric
if (responseI[295489] != vnodeI[577]) parityerrors++;
parity=0;
parity+=vnodeI[419];
parity+=vnodeI[427];
parity+=vnodeI[510];
parity+=vnodeI[578];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115778]=parity;
if (cwI[226]==0) responseI[115778]=0; //assymetric
if (responseI[115778] != vnodeI[226]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[427];
parity+=vnodeI[510];
parity+=vnodeI[578];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214594]=parity;
if (cwI[419]==0) responseI[214594]=0; //assymetric
if (responseI[214594] != vnodeI[419]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[419];
parity+=vnodeI[510];
parity+=vnodeI[578];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218690]=parity;
if (cwI[427]==0) responseI[218690]=0; //assymetric
if (responseI[218690] != vnodeI[427]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[419];
parity+=vnodeI[427];
parity+=vnodeI[578];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261186]=parity;
if (cwI[510]==0) responseI[261186]=0; //assymetric
if (responseI[261186] != vnodeI[510]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[419];
parity+=vnodeI[427];
parity+=vnodeI[510];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[296002]=parity;
if (cwI[578]==0) responseI[296002]=0; //assymetric
if (responseI[296002] != vnodeI[578]) parityerrors++;
parity=0;
parity+=vnodeI[150];
parity+=vnodeI[257];
parity+=vnodeI[418];
parity+=vnodeI[579];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54851]=parity;
if (cwI[107]==0) responseI[54851]=0; //assymetric
if (responseI[54851] != vnodeI[107]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[257];
parity+=vnodeI[418];
parity+=vnodeI[579];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76867]=parity;
if (cwI[150]==0) responseI[76867]=0; //assymetric
if (responseI[76867] != vnodeI[150]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[150];
parity+=vnodeI[418];
parity+=vnodeI[579];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131651]=parity;
if (cwI[257]==0) responseI[131651]=0; //assymetric
if (responseI[131651] != vnodeI[257]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[150];
parity+=vnodeI[257];
parity+=vnodeI[579];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214083]=parity;
if (cwI[418]==0) responseI[214083]=0; //assymetric
if (responseI[214083] != vnodeI[418]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[150];
parity+=vnodeI[257];
parity+=vnodeI[418];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[296515]=parity;
if (cwI[579]==0) responseI[296515]=0; //assymetric
if (responseI[296515] != vnodeI[579]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[197];
parity+=vnodeI[580];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26180]=parity;
if (cwI[51]==0) responseI[26180]=0; //assymetric
if (responseI[26180] != vnodeI[51]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[197];
parity+=vnodeI[580];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48708]=parity;
if (cwI[95]==0) responseI[48708]=0; //assymetric
if (responseI[48708] != vnodeI[95]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[95];
parity+=vnodeI[580];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100932]=parity;
if (cwI[197]==0) responseI[100932]=0; //assymetric
if (responseI[100932] != vnodeI[197]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[95];
parity+=vnodeI[197];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[297028]=parity;
if (cwI[580]==0) responseI[297028]=0; //assymetric
if (responseI[297028] != vnodeI[580]) parityerrors++;
parity=0;
parity+=vnodeI[270];
parity+=vnodeI[340];
parity+=vnodeI[369];
parity+=vnodeI[581];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116805]=parity;
if (cwI[228]==0) responseI[116805]=0; //assymetric
if (responseI[116805] != vnodeI[228]) parityerrors++;
parity=0;
parity+=vnodeI[228];
parity+=vnodeI[340];
parity+=vnodeI[369];
parity+=vnodeI[581];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138309]=parity;
if (cwI[270]==0) responseI[138309]=0; //assymetric
if (responseI[138309] != vnodeI[270]) parityerrors++;
parity=0;
parity+=vnodeI[228];
parity+=vnodeI[270];
parity+=vnodeI[369];
parity+=vnodeI[581];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174149]=parity;
if (cwI[340]==0) responseI[174149]=0; //assymetric
if (responseI[174149] != vnodeI[340]) parityerrors++;
parity=0;
parity+=vnodeI[228];
parity+=vnodeI[270];
parity+=vnodeI[340];
parity+=vnodeI[581];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188997]=parity;
if (cwI[369]==0) responseI[188997]=0; //assymetric
if (responseI[188997] != vnodeI[369]) parityerrors++;
parity=0;
parity+=vnodeI[228];
parity+=vnodeI[270];
parity+=vnodeI[340];
parity+=vnodeI[369];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[297541]=parity;
if (cwI[581]==0) responseI[297541]=0; //assymetric
if (responseI[297541] != vnodeI[581]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[231];
parity+=vnodeI[356];
parity+=vnodeI[582];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87622]=parity;
if (cwI[171]==0) responseI[87622]=0; //assymetric
if (responseI[87622] != vnodeI[171]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[231];
parity+=vnodeI[356];
parity+=vnodeI[582];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117830]=parity;
if (cwI[230]==0) responseI[117830]=0; //assymetric
if (responseI[117830] != vnodeI[230]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[230];
parity+=vnodeI[356];
parity+=vnodeI[582];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[118342]=parity;
if (cwI[231]==0) responseI[118342]=0; //assymetric
if (responseI[118342] != vnodeI[231]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[230];
parity+=vnodeI[231];
parity+=vnodeI[582];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[182342]=parity;
if (cwI[356]==0) responseI[182342]=0; //assymetric
if (responseI[182342] != vnodeI[356]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[230];
parity+=vnodeI[231];
parity+=vnodeI[356];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[298054]=parity;
if (cwI[582]==0) responseI[298054]=0; //assymetric
if (responseI[298054] != vnodeI[582]) parityerrors++;
parity=0;
parity+=vnodeI[299];
parity+=vnodeI[391];
parity+=vnodeI[460];
parity+=vnodeI[583];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64071]=parity;
if (cwI[125]==0) responseI[64071]=0; //assymetric
if (responseI[64071] != vnodeI[125]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[391];
parity+=vnodeI[460];
parity+=vnodeI[583];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153159]=parity;
if (cwI[299]==0) responseI[153159]=0; //assymetric
if (responseI[153159] != vnodeI[299]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[299];
parity+=vnodeI[460];
parity+=vnodeI[583];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200263]=parity;
if (cwI[391]==0) responseI[200263]=0; //assymetric
if (responseI[200263] != vnodeI[391]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[299];
parity+=vnodeI[391];
parity+=vnodeI[583];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235591]=parity;
if (cwI[460]==0) responseI[235591]=0; //assymetric
if (responseI[235591] != vnodeI[460]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[299];
parity+=vnodeI[391];
parity+=vnodeI[460];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[298567]=parity;
if (cwI[583]==0) responseI[298567]=0; //assymetric
if (responseI[298567] != vnodeI[583]) parityerrors++;
parity=0;
parity+=vnodeI[135];
parity+=vnodeI[140];
parity+=vnodeI[175];
parity+=vnodeI[584];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68680]=parity;
if (cwI[134]==0) responseI[68680]=0; //assymetric
if (responseI[68680] != vnodeI[134]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[140];
parity+=vnodeI[175];
parity+=vnodeI[584];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[69192]=parity;
if (cwI[135]==0) responseI[69192]=0; //assymetric
if (responseI[69192] != vnodeI[135]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[135];
parity+=vnodeI[175];
parity+=vnodeI[584];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71752]=parity;
if (cwI[140]==0) responseI[71752]=0; //assymetric
if (responseI[71752] != vnodeI[140]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[135];
parity+=vnodeI[140];
parity+=vnodeI[584];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89672]=parity;
if (cwI[175]==0) responseI[89672]=0; //assymetric
if (responseI[89672] != vnodeI[175]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[135];
parity+=vnodeI[140];
parity+=vnodeI[175];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[299080]=parity;
if (cwI[584]==0) responseI[299080]=0; //assymetric
if (responseI[299080] != vnodeI[584]) parityerrors++;
parity=0;
parity+=vnodeI[338];
parity+=vnodeI[359];
parity+=vnodeI[438];
parity+=vnodeI[475];
parity+=vnodeI[585];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113737]=parity;
if (cwI[222]==0) responseI[113737]=0; //assymetric
if (responseI[113737] != vnodeI[222]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[359];
parity+=vnodeI[438];
parity+=vnodeI[475];
parity+=vnodeI[585];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173129]=parity;
if (cwI[338]==0) responseI[173129]=0; //assymetric
if (responseI[173129] != vnodeI[338]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[338];
parity+=vnodeI[438];
parity+=vnodeI[475];
parity+=vnodeI[585];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183881]=parity;
if (cwI[359]==0) responseI[183881]=0; //assymetric
if (responseI[183881] != vnodeI[359]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[338];
parity+=vnodeI[359];
parity+=vnodeI[475];
parity+=vnodeI[585];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[224329]=parity;
if (cwI[438]==0) responseI[224329]=0; //assymetric
if (responseI[224329] != vnodeI[438]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[338];
parity+=vnodeI[359];
parity+=vnodeI[438];
parity+=vnodeI[585];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243273]=parity;
if (cwI[475]==0) responseI[243273]=0; //assymetric
if (responseI[243273] != vnodeI[475]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[338];
parity+=vnodeI[359];
parity+=vnodeI[438];
parity+=vnodeI[475];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[299593]=parity;
if (cwI[585]==0) responseI[299593]=0; //assymetric
if (responseI[299593] != vnodeI[585]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[164];
parity+=vnodeI[340];
parity+=vnodeI[454];
parity+=vnodeI[586];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17994]=parity;
if (cwI[35]==0) responseI[17994]=0; //assymetric
if (responseI[17994] != vnodeI[35]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[164];
parity+=vnodeI[340];
parity+=vnodeI[454];
parity+=vnodeI[586];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59466]=parity;
if (cwI[116]==0) responseI[59466]=0; //assymetric
if (responseI[59466] != vnodeI[116]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[116];
parity+=vnodeI[340];
parity+=vnodeI[454];
parity+=vnodeI[586];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84042]=parity;
if (cwI[164]==0) responseI[84042]=0; //assymetric
if (responseI[84042] != vnodeI[164]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[116];
parity+=vnodeI[164];
parity+=vnodeI[454];
parity+=vnodeI[586];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174154]=parity;
if (cwI[340]==0) responseI[174154]=0; //assymetric
if (responseI[174154] != vnodeI[340]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[116];
parity+=vnodeI[164];
parity+=vnodeI[340];
parity+=vnodeI[586];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232522]=parity;
if (cwI[454]==0) responseI[232522]=0; //assymetric
if (responseI[232522] != vnodeI[454]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[116];
parity+=vnodeI[164];
parity+=vnodeI[340];
parity+=vnodeI[454];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[300106]=parity;
if (cwI[586]==0) responseI[300106]=0; //assymetric
if (responseI[300106] != vnodeI[586]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[250];
parity+=vnodeI[425];
parity+=vnodeI[587];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53835]=parity;
if (cwI[105]==0) responseI[53835]=0; //assymetric
if (responseI[53835] != vnodeI[105]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[250];
parity+=vnodeI[425];
parity+=vnodeI[587];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62539]=parity;
if (cwI[122]==0) responseI[62539]=0; //assymetric
if (responseI[62539] != vnodeI[122]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[122];
parity+=vnodeI[425];
parity+=vnodeI[587];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128075]=parity;
if (cwI[250]==0) responseI[128075]=0; //assymetric
if (responseI[128075] != vnodeI[250]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[122];
parity+=vnodeI[250];
parity+=vnodeI[587];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217675]=parity;
if (cwI[425]==0) responseI[217675]=0; //assymetric
if (responseI[217675] != vnodeI[425]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[122];
parity+=vnodeI[250];
parity+=vnodeI[425];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[300619]=parity;
if (cwI[587]==0) responseI[300619]=0; //assymetric
if (responseI[300619] != vnodeI[587]) parityerrors++;
parity=0;
parity+=vnodeI[366];
parity+=vnodeI[408];
parity+=vnodeI[486];
parity+=vnodeI[588];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64076]=parity;
if (cwI[125]==0) responseI[64076]=0; //assymetric
if (responseI[64076] != vnodeI[125]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[408];
parity+=vnodeI[486];
parity+=vnodeI[588];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187468]=parity;
if (cwI[366]==0) responseI[187468]=0; //assymetric
if (responseI[187468] != vnodeI[366]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[366];
parity+=vnodeI[486];
parity+=vnodeI[588];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208972]=parity;
if (cwI[408]==0) responseI[208972]=0; //assymetric
if (responseI[208972] != vnodeI[408]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[366];
parity+=vnodeI[408];
parity+=vnodeI[588];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248908]=parity;
if (cwI[486]==0) responseI[248908]=0; //assymetric
if (responseI[248908] != vnodeI[486]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[366];
parity+=vnodeI[408];
parity+=vnodeI[486];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[301132]=parity;
if (cwI[588]==0) responseI[301132]=0; //assymetric
if (responseI[301132] != vnodeI[588]) parityerrors++;
parity=0;
parity+=vnodeI[344];
parity+=vnodeI[452];
parity+=vnodeI[459];
parity+=vnodeI[589];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149069]=parity;
if (cwI[291]==0) responseI[149069]=0; //assymetric
if (responseI[149069] != vnodeI[291]) parityerrors++;
parity=0;
parity+=vnodeI[291];
parity+=vnodeI[452];
parity+=vnodeI[459];
parity+=vnodeI[589];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176205]=parity;
if (cwI[344]==0) responseI[176205]=0; //assymetric
if (responseI[176205] != vnodeI[344]) parityerrors++;
parity=0;
parity+=vnodeI[291];
parity+=vnodeI[344];
parity+=vnodeI[459];
parity+=vnodeI[589];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231501]=parity;
if (cwI[452]==0) responseI[231501]=0; //assymetric
if (responseI[231501] != vnodeI[452]) parityerrors++;
parity=0;
parity+=vnodeI[291];
parity+=vnodeI[344];
parity+=vnodeI[452];
parity+=vnodeI[589];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235085]=parity;
if (cwI[459]==0) responseI[235085]=0; //assymetric
if (responseI[235085] != vnodeI[459]) parityerrors++;
parity=0;
parity+=vnodeI[291];
parity+=vnodeI[344];
parity+=vnodeI[452];
parity+=vnodeI[459];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[301645]=parity;
if (cwI[589]==0) responseI[301645]=0; //assymetric
if (responseI[301645] != vnodeI[589]) parityerrors++;
parity=0;
parity+=vnodeI[471];
parity+=vnodeI[487];
parity+=vnodeI[495];
parity+=vnodeI[590];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[98382]=parity;
if (cwI[192]==0) responseI[98382]=0; //assymetric
if (responseI[98382] != vnodeI[192]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[487];
parity+=vnodeI[495];
parity+=vnodeI[590];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241230]=parity;
if (cwI[471]==0) responseI[241230]=0; //assymetric
if (responseI[241230] != vnodeI[471]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[471];
parity+=vnodeI[495];
parity+=vnodeI[590];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249422]=parity;
if (cwI[487]==0) responseI[249422]=0; //assymetric
if (responseI[249422] != vnodeI[487]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[471];
parity+=vnodeI[487];
parity+=vnodeI[590];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253518]=parity;
if (cwI[495]==0) responseI[253518]=0; //assymetric
if (responseI[253518] != vnodeI[495]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[471];
parity+=vnodeI[487];
parity+=vnodeI[495];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[302158]=parity;
if (cwI[590]==0) responseI[302158]=0; //assymetric
if (responseI[302158] != vnodeI[590]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[443];
parity+=vnodeI[488];
parity+=vnodeI[591];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2639]=parity;
if (cwI[5]==0) responseI[2639]=0; //assymetric
if (responseI[2639] != vnodeI[5]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[443];
parity+=vnodeI[488];
parity+=vnodeI[591];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109647]=parity;
if (cwI[214]==0) responseI[109647]=0; //assymetric
if (responseI[109647] != vnodeI[214]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[214];
parity+=vnodeI[488];
parity+=vnodeI[591];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226895]=parity;
if (cwI[443]==0) responseI[226895]=0; //assymetric
if (responseI[226895] != vnodeI[443]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[214];
parity+=vnodeI[443];
parity+=vnodeI[591];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249935]=parity;
if (cwI[488]==0) responseI[249935]=0; //assymetric
if (responseI[249935] != vnodeI[488]) parityerrors++;
parity=0;
parity+=vnodeI[5];
parity+=vnodeI[214];
parity+=vnodeI[443];
parity+=vnodeI[488];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[302671]=parity;
if (cwI[591]==0) responseI[302671]=0; //assymetric
if (responseI[302671] != vnodeI[591]) parityerrors++;
parity=0;
parity+=vnodeI[163];
parity+=vnodeI[302];
parity+=vnodeI[303];
parity+=vnodeI[592];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[50256]=parity;
if (cwI[98]==0) responseI[50256]=0; //assymetric
if (responseI[50256] != vnodeI[98]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[302];
parity+=vnodeI[303];
parity+=vnodeI[592];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83536]=parity;
if (cwI[163]==0) responseI[83536]=0; //assymetric
if (responseI[83536] != vnodeI[163]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[163];
parity+=vnodeI[303];
parity+=vnodeI[592];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154704]=parity;
if (cwI[302]==0) responseI[154704]=0; //assymetric
if (responseI[154704] != vnodeI[302]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[163];
parity+=vnodeI[302];
parity+=vnodeI[592];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155216]=parity;
if (cwI[303]==0) responseI[155216]=0; //assymetric
if (responseI[155216] != vnodeI[303]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[163];
parity+=vnodeI[302];
parity+=vnodeI[303];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[303184]=parity;
if (cwI[592]==0) responseI[303184]=0; //assymetric
if (responseI[303184] != vnodeI[592]) parityerrors++;
parity=0;
parity+=vnodeI[411];
parity+=vnodeI[423];
parity+=vnodeI[508];
parity+=vnodeI[593];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159313]=parity;
if (cwI[311]==0) responseI[159313]=0; //assymetric
if (responseI[159313] != vnodeI[311]) parityerrors++;
parity=0;
parity+=vnodeI[311];
parity+=vnodeI[423];
parity+=vnodeI[508];
parity+=vnodeI[593];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210513]=parity;
if (cwI[411]==0) responseI[210513]=0; //assymetric
if (responseI[210513] != vnodeI[411]) parityerrors++;
parity=0;
parity+=vnodeI[311];
parity+=vnodeI[411];
parity+=vnodeI[508];
parity+=vnodeI[593];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216657]=parity;
if (cwI[423]==0) responseI[216657]=0; //assymetric
if (responseI[216657] != vnodeI[423]) parityerrors++;
parity=0;
parity+=vnodeI[311];
parity+=vnodeI[411];
parity+=vnodeI[423];
parity+=vnodeI[593];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260177]=parity;
if (cwI[508]==0) responseI[260177]=0; //assymetric
if (responseI[260177] != vnodeI[508]) parityerrors++;
parity=0;
parity+=vnodeI[311];
parity+=vnodeI[411];
parity+=vnodeI[423];
parity+=vnodeI[508];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[303697]=parity;
if (cwI[593]==0) responseI[303697]=0; //assymetric
if (responseI[303697] != vnodeI[593]) parityerrors++;
parity=0;
parity+=vnodeI[467];
parity+=vnodeI[471];
parity+=vnodeI[495];
parity+=vnodeI[594];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79442]=parity;
if (cwI[155]==0) responseI[79442]=0; //assymetric
if (responseI[79442] != vnodeI[155]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[471];
parity+=vnodeI[495];
parity+=vnodeI[594];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239186]=parity;
if (cwI[467]==0) responseI[239186]=0; //assymetric
if (responseI[239186] != vnodeI[467]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[467];
parity+=vnodeI[495];
parity+=vnodeI[594];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241234]=parity;
if (cwI[471]==0) responseI[241234]=0; //assymetric
if (responseI[241234] != vnodeI[471]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[467];
parity+=vnodeI[471];
parity+=vnodeI[594];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253522]=parity;
if (cwI[495]==0) responseI[253522]=0; //assymetric
if (responseI[253522] != vnodeI[495]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[467];
parity+=vnodeI[471];
parity+=vnodeI[495];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[304210]=parity;
if (cwI[594]==0) responseI[304210]=0; //assymetric
if (responseI[304210] != vnodeI[594]) parityerrors++;
parity=0;
parity+=vnodeI[261];
parity+=vnodeI[459];
parity+=vnodeI[484];
parity+=vnodeI[595];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5203]=parity;
if (cwI[10]==0) responseI[5203]=0; //assymetric
if (responseI[5203] != vnodeI[10]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[459];
parity+=vnodeI[484];
parity+=vnodeI[595];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133715]=parity;
if (cwI[261]==0) responseI[133715]=0; //assymetric
if (responseI[133715] != vnodeI[261]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[261];
parity+=vnodeI[484];
parity+=vnodeI[595];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235091]=parity;
if (cwI[459]==0) responseI[235091]=0; //assymetric
if (responseI[235091] != vnodeI[459]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[261];
parity+=vnodeI[459];
parity+=vnodeI[595];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247891]=parity;
if (cwI[484]==0) responseI[247891]=0; //assymetric
if (responseI[247891] != vnodeI[484]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[261];
parity+=vnodeI[459];
parity+=vnodeI[484];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[304723]=parity;
if (cwI[595]==0) responseI[304723]=0; //assymetric
if (responseI[304723] != vnodeI[595]) parityerrors++;
parity=0;
parity+=vnodeI[349];
parity+=vnodeI[427];
parity+=vnodeI[465];
parity+=vnodeI[596];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157268]=parity;
if (cwI[307]==0) responseI[157268]=0; //assymetric
if (responseI[157268] != vnodeI[307]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[427];
parity+=vnodeI[465];
parity+=vnodeI[596];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178772]=parity;
if (cwI[349]==0) responseI[178772]=0; //assymetric
if (responseI[178772] != vnodeI[349]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[349];
parity+=vnodeI[465];
parity+=vnodeI[596];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218708]=parity;
if (cwI[427]==0) responseI[218708]=0; //assymetric
if (responseI[218708] != vnodeI[427]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[349];
parity+=vnodeI[427];
parity+=vnodeI[596];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238164]=parity;
if (cwI[465]==0) responseI[238164]=0; //assymetric
if (responseI[238164] != vnodeI[465]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[349];
parity+=vnodeI[427];
parity+=vnodeI[465];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[305236]=parity;
if (cwI[596]==0) responseI[305236]=0; //assymetric
if (responseI[305236] != vnodeI[596]) parityerrors++;
parity=0;
parity+=vnodeI[219];
parity+=vnodeI[239];
parity+=vnodeI[244];
parity+=vnodeI[597];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90709]=parity;
if (cwI[177]==0) responseI[90709]=0; //assymetric
if (responseI[90709] != vnodeI[177]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[239];
parity+=vnodeI[244];
parity+=vnodeI[597];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112213]=parity;
if (cwI[219]==0) responseI[112213]=0; //assymetric
if (responseI[112213] != vnodeI[219]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[219];
parity+=vnodeI[244];
parity+=vnodeI[597];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122453]=parity;
if (cwI[239]==0) responseI[122453]=0; //assymetric
if (responseI[122453] != vnodeI[239]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[219];
parity+=vnodeI[239];
parity+=vnodeI[597];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125013]=parity;
if (cwI[244]==0) responseI[125013]=0; //assymetric
if (responseI[125013] != vnodeI[244]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[219];
parity+=vnodeI[239];
parity+=vnodeI[244];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[305749]=parity;
if (cwI[597]==0) responseI[305749]=0; //assymetric
if (responseI[305749] != vnodeI[597]) parityerrors++;
parity=0;
parity+=vnodeI[221];
parity+=vnodeI[295];
parity+=vnodeI[309];
parity+=vnodeI[502];
parity+=vnodeI[598];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7766]=parity;
if (cwI[15]==0) responseI[7766]=0; //assymetric
if (responseI[7766] != vnodeI[15]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[295];
parity+=vnodeI[309];
parity+=vnodeI[502];
parity+=vnodeI[598];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113238]=parity;
if (cwI[221]==0) responseI[113238]=0; //assymetric
if (responseI[113238] != vnodeI[221]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[221];
parity+=vnodeI[309];
parity+=vnodeI[502];
parity+=vnodeI[598];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151126]=parity;
if (cwI[295]==0) responseI[151126]=0; //assymetric
if (responseI[151126] != vnodeI[295]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[221];
parity+=vnodeI[295];
parity+=vnodeI[502];
parity+=vnodeI[598];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158294]=parity;
if (cwI[309]==0) responseI[158294]=0; //assymetric
if (responseI[158294] != vnodeI[309]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[221];
parity+=vnodeI[295];
parity+=vnodeI[309];
parity+=vnodeI[598];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257110]=parity;
if (cwI[502]==0) responseI[257110]=0; //assymetric
if (responseI[257110] != vnodeI[502]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[221];
parity+=vnodeI[295];
parity+=vnodeI[309];
parity+=vnodeI[502];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[306262]=parity;
if (cwI[598]==0) responseI[306262]=0; //assymetric
if (responseI[306262] != vnodeI[598]) parityerrors++;
parity=0;
parity+=vnodeI[201];
parity+=vnodeI[321];
parity+=vnodeI[368];
parity+=vnodeI[599];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21591]=parity;
if (cwI[42]==0) responseI[21591]=0; //assymetric
if (responseI[21591] != vnodeI[42]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[321];
parity+=vnodeI[368];
parity+=vnodeI[599];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102999]=parity;
if (cwI[201]==0) responseI[102999]=0; //assymetric
if (responseI[102999] != vnodeI[201]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[201];
parity+=vnodeI[368];
parity+=vnodeI[599];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164439]=parity;
if (cwI[321]==0) responseI[164439]=0; //assymetric
if (responseI[164439] != vnodeI[321]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[201];
parity+=vnodeI[321];
parity+=vnodeI[599];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188503]=parity;
if (cwI[368]==0) responseI[188503]=0; //assymetric
if (responseI[188503] != vnodeI[368]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[201];
parity+=vnodeI[321];
parity+=vnodeI[368];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[306775]=parity;
if (cwI[599]==0) responseI[306775]=0; //assymetric
if (responseI[306775] != vnodeI[599]) parityerrors++;
parity=0;
parity+=vnodeI[204];
parity+=vnodeI[316];
parity+=vnodeI[473];
parity+=vnodeI[600];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64088]=parity;
if (cwI[125]==0) responseI[64088]=0; //assymetric
if (responseI[64088] != vnodeI[125]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[316];
parity+=vnodeI[473];
parity+=vnodeI[600];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[104536]=parity;
if (cwI[204]==0) responseI[104536]=0; //assymetric
if (responseI[104536] != vnodeI[204]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[204];
parity+=vnodeI[473];
parity+=vnodeI[600];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161880]=parity;
if (cwI[316]==0) responseI[161880]=0; //assymetric
if (responseI[161880] != vnodeI[316]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[204];
parity+=vnodeI[316];
parity+=vnodeI[600];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[242264]=parity;
if (cwI[473]==0) responseI[242264]=0; //assymetric
if (responseI[242264] != vnodeI[473]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[204];
parity+=vnodeI[316];
parity+=vnodeI[473];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[307288]=parity;
if (cwI[600]==0) responseI[307288]=0; //assymetric
if (responseI[307288] != vnodeI[600]) parityerrors++;
parity=0;
parity+=vnodeI[332];
parity+=vnodeI[476];
parity+=vnodeI[479];
parity+=vnodeI[601];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33881]=parity;
if (cwI[66]==0) responseI[33881]=0; //assymetric
if (responseI[33881] != vnodeI[66]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[476];
parity+=vnodeI[479];
parity+=vnodeI[601];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170073]=parity;
if (cwI[332]==0) responseI[170073]=0; //assymetric
if (responseI[170073] != vnodeI[332]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[332];
parity+=vnodeI[479];
parity+=vnodeI[601];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243801]=parity;
if (cwI[476]==0) responseI[243801]=0; //assymetric
if (responseI[243801] != vnodeI[476]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[332];
parity+=vnodeI[476];
parity+=vnodeI[601];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245337]=parity;
if (cwI[479]==0) responseI[245337]=0; //assymetric
if (responseI[245337] != vnodeI[479]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[332];
parity+=vnodeI[476];
parity+=vnodeI[479];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[307801]=parity;
if (cwI[601]==0) responseI[307801]=0; //assymetric
if (responseI[307801] != vnodeI[601]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[359];
parity+=vnodeI[371];
parity+=vnodeI[411];
parity+=vnodeI[602];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6234]=parity;
if (cwI[12]==0) responseI[6234]=0; //assymetric
if (responseI[6234] != vnodeI[12]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[359];
parity+=vnodeI[371];
parity+=vnodeI[411];
parity+=vnodeI[602];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78426]=parity;
if (cwI[153]==0) responseI[78426]=0; //assymetric
if (responseI[78426] != vnodeI[153]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[153];
parity+=vnodeI[371];
parity+=vnodeI[411];
parity+=vnodeI[602];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183898]=parity;
if (cwI[359]==0) responseI[183898]=0; //assymetric
if (responseI[183898] != vnodeI[359]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[153];
parity+=vnodeI[359];
parity+=vnodeI[411];
parity+=vnodeI[602];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190042]=parity;
if (cwI[371]==0) responseI[190042]=0; //assymetric
if (responseI[190042] != vnodeI[371]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[153];
parity+=vnodeI[359];
parity+=vnodeI[371];
parity+=vnodeI[602];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210522]=parity;
if (cwI[411]==0) responseI[210522]=0; //assymetric
if (responseI[210522] != vnodeI[411]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[153];
parity+=vnodeI[359];
parity+=vnodeI[371];
parity+=vnodeI[411];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[308314]=parity;
if (cwI[602]==0) responseI[308314]=0; //assymetric
if (responseI[308314] != vnodeI[602]) parityerrors++;
parity=0;
parity+=vnodeI[197];
parity+=vnodeI[261];
parity+=vnodeI[500];
parity+=vnodeI[603];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53851]=parity;
if (cwI[105]==0) responseI[53851]=0; //assymetric
if (responseI[53851] != vnodeI[105]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[261];
parity+=vnodeI[500];
parity+=vnodeI[603];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100955]=parity;
if (cwI[197]==0) responseI[100955]=0; //assymetric
if (responseI[100955] != vnodeI[197]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[197];
parity+=vnodeI[500];
parity+=vnodeI[603];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133723]=parity;
if (cwI[261]==0) responseI[133723]=0; //assymetric
if (responseI[133723] != vnodeI[261]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[197];
parity+=vnodeI[261];
parity+=vnodeI[603];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256091]=parity;
if (cwI[500]==0) responseI[256091]=0; //assymetric
if (responseI[256091] != vnodeI[500]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[197];
parity+=vnodeI[261];
parity+=vnodeI[500];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[308827]=parity;
if (cwI[603]==0) responseI[308827]=0; //assymetric
if (responseI[308827] != vnodeI[603]) parityerrors++;
parity=0;
parity+=vnodeI[347];
parity+=vnodeI[385];
parity+=vnodeI[465];
parity+=vnodeI[604];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[50780]=parity;
if (cwI[99]==0) responseI[50780]=0; //assymetric
if (responseI[50780] != vnodeI[99]) parityerrors++;
parity=0;
parity+=vnodeI[99];
parity+=vnodeI[385];
parity+=vnodeI[465];
parity+=vnodeI[604];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177756]=parity;
if (cwI[347]==0) responseI[177756]=0; //assymetric
if (responseI[177756] != vnodeI[347]) parityerrors++;
parity=0;
parity+=vnodeI[99];
parity+=vnodeI[347];
parity+=vnodeI[465];
parity+=vnodeI[604];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197212]=parity;
if (cwI[385]==0) responseI[197212]=0; //assymetric
if (responseI[197212] != vnodeI[385]) parityerrors++;
parity=0;
parity+=vnodeI[99];
parity+=vnodeI[347];
parity+=vnodeI[385];
parity+=vnodeI[604];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238172]=parity;
if (cwI[465]==0) responseI[238172]=0; //assymetric
if (responseI[238172] != vnodeI[465]) parityerrors++;
parity=0;
parity+=vnodeI[99];
parity+=vnodeI[347];
parity+=vnodeI[385];
parity+=vnodeI[465];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[309340]=parity;
if (cwI[604]==0) responseI[309340]=0; //assymetric
if (responseI[309340] != vnodeI[604]) parityerrors++;
parity=0;
parity+=vnodeI[235];
parity+=vnodeI[362];
parity+=vnodeI[387];
parity+=vnodeI[605];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86109]=parity;
if (cwI[168]==0) responseI[86109]=0; //assymetric
if (responseI[86109] != vnodeI[168]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[362];
parity+=vnodeI[387];
parity+=vnodeI[605];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120413]=parity;
if (cwI[235]==0) responseI[120413]=0; //assymetric
if (responseI[120413] != vnodeI[235]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[235];
parity+=vnodeI[387];
parity+=vnodeI[605];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185437]=parity;
if (cwI[362]==0) responseI[185437]=0; //assymetric
if (responseI[185437] != vnodeI[362]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[235];
parity+=vnodeI[362];
parity+=vnodeI[605];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198237]=parity;
if (cwI[387]==0) responseI[198237]=0; //assymetric
if (responseI[198237] != vnodeI[387]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[235];
parity+=vnodeI[362];
parity+=vnodeI[387];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[309853]=parity;
if (cwI[605]==0) responseI[309853]=0; //assymetric
if (responseI[309853] != vnodeI[605]) parityerrors++;
parity=0;
parity+=vnodeI[327];
parity+=vnodeI[363];
parity+=vnodeI[453];
parity+=vnodeI[606];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71262]=parity;
if (cwI[139]==0) responseI[71262]=0; //assymetric
if (responseI[71262] != vnodeI[139]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[363];
parity+=vnodeI[453];
parity+=vnodeI[606];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167518]=parity;
if (cwI[327]==0) responseI[167518]=0; //assymetric
if (responseI[167518] != vnodeI[327]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[327];
parity+=vnodeI[453];
parity+=vnodeI[606];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185950]=parity;
if (cwI[363]==0) responseI[185950]=0; //assymetric
if (responseI[185950] != vnodeI[363]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[327];
parity+=vnodeI[363];
parity+=vnodeI[606];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232030]=parity;
if (cwI[453]==0) responseI[232030]=0; //assymetric
if (responseI[232030] != vnodeI[453]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[327];
parity+=vnodeI[363];
parity+=vnodeI[453];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[310366]=parity;
if (cwI[606]==0) responseI[310366]=0; //assymetric
if (responseI[310366] != vnodeI[606]) parityerrors++;
parity=0;
parity+=vnodeI[371];
parity+=vnodeI[374];
parity+=vnodeI[498];
parity+=vnodeI[607];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51295]=parity;
if (cwI[100]==0) responseI[51295]=0; //assymetric
if (responseI[51295] != vnodeI[100]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[374];
parity+=vnodeI[498];
parity+=vnodeI[607];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190047]=parity;
if (cwI[371]==0) responseI[190047]=0; //assymetric
if (responseI[190047] != vnodeI[371]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[371];
parity+=vnodeI[498];
parity+=vnodeI[607];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191583]=parity;
if (cwI[374]==0) responseI[191583]=0; //assymetric
if (responseI[191583] != vnodeI[374]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[371];
parity+=vnodeI[374];
parity+=vnodeI[607];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255071]=parity;
if (cwI[498]==0) responseI[255071]=0; //assymetric
if (responseI[255071] != vnodeI[498]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[371];
parity+=vnodeI[374];
parity+=vnodeI[498];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[310879]=parity;
if (cwI[607]==0) responseI[310879]=0; //assymetric
if (responseI[310879] != vnodeI[607]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[148];
parity+=vnodeI[323];
parity+=vnodeI[608];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3168]=parity;
if (cwI[6]==0) responseI[3168]=0; //assymetric
if (responseI[3168] != vnodeI[6]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[148];
parity+=vnodeI[323];
parity+=vnodeI[608];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36448]=parity;
if (cwI[71]==0) responseI[36448]=0; //assymetric
if (responseI[36448] != vnodeI[71]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[71];
parity+=vnodeI[323];
parity+=vnodeI[608];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75872]=parity;
if (cwI[148]==0) responseI[75872]=0; //assymetric
if (responseI[75872] != vnodeI[148]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[71];
parity+=vnodeI[148];
parity+=vnodeI[608];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165472]=parity;
if (cwI[323]==0) responseI[165472]=0; //assymetric
if (responseI[165472] != vnodeI[323]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[71];
parity+=vnodeI[148];
parity+=vnodeI[323];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[311392]=parity;
if (cwI[608]==0) responseI[311392]=0; //assymetric
if (responseI[311392] != vnodeI[608]) parityerrors++;
parity=0;
parity+=vnodeI[246];
parity+=vnodeI[278];
parity+=vnodeI[405];
parity+=vnodeI[609];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90721]=parity;
if (cwI[177]==0) responseI[90721]=0; //assymetric
if (responseI[90721] != vnodeI[177]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[278];
parity+=vnodeI[405];
parity+=vnodeI[609];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126049]=parity;
if (cwI[246]==0) responseI[126049]=0; //assymetric
if (responseI[126049] != vnodeI[246]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[246];
parity+=vnodeI[405];
parity+=vnodeI[609];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142433]=parity;
if (cwI[278]==0) responseI[142433]=0; //assymetric
if (responseI[142433] != vnodeI[278]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[246];
parity+=vnodeI[278];
parity+=vnodeI[609];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207457]=parity;
if (cwI[405]==0) responseI[207457]=0; //assymetric
if (responseI[207457] != vnodeI[405]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[246];
parity+=vnodeI[278];
parity+=vnodeI[405];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[311905]=parity;
if (cwI[609]==0) responseI[311905]=0; //assymetric
if (responseI[311905] != vnodeI[609]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[266];
parity+=vnodeI[297];
parity+=vnodeI[610];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17506]=parity;
if (cwI[34]==0) responseI[17506]=0; //assymetric
if (responseI[17506] != vnodeI[34]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[266];
parity+=vnodeI[297];
parity+=vnodeI[610];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20066]=parity;
if (cwI[39]==0) responseI[20066]=0; //assymetric
if (responseI[20066] != vnodeI[39]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[39];
parity+=vnodeI[297];
parity+=vnodeI[610];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136290]=parity;
if (cwI[266]==0) responseI[136290]=0; //assymetric
if (responseI[136290] != vnodeI[266]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[39];
parity+=vnodeI[266];
parity+=vnodeI[610];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152162]=parity;
if (cwI[297]==0) responseI[152162]=0; //assymetric
if (responseI[152162] != vnodeI[297]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[39];
parity+=vnodeI[266];
parity+=vnodeI[297];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[312418]=parity;
if (cwI[610]==0) responseI[312418]=0; //assymetric
if (responseI[312418] != vnodeI[610]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[258];
parity+=vnodeI[393];
parity+=vnodeI[611];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14947]=parity;
if (cwI[29]==0) responseI[14947]=0; //assymetric
if (responseI[14947] != vnodeI[29]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[258];
parity+=vnodeI[393];
parity+=vnodeI[611];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22627]=parity;
if (cwI[44]==0) responseI[22627]=0; //assymetric
if (responseI[22627] != vnodeI[44]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[44];
parity+=vnodeI[393];
parity+=vnodeI[611];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132195]=parity;
if (cwI[258]==0) responseI[132195]=0; //assymetric
if (responseI[132195] != vnodeI[258]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[44];
parity+=vnodeI[258];
parity+=vnodeI[611];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201315]=parity;
if (cwI[393]==0) responseI[201315]=0; //assymetric
if (responseI[201315] != vnodeI[393]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[44];
parity+=vnodeI[258];
parity+=vnodeI[393];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[312931]=parity;
if (cwI[611]==0) responseI[312931]=0; //assymetric
if (responseI[312931] != vnodeI[611]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[400];
parity+=vnodeI[612];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67684]=parity;
if (cwI[132]==0) responseI[67684]=0; //assymetric
if (responseI[67684] != vnodeI[132]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[400];
parity+=vnodeI[612];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106596]=parity;
if (cwI[208]==0) responseI[106596]=0; //assymetric
if (responseI[106596] != vnodeI[208]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[208];
parity+=vnodeI[612];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204900]=parity;
if (cwI[400]==0) responseI[204900]=0; //assymetric
if (responseI[204900] != vnodeI[400]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[208];
parity+=vnodeI[400];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[313444]=parity;
if (cwI[612]==0) responseI[313444]=0; //assymetric
if (responseI[313444] != vnodeI[612]) parityerrors++;
parity=0;
parity+=vnodeI[195];
parity+=vnodeI[279];
parity+=vnodeI[450];
parity+=vnodeI[613];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62053]=parity;
if (cwI[121]==0) responseI[62053]=0; //assymetric
if (responseI[62053] != vnodeI[121]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[279];
parity+=vnodeI[450];
parity+=vnodeI[613];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99941]=parity;
if (cwI[195]==0) responseI[99941]=0; //assymetric
if (responseI[99941] != vnodeI[195]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[195];
parity+=vnodeI[450];
parity+=vnodeI[613];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142949]=parity;
if (cwI[279]==0) responseI[142949]=0; //assymetric
if (responseI[142949] != vnodeI[279]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[195];
parity+=vnodeI[279];
parity+=vnodeI[613];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230501]=parity;
if (cwI[450]==0) responseI[230501]=0; //assymetric
if (responseI[230501] != vnodeI[450]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[195];
parity+=vnodeI[279];
parity+=vnodeI[450];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[313957]=parity;
if (cwI[613]==0) responseI[313957]=0; //assymetric
if (responseI[313957] != vnodeI[613]) parityerrors++;
parity=0;
parity+=vnodeI[269];
parity+=vnodeI[304];
parity+=vnodeI[355];
parity+=vnodeI[614];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103526]=parity;
if (cwI[202]==0) responseI[103526]=0; //assymetric
if (responseI[103526] != vnodeI[202]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[304];
parity+=vnodeI[355];
parity+=vnodeI[614];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137830]=parity;
if (cwI[269]==0) responseI[137830]=0; //assymetric
if (responseI[137830] != vnodeI[269]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[269];
parity+=vnodeI[355];
parity+=vnodeI[614];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155750]=parity;
if (cwI[304]==0) responseI[155750]=0; //assymetric
if (responseI[155750] != vnodeI[304]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[269];
parity+=vnodeI[304];
parity+=vnodeI[614];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181862]=parity;
if (cwI[355]==0) responseI[181862]=0; //assymetric
if (responseI[181862] != vnodeI[355]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[269];
parity+=vnodeI[304];
parity+=vnodeI[355];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[314470]=parity;
if (cwI[614]==0) responseI[314470]=0; //assymetric
if (responseI[314470] != vnodeI[614]) parityerrors++;
parity=0;
parity+=vnodeI[334];
parity+=vnodeI[365];
parity+=vnodeI[454];
parity+=vnodeI[615];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10343]=parity;
if (cwI[20]==0) responseI[10343]=0; //assymetric
if (responseI[10343] != vnodeI[20]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[365];
parity+=vnodeI[454];
parity+=vnodeI[615];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171111]=parity;
if (cwI[334]==0) responseI[171111]=0; //assymetric
if (responseI[171111] != vnodeI[334]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[334];
parity+=vnodeI[454];
parity+=vnodeI[615];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186983]=parity;
if (cwI[365]==0) responseI[186983]=0; //assymetric
if (responseI[186983] != vnodeI[365]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[334];
parity+=vnodeI[365];
parity+=vnodeI[615];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232551]=parity;
if (cwI[454]==0) responseI[232551]=0; //assymetric
if (responseI[232551] != vnodeI[454]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[334];
parity+=vnodeI[365];
parity+=vnodeI[454];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[314983]=parity;
if (cwI[615]==0) responseI[314983]=0; //assymetric
if (responseI[314983] != vnodeI[615]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[236];
parity+=vnodeI[249];
parity+=vnodeI[616];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22120]=parity;
if (cwI[43]==0) responseI[22120]=0; //assymetric
if (responseI[22120] != vnodeI[43]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[236];
parity+=vnodeI[249];
parity+=vnodeI[616];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60008]=parity;
if (cwI[117]==0) responseI[60008]=0; //assymetric
if (responseI[60008] != vnodeI[117]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[117];
parity+=vnodeI[249];
parity+=vnodeI[616];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120936]=parity;
if (cwI[236]==0) responseI[120936]=0; //assymetric
if (responseI[120936] != vnodeI[236]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[117];
parity+=vnodeI[236];
parity+=vnodeI[616];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127592]=parity;
if (cwI[249]==0) responseI[127592]=0; //assymetric
if (responseI[127592] != vnodeI[249]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[117];
parity+=vnodeI[236];
parity+=vnodeI[249];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[315496]=parity;
if (cwI[616]==0) responseI[315496]=0; //assymetric
if (responseI[315496] != vnodeI[616]) parityerrors++;
parity=0;
parity+=vnodeI[204];
parity+=vnodeI[254];
parity+=vnodeI[306];
parity+=vnodeI[617];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53353]=parity;
if (cwI[104]==0) responseI[53353]=0; //assymetric
if (responseI[53353] != vnodeI[104]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[254];
parity+=vnodeI[306];
parity+=vnodeI[617];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[104553]=parity;
if (cwI[204]==0) responseI[104553]=0; //assymetric
if (responseI[104553] != vnodeI[204]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[204];
parity+=vnodeI[306];
parity+=vnodeI[617];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130153]=parity;
if (cwI[254]==0) responseI[130153]=0; //assymetric
if (responseI[130153] != vnodeI[254]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[204];
parity+=vnodeI[254];
parity+=vnodeI[617];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156777]=parity;
if (cwI[306]==0) responseI[156777]=0; //assymetric
if (responseI[156777] != vnodeI[306]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[204];
parity+=vnodeI[254];
parity+=vnodeI[306];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[316009]=parity;
if (cwI[617]==0) responseI[316009]=0; //assymetric
if (responseI[316009] != vnodeI[617]) parityerrors++;
parity=0;
parity+=vnodeI[224];
parity+=vnodeI[432];
parity+=vnodeI[483];
parity+=vnodeI[618];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15978]=parity;
if (cwI[31]==0) responseI[15978]=0; //assymetric
if (responseI[15978] != vnodeI[31]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[432];
parity+=vnodeI[483];
parity+=vnodeI[618];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114794]=parity;
if (cwI[224]==0) responseI[114794]=0; //assymetric
if (responseI[114794] != vnodeI[224]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[224];
parity+=vnodeI[483];
parity+=vnodeI[618];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[221290]=parity;
if (cwI[432]==0) responseI[221290]=0; //assymetric
if (responseI[221290] != vnodeI[432]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[224];
parity+=vnodeI[432];
parity+=vnodeI[618];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247402]=parity;
if (cwI[483]==0) responseI[247402]=0; //assymetric
if (responseI[247402] != vnodeI[483]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[224];
parity+=vnodeI[432];
parity+=vnodeI[483];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[316522]=parity;
if (cwI[618]==0) responseI[316522]=0; //assymetric
if (responseI[316522] != vnodeI[618]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[87];
parity+=vnodeI[92];
parity+=vnodeI[619];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[619]=parity;
if (cwI[1]==0) responseI[619]=0; //assymetric
if (responseI[619] != vnodeI[1]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[87];
parity+=vnodeI[92];
parity+=vnodeI[619];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17003]=parity;
if (cwI[33]==0) responseI[17003]=0; //assymetric
if (responseI[17003] != vnodeI[33]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[33];
parity+=vnodeI[92];
parity+=vnodeI[619];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44651]=parity;
if (cwI[87]==0) responseI[44651]=0; //assymetric
if (responseI[44651] != vnodeI[87]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[33];
parity+=vnodeI[87];
parity+=vnodeI[619];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47211]=parity;
if (cwI[92]==0) responseI[47211]=0; //assymetric
if (responseI[47211] != vnodeI[92]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[33];
parity+=vnodeI[87];
parity+=vnodeI[92];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[317035]=parity;
if (cwI[619]==0) responseI[317035]=0; //assymetric
if (responseI[317035] != vnodeI[619]) parityerrors++;
parity=0;
parity+=vnodeI[373];
parity+=vnodeI[438];
parity+=vnodeI[444];
parity+=vnodeI[620];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141420]=parity;
if (cwI[276]==0) responseI[141420]=0; //assymetric
if (responseI[141420] != vnodeI[276]) parityerrors++;
parity=0;
parity+=vnodeI[276];
parity+=vnodeI[438];
parity+=vnodeI[444];
parity+=vnodeI[620];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191084]=parity;
if (cwI[373]==0) responseI[191084]=0; //assymetric
if (responseI[191084] != vnodeI[373]) parityerrors++;
parity=0;
parity+=vnodeI[276];
parity+=vnodeI[373];
parity+=vnodeI[444];
parity+=vnodeI[620];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[224364]=parity;
if (cwI[438]==0) responseI[224364]=0; //assymetric
if (responseI[224364] != vnodeI[438]) parityerrors++;
parity=0;
parity+=vnodeI[276];
parity+=vnodeI[373];
parity+=vnodeI[438];
parity+=vnodeI[620];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[227436]=parity;
if (cwI[444]==0) responseI[227436]=0; //assymetric
if (responseI[227436] != vnodeI[444]) parityerrors++;
parity=0;
parity+=vnodeI[276];
parity+=vnodeI[373];
parity+=vnodeI[438];
parity+=vnodeI[444];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[317548]=parity;
if (cwI[620]==0) responseI[317548]=0; //assymetric
if (responseI[317548] != vnodeI[620]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[77];
parity+=vnodeI[395];
parity+=vnodeI[621];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8301]=parity;
if (cwI[16]==0) responseI[8301]=0; //assymetric
if (responseI[8301] != vnodeI[16]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[77];
parity+=vnodeI[395];
parity+=vnodeI[621];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33389]=parity;
if (cwI[65]==0) responseI[33389]=0; //assymetric
if (responseI[33389] != vnodeI[65]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[65];
parity+=vnodeI[395];
parity+=vnodeI[621];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39533]=parity;
if (cwI[77]==0) responseI[39533]=0; //assymetric
if (responseI[39533] != vnodeI[77]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[65];
parity+=vnodeI[77];
parity+=vnodeI[621];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202349]=parity;
if (cwI[395]==0) responseI[202349]=0; //assymetric
if (responseI[202349] != vnodeI[395]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[65];
parity+=vnodeI[77];
parity+=vnodeI[395];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[318061]=parity;
if (cwI[621]==0) responseI[318061]=0; //assymetric
if (responseI[318061] != vnodeI[621]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[472];
parity+=vnodeI[491];
parity+=vnodeI[622];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33902]=parity;
if (cwI[66]==0) responseI[33902]=0; //assymetric
if (responseI[33902] != vnodeI[66]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[472];
parity+=vnodeI[491];
parity+=vnodeI[622];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51822]=parity;
if (cwI[101]==0) responseI[51822]=0; //assymetric
if (responseI[51822] != vnodeI[101]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[101];
parity+=vnodeI[491];
parity+=vnodeI[622];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241774]=parity;
if (cwI[472]==0) responseI[241774]=0; //assymetric
if (responseI[241774] != vnodeI[472]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[101];
parity+=vnodeI[472];
parity+=vnodeI[622];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251502]=parity;
if (cwI[491]==0) responseI[251502]=0; //assymetric
if (responseI[251502] != vnodeI[491]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[101];
parity+=vnodeI[472];
parity+=vnodeI[491];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[318574]=parity;
if (cwI[622]==0) responseI[318574]=0; //assymetric
if (responseI[318574] != vnodeI[622]) parityerrors++;
parity=0;
parity+=vnodeI[267];
parity+=vnodeI[334];
parity+=vnodeI[623];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108655]=parity;
if (cwI[212]==0) responseI[108655]=0; //assymetric
if (responseI[108655] != vnodeI[212]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[334];
parity+=vnodeI[623];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136815]=parity;
if (cwI[267]==0) responseI[136815]=0; //assymetric
if (responseI[136815] != vnodeI[267]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[267];
parity+=vnodeI[623];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171119]=parity;
if (cwI[334]==0) responseI[171119]=0; //assymetric
if (responseI[171119] != vnodeI[334]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[267];
parity+=vnodeI[334];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[319087]=parity;
if (cwI[623]==0) responseI[319087]=0; //assymetric
if (responseI[319087] != vnodeI[623]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[357];
parity+=vnodeI[360];
parity+=vnodeI[450];
parity+=vnodeI[624];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31856]=parity;
if (cwI[62]==0) responseI[31856]=0; //assymetric
if (responseI[31856] != vnodeI[62]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[357];
parity+=vnodeI[360];
parity+=vnodeI[450];
parity+=vnodeI[624];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94320]=parity;
if (cwI[184]==0) responseI[94320]=0; //assymetric
if (responseI[94320] != vnodeI[184]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[184];
parity+=vnodeI[360];
parity+=vnodeI[450];
parity+=vnodeI[624];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[182896]=parity;
if (cwI[357]==0) responseI[182896]=0; //assymetric
if (responseI[182896] != vnodeI[357]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[184];
parity+=vnodeI[357];
parity+=vnodeI[450];
parity+=vnodeI[624];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184432]=parity;
if (cwI[360]==0) responseI[184432]=0; //assymetric
if (responseI[184432] != vnodeI[360]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[184];
parity+=vnodeI[357];
parity+=vnodeI[360];
parity+=vnodeI[624];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230512]=parity;
if (cwI[450]==0) responseI[230512]=0; //assymetric
if (responseI[230512] != vnodeI[450]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[184];
parity+=vnodeI[357];
parity+=vnodeI[360];
parity+=vnodeI[450];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[319600]=parity;
if (cwI[624]==0) responseI[319600]=0; //assymetric
if (responseI[319600] != vnodeI[624]) parityerrors++;
parity=0;
parity+=vnodeI[431];
parity+=vnodeI[470];
parity+=vnodeI[481];
parity+=vnodeI[625];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141937]=parity;
if (cwI[277]==0) responseI[141937]=0; //assymetric
if (responseI[141937] != vnodeI[277]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[470];
parity+=vnodeI[481];
parity+=vnodeI[625];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220785]=parity;
if (cwI[431]==0) responseI[220785]=0; //assymetric
if (responseI[220785] != vnodeI[431]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[431];
parity+=vnodeI[481];
parity+=vnodeI[625];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240753]=parity;
if (cwI[470]==0) responseI[240753]=0; //assymetric
if (responseI[240753] != vnodeI[470]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[431];
parity+=vnodeI[470];
parity+=vnodeI[625];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246385]=parity;
if (cwI[481]==0) responseI[246385]=0; //assymetric
if (responseI[246385] != vnodeI[481]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[431];
parity+=vnodeI[470];
parity+=vnodeI[481];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[320113]=parity;
if (cwI[625]==0) responseI[320113]=0; //assymetric
if (responseI[320113] != vnodeI[625]) parityerrors++;
parity=0;
parity+=vnodeI[140];
parity+=vnodeI[313];
parity+=vnodeI[401];
parity+=vnodeI[626];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54898]=parity;
if (cwI[107]==0) responseI[54898]=0; //assymetric
if (responseI[54898] != vnodeI[107]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[313];
parity+=vnodeI[401];
parity+=vnodeI[626];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71794]=parity;
if (cwI[140]==0) responseI[71794]=0; //assymetric
if (responseI[71794] != vnodeI[140]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[140];
parity+=vnodeI[401];
parity+=vnodeI[626];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[160370]=parity;
if (cwI[313]==0) responseI[160370]=0; //assymetric
if (responseI[160370] != vnodeI[313]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[140];
parity+=vnodeI[313];
parity+=vnodeI[626];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[205426]=parity;
if (cwI[401]==0) responseI[205426]=0; //assymetric
if (responseI[205426] != vnodeI[401]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[140];
parity+=vnodeI[313];
parity+=vnodeI[401];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[320626]=parity;
if (cwI[626]==0) responseI[320626]=0; //assymetric
if (responseI[320626] != vnodeI[626]) parityerrors++;
parity=0;
parity+=vnodeI[201];
parity+=vnodeI[285];
parity+=vnodeI[436];
parity+=vnodeI[627];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8819]=parity;
if (cwI[17]==0) responseI[8819]=0; //assymetric
if (responseI[8819] != vnodeI[17]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[285];
parity+=vnodeI[436];
parity+=vnodeI[627];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103027]=parity;
if (cwI[201]==0) responseI[103027]=0; //assymetric
if (responseI[103027] != vnodeI[201]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[201];
parity+=vnodeI[436];
parity+=vnodeI[627];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146035]=parity;
if (cwI[285]==0) responseI[146035]=0; //assymetric
if (responseI[146035] != vnodeI[285]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[201];
parity+=vnodeI[285];
parity+=vnodeI[627];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223347]=parity;
if (cwI[436]==0) responseI[223347]=0; //assymetric
if (responseI[223347] != vnodeI[436]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[201];
parity+=vnodeI[285];
parity+=vnodeI[436];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[321139]=parity;
if (cwI[627]==0) responseI[321139]=0; //assymetric
if (responseI[321139] != vnodeI[627]) parityerrors++;
parity=0;
parity+=vnodeI[215];
parity+=vnodeI[381];
parity+=vnodeI[454];
parity+=vnodeI[628];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66676]=parity;
if (cwI[130]==0) responseI[66676]=0; //assymetric
if (responseI[66676] != vnodeI[130]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[381];
parity+=vnodeI[454];
parity+=vnodeI[628];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110196]=parity;
if (cwI[215]==0) responseI[110196]=0; //assymetric
if (responseI[110196] != vnodeI[215]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[215];
parity+=vnodeI[454];
parity+=vnodeI[628];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[195188]=parity;
if (cwI[381]==0) responseI[195188]=0; //assymetric
if (responseI[195188] != vnodeI[381]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[215];
parity+=vnodeI[381];
parity+=vnodeI[628];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232564]=parity;
if (cwI[454]==0) responseI[232564]=0; //assymetric
if (responseI[232564] != vnodeI[454]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[215];
parity+=vnodeI[381];
parity+=vnodeI[454];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[321652]=parity;
if (cwI[628]==0) responseI[321652]=0; //assymetric
if (responseI[321652] != vnodeI[628]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[166];
parity+=vnodeI[216];
parity+=vnodeI[629];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[9333]=parity;
if (cwI[18]==0) responseI[9333]=0; //assymetric
if (responseI[9333] != vnodeI[18]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[166];
parity+=vnodeI[216];
parity+=vnodeI[629];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43125]=parity;
if (cwI[84]==0) responseI[43125]=0; //assymetric
if (responseI[43125] != vnodeI[84]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[84];
parity+=vnodeI[216];
parity+=vnodeI[629];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85109]=parity;
if (cwI[166]==0) responseI[85109]=0; //assymetric
if (responseI[85109] != vnodeI[166]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[84];
parity+=vnodeI[166];
parity+=vnodeI[629];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110709]=parity;
if (cwI[216]==0) responseI[110709]=0; //assymetric
if (responseI[110709] != vnodeI[216]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[84];
parity+=vnodeI[166];
parity+=vnodeI[216];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[322165]=parity;
if (cwI[629]==0) responseI[322165]=0; //assymetric
if (responseI[322165] != vnodeI[629]) parityerrors++;
parity=0;
parity+=vnodeI[327];
parity+=vnodeI[342];
parity+=vnodeI[348];
parity+=vnodeI[630];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31350]=parity;
if (cwI[61]==0) responseI[31350]=0; //assymetric
if (responseI[31350] != vnodeI[61]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[342];
parity+=vnodeI[348];
parity+=vnodeI[630];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167542]=parity;
if (cwI[327]==0) responseI[167542]=0; //assymetric
if (responseI[167542] != vnodeI[327]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[327];
parity+=vnodeI[348];
parity+=vnodeI[630];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175222]=parity;
if (cwI[342]==0) responseI[175222]=0; //assymetric
if (responseI[175222] != vnodeI[342]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[327];
parity+=vnodeI[342];
parity+=vnodeI[630];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178294]=parity;
if (cwI[348]==0) responseI[178294]=0; //assymetric
if (responseI[178294] != vnodeI[348]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[327];
parity+=vnodeI[342];
parity+=vnodeI[348];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[322678]=parity;
if (cwI[630]==0) responseI[322678]=0; //assymetric
if (responseI[322678] != vnodeI[630]) parityerrors++;
parity=0;
parity+=vnodeI[300];
parity+=vnodeI[349];
parity+=vnodeI[461];
parity+=vnodeI[631];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135799]=parity;
if (cwI[265]==0) responseI[135799]=0; //assymetric
if (responseI[135799] != vnodeI[265]) parityerrors++;
parity=0;
parity+=vnodeI[265];
parity+=vnodeI[349];
parity+=vnodeI[461];
parity+=vnodeI[631];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153719]=parity;
if (cwI[300]==0) responseI[153719]=0; //assymetric
if (responseI[153719] != vnodeI[300]) parityerrors++;
parity=0;
parity+=vnodeI[265];
parity+=vnodeI[300];
parity+=vnodeI[461];
parity+=vnodeI[631];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178807]=parity;
if (cwI[349]==0) responseI[178807]=0; //assymetric
if (responseI[178807] != vnodeI[349]) parityerrors++;
parity=0;
parity+=vnodeI[265];
parity+=vnodeI[300];
parity+=vnodeI[349];
parity+=vnodeI[631];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236151]=parity;
if (cwI[461]==0) responseI[236151]=0; //assymetric
if (responseI[236151] != vnodeI[461]) parityerrors++;
parity=0;
parity+=vnodeI[265];
parity+=vnodeI[300];
parity+=vnodeI[349];
parity+=vnodeI[461];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[323191]=parity;
if (cwI[631]==0) responseI[323191]=0; //assymetric
if (responseI[323191] != vnodeI[631]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[179];
parity+=vnodeI[319];
parity+=vnodeI[632];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14456]=parity;
if (cwI[28]==0) responseI[14456]=0; //assymetric
if (responseI[14456] != vnodeI[28]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[179];
parity+=vnodeI[319];
parity+=vnodeI[632];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37496]=parity;
if (cwI[73]==0) responseI[37496]=0; //assymetric
if (responseI[37496] != vnodeI[73]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[73];
parity+=vnodeI[319];
parity+=vnodeI[632];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91768]=parity;
if (cwI[179]==0) responseI[91768]=0; //assymetric
if (responseI[91768] != vnodeI[179]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[73];
parity+=vnodeI[179];
parity+=vnodeI[632];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163448]=parity;
if (cwI[319]==0) responseI[163448]=0; //assymetric
if (responseI[163448] != vnodeI[319]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[73];
parity+=vnodeI[179];
parity+=vnodeI[319];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[323704]=parity;
if (cwI[632]==0) responseI[323704]=0; //assymetric
if (responseI[323704] != vnodeI[632]) parityerrors++;
parity=0;
parity+=vnodeI[349];
parity+=vnodeI[363];
parity+=vnodeI[387];
parity+=vnodeI[410];
parity+=vnodeI[633];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177273]=parity;
if (cwI[346]==0) responseI[177273]=0; //assymetric
if (responseI[177273] != vnodeI[346]) parityerrors++;
parity=0;
parity+=vnodeI[346];
parity+=vnodeI[363];
parity+=vnodeI[387];
parity+=vnodeI[410];
parity+=vnodeI[633];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178809]=parity;
if (cwI[349]==0) responseI[178809]=0; //assymetric
if (responseI[178809] != vnodeI[349]) parityerrors++;
parity=0;
parity+=vnodeI[346];
parity+=vnodeI[349];
parity+=vnodeI[387];
parity+=vnodeI[410];
parity+=vnodeI[633];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185977]=parity;
if (cwI[363]==0) responseI[185977]=0; //assymetric
if (responseI[185977] != vnodeI[363]) parityerrors++;
parity=0;
parity+=vnodeI[346];
parity+=vnodeI[349];
parity+=vnodeI[363];
parity+=vnodeI[410];
parity+=vnodeI[633];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198265]=parity;
if (cwI[387]==0) responseI[198265]=0; //assymetric
if (responseI[198265] != vnodeI[387]) parityerrors++;
parity=0;
parity+=vnodeI[346];
parity+=vnodeI[349];
parity+=vnodeI[363];
parity+=vnodeI[387];
parity+=vnodeI[633];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210041]=parity;
if (cwI[410]==0) responseI[210041]=0; //assymetric
if (responseI[210041] != vnodeI[410]) parityerrors++;
parity=0;
parity+=vnodeI[346];
parity+=vnodeI[349];
parity+=vnodeI[363];
parity+=vnodeI[387];
parity+=vnodeI[410];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[324217]=parity;
if (cwI[633]==0) responseI[324217]=0; //assymetric
if (responseI[324217] != vnodeI[633]) parityerrors++;
parity=0;
parity+=vnodeI[246];
parity+=vnodeI[434];
parity+=vnodeI[438];
parity+=vnodeI[634];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10874]=parity;
if (cwI[21]==0) responseI[10874]=0; //assymetric
if (responseI[10874] != vnodeI[21]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[434];
parity+=vnodeI[438];
parity+=vnodeI[634];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126074]=parity;
if (cwI[246]==0) responseI[126074]=0; //assymetric
if (responseI[126074] != vnodeI[246]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[246];
parity+=vnodeI[438];
parity+=vnodeI[634];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222330]=parity;
if (cwI[434]==0) responseI[222330]=0; //assymetric
if (responseI[222330] != vnodeI[434]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[246];
parity+=vnodeI[434];
parity+=vnodeI[634];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[224378]=parity;
if (cwI[438]==0) responseI[224378]=0; //assymetric
if (responseI[224378] != vnodeI[438]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[246];
parity+=vnodeI[434];
parity+=vnodeI[438];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[324730]=parity;
if (cwI[634]==0) responseI[324730]=0; //assymetric
if (responseI[324730] != vnodeI[634]) parityerrors++;
parity=0;
parity+=vnodeI[376];
parity+=vnodeI[413];
parity+=vnodeI[499];
parity+=vnodeI[635];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79995]=parity;
if (cwI[156]==0) responseI[79995]=0; //assymetric
if (responseI[79995] != vnodeI[156]) parityerrors++;
parity=0;
parity+=vnodeI[156];
parity+=vnodeI[413];
parity+=vnodeI[499];
parity+=vnodeI[635];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192635]=parity;
if (cwI[376]==0) responseI[192635]=0; //assymetric
if (responseI[192635] != vnodeI[376]) parityerrors++;
parity=0;
parity+=vnodeI[156];
parity+=vnodeI[376];
parity+=vnodeI[499];
parity+=vnodeI[635];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211579]=parity;
if (cwI[413]==0) responseI[211579]=0; //assymetric
if (responseI[211579] != vnodeI[413]) parityerrors++;
parity=0;
parity+=vnodeI[156];
parity+=vnodeI[376];
parity+=vnodeI[413];
parity+=vnodeI[635];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255611]=parity;
if (cwI[499]==0) responseI[255611]=0; //assymetric
if (responseI[255611] != vnodeI[499]) parityerrors++;
parity=0;
parity+=vnodeI[156];
parity+=vnodeI[376];
parity+=vnodeI[413];
parity+=vnodeI[499];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[325243]=parity;
if (cwI[635]==0) responseI[325243]=0; //assymetric
if (responseI[325243] != vnodeI[635]) parityerrors++;
parity=0;
parity+=vnodeI[286];
parity+=vnodeI[338];
parity+=vnodeI[424];
parity+=vnodeI[636];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91772]=parity;
if (cwI[179]==0) responseI[91772]=0; //assymetric
if (responseI[91772] != vnodeI[179]) parityerrors++;
parity=0;
parity+=vnodeI[179];
parity+=vnodeI[338];
parity+=vnodeI[424];
parity+=vnodeI[636];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146556]=parity;
if (cwI[286]==0) responseI[146556]=0; //assymetric
if (responseI[146556] != vnodeI[286]) parityerrors++;
parity=0;
parity+=vnodeI[179];
parity+=vnodeI[286];
parity+=vnodeI[424];
parity+=vnodeI[636];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173180]=parity;
if (cwI[338]==0) responseI[173180]=0; //assymetric
if (responseI[173180] != vnodeI[338]) parityerrors++;
parity=0;
parity+=vnodeI[179];
parity+=vnodeI[286];
parity+=vnodeI[338];
parity+=vnodeI[636];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217212]=parity;
if (cwI[424]==0) responseI[217212]=0; //assymetric
if (responseI[217212] != vnodeI[424]) parityerrors++;
parity=0;
parity+=vnodeI[179];
parity+=vnodeI[286];
parity+=vnodeI[338];
parity+=vnodeI[424];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[325756]=parity;
if (cwI[636]==0) responseI[325756]=0; //assymetric
if (responseI[325756] != vnodeI[636]) parityerrors++;
parity=0;
parity+=vnodeI[305];
parity+=vnodeI[506];
parity+=vnodeI[637];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116349]=parity;
if (cwI[227]==0) responseI[116349]=0; //assymetric
if (responseI[116349] != vnodeI[227]) parityerrors++;
parity=0;
parity+=vnodeI[227];
parity+=vnodeI[506];
parity+=vnodeI[637];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156285]=parity;
if (cwI[305]==0) responseI[156285]=0; //assymetric
if (responseI[156285] != vnodeI[305]) parityerrors++;
parity=0;
parity+=vnodeI[227];
parity+=vnodeI[305];
parity+=vnodeI[637];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259197]=parity;
if (cwI[506]==0) responseI[259197]=0; //assymetric
if (responseI[259197] != vnodeI[506]) parityerrors++;
parity=0;
parity+=vnodeI[227];
parity+=vnodeI[305];
parity+=vnodeI[506];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[326269]=parity;
if (cwI[637]==0) responseI[326269]=0; //assymetric
if (responseI[326269] != vnodeI[637]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[298];
parity+=vnodeI[308];
parity+=vnodeI[638];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62078]=parity;
if (cwI[121]==0) responseI[62078]=0; //assymetric
if (responseI[62078] != vnodeI[121]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[298];
parity+=vnodeI[308];
parity+=vnodeI[638];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125566]=parity;
if (cwI[245]==0) responseI[125566]=0; //assymetric
if (responseI[125566] != vnodeI[245]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[245];
parity+=vnodeI[308];
parity+=vnodeI[638];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152702]=parity;
if (cwI[298]==0) responseI[152702]=0; //assymetric
if (responseI[152702] != vnodeI[298]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[245];
parity+=vnodeI[298];
parity+=vnodeI[638];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157822]=parity;
if (cwI[308]==0) responseI[157822]=0; //assymetric
if (responseI[157822] != vnodeI[308]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[245];
parity+=vnodeI[298];
parity+=vnodeI[308];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[326782]=parity;
if (cwI[638]==0) responseI[326782]=0; //assymetric
if (responseI[326782] != vnodeI[638]) parityerrors++;
parity=0;
parity+=vnodeI[285];
parity+=vnodeI[286];
parity+=vnodeI[396];
parity+=vnodeI[639];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135295]=parity;
if (cwI[264]==0) responseI[135295]=0; //assymetric
if (responseI[135295] != vnodeI[264]) parityerrors++;
parity=0;
parity+=vnodeI[264];
parity+=vnodeI[286];
parity+=vnodeI[396];
parity+=vnodeI[639];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146047]=parity;
if (cwI[285]==0) responseI[146047]=0; //assymetric
if (responseI[146047] != vnodeI[285]) parityerrors++;
parity=0;
parity+=vnodeI[264];
parity+=vnodeI[285];
parity+=vnodeI[396];
parity+=vnodeI[639];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146559]=parity;
if (cwI[286]==0) responseI[146559]=0; //assymetric
if (responseI[146559] != vnodeI[286]) parityerrors++;
parity=0;
parity+=vnodeI[264];
parity+=vnodeI[285];
parity+=vnodeI[286];
parity+=vnodeI[639];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202879]=parity;
if (cwI[396]==0) responseI[202879]=0; //assymetric
if (responseI[202879] != vnodeI[396]) parityerrors++;
parity=0;
parity+=vnodeI[264];
parity+=vnodeI[285];
parity+=vnodeI[286];
parity+=vnodeI[396];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[327295]=parity;
if (cwI[639]==0) responseI[327295]=0; //assymetric
if (responseI[327295] != vnodeI[639]) parityerrors++;
parity=0;
parity+=vnodeI[179];
parity+=vnodeI[461];
parity+=vnodeI[499];
parity+=vnodeI[640];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81536]=parity;
if (cwI[159]==0) responseI[81536]=0; //assymetric
if (responseI[81536] != vnodeI[159]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[461];
parity+=vnodeI[499];
parity+=vnodeI[640];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91776]=parity;
if (cwI[179]==0) responseI[91776]=0; //assymetric
if (responseI[91776] != vnodeI[179]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[179];
parity+=vnodeI[499];
parity+=vnodeI[640];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236160]=parity;
if (cwI[461]==0) responseI[236160]=0; //assymetric
if (responseI[236160] != vnodeI[461]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[179];
parity+=vnodeI[461];
parity+=vnodeI[640];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255616]=parity;
if (cwI[499]==0) responseI[255616]=0; //assymetric
if (responseI[255616] != vnodeI[499]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[179];
parity+=vnodeI[461];
parity+=vnodeI[499];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[327808]=parity;
if (cwI[640]==0) responseI[327808]=0; //assymetric
if (responseI[327808] != vnodeI[640]) parityerrors++;
parity=0;
parity+=vnodeI[478];
parity+=vnodeI[482];
parity+=vnodeI[489];
parity+=vnodeI[641];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132225]=parity;
if (cwI[258]==0) responseI[132225]=0; //assymetric
if (responseI[132225] != vnodeI[258]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[482];
parity+=vnodeI[489];
parity+=vnodeI[641];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244865]=parity;
if (cwI[478]==0) responseI[244865]=0; //assymetric
if (responseI[244865] != vnodeI[478]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[478];
parity+=vnodeI[489];
parity+=vnodeI[641];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246913]=parity;
if (cwI[482]==0) responseI[246913]=0; //assymetric
if (responseI[246913] != vnodeI[482]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[478];
parity+=vnodeI[482];
parity+=vnodeI[641];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250497]=parity;
if (cwI[489]==0) responseI[250497]=0; //assymetric
if (responseI[250497] != vnodeI[489]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[478];
parity+=vnodeI[482];
parity+=vnodeI[489];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[328321]=parity;
if (cwI[641]==0) responseI[328321]=0; //assymetric
if (responseI[328321] != vnodeI[641]) parityerrors++;
parity=0;
parity+=vnodeI[250];
parity+=vnodeI[329];
parity+=vnodeI[459];
parity+=vnodeI[642];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108674]=parity;
if (cwI[212]==0) responseI[108674]=0; //assymetric
if (responseI[108674] != vnodeI[212]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[329];
parity+=vnodeI[459];
parity+=vnodeI[642];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128130]=parity;
if (cwI[250]==0) responseI[128130]=0; //assymetric
if (responseI[128130] != vnodeI[250]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[250];
parity+=vnodeI[459];
parity+=vnodeI[642];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168578]=parity;
if (cwI[329]==0) responseI[168578]=0; //assymetric
if (responseI[168578] != vnodeI[329]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[250];
parity+=vnodeI[329];
parity+=vnodeI[642];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235138]=parity;
if (cwI[459]==0) responseI[235138]=0; //assymetric
if (responseI[235138] != vnodeI[459]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[250];
parity+=vnodeI[329];
parity+=vnodeI[459];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[328834]=parity;
if (cwI[642]==0) responseI[328834]=0; //assymetric
if (responseI[328834] != vnodeI[642]) parityerrors++;
parity=0;
parity+=vnodeI[290];
parity+=vnodeI[423];
parity+=vnodeI[430];
parity+=vnodeI[643];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86147]=parity;
if (cwI[168]==0) responseI[86147]=0; //assymetric
if (responseI[86147] != vnodeI[168]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[423];
parity+=vnodeI[430];
parity+=vnodeI[643];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148611]=parity;
if (cwI[290]==0) responseI[148611]=0; //assymetric
if (responseI[148611] != vnodeI[290]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[290];
parity+=vnodeI[430];
parity+=vnodeI[643];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216707]=parity;
if (cwI[423]==0) responseI[216707]=0; //assymetric
if (responseI[216707] != vnodeI[423]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[290];
parity+=vnodeI[423];
parity+=vnodeI[643];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220291]=parity;
if (cwI[430]==0) responseI[220291]=0; //assymetric
if (responseI[220291] != vnodeI[430]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[290];
parity+=vnodeI[423];
parity+=vnodeI[430];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[329347]=parity;
if (cwI[643]==0) responseI[329347]=0; //assymetric
if (responseI[329347] != vnodeI[643]) parityerrors++;
parity=0;
parity+=vnodeI[249];
parity+=vnodeI[294];
parity+=vnodeI[332];
parity+=vnodeI[644];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76420]=parity;
if (cwI[149]==0) responseI[76420]=0; //assymetric
if (responseI[76420] != vnodeI[149]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[294];
parity+=vnodeI[332];
parity+=vnodeI[644];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127620]=parity;
if (cwI[249]==0) responseI[127620]=0; //assymetric
if (responseI[127620] != vnodeI[249]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[249];
parity+=vnodeI[332];
parity+=vnodeI[644];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150660]=parity;
if (cwI[294]==0) responseI[150660]=0; //assymetric
if (responseI[150660] != vnodeI[294]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[249];
parity+=vnodeI[294];
parity+=vnodeI[644];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170116]=parity;
if (cwI[332]==0) responseI[170116]=0; //assymetric
if (responseI[170116] != vnodeI[332]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[249];
parity+=vnodeI[294];
parity+=vnodeI[332];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[329860]=parity;
if (cwI[644]==0) responseI[329860]=0; //assymetric
if (responseI[329860] != vnodeI[644]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[212];
parity+=vnodeI[257];
parity+=vnodeI[645];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53893]=parity;
if (cwI[105]==0) responseI[53893]=0; //assymetric
if (responseI[53893] != vnodeI[105]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[212];
parity+=vnodeI[257];
parity+=vnodeI[645];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54917]=parity;
if (cwI[107]==0) responseI[54917]=0; //assymetric
if (responseI[54917] != vnodeI[107]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[107];
parity+=vnodeI[257];
parity+=vnodeI[645];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108677]=parity;
if (cwI[212]==0) responseI[108677]=0; //assymetric
if (responseI[108677] != vnodeI[212]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[107];
parity+=vnodeI[212];
parity+=vnodeI[645];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131717]=parity;
if (cwI[257]==0) responseI[131717]=0; //assymetric
if (responseI[131717] != vnodeI[257]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[107];
parity+=vnodeI[212];
parity+=vnodeI[257];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[330373]=parity;
if (cwI[645]==0) responseI[330373]=0; //assymetric
if (responseI[330373] != vnodeI[645]) parityerrors++;
parity=0;
parity+=vnodeI[293];
parity+=vnodeI[297];
parity+=vnodeI[447];
parity+=vnodeI[646];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8838]=parity;
if (cwI[17]==0) responseI[8838]=0; //assymetric
if (responseI[8838] != vnodeI[17]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[297];
parity+=vnodeI[447];
parity+=vnodeI[646];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150150]=parity;
if (cwI[293]==0) responseI[150150]=0; //assymetric
if (responseI[150150] != vnodeI[293]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[293];
parity+=vnodeI[447];
parity+=vnodeI[646];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152198]=parity;
if (cwI[297]==0) responseI[152198]=0; //assymetric
if (responseI[152198] != vnodeI[297]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[293];
parity+=vnodeI[297];
parity+=vnodeI[646];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228998]=parity;
if (cwI[447]==0) responseI[228998]=0; //assymetric
if (responseI[228998] != vnodeI[447]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[293];
parity+=vnodeI[297];
parity+=vnodeI[447];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[330886]=parity;
if (cwI[646]==0) responseI[330886]=0; //assymetric
if (responseI[330886] != vnodeI[646]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[226];
parity+=vnodeI[647];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85639]=parity;
if (cwI[167]==0) responseI[85639]=0; //assymetric
if (responseI[85639] != vnodeI[167]) parityerrors++;
parity=0;
parity+=vnodeI[167];
parity+=vnodeI[226];
parity+=vnodeI[647];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86663]=parity;
if (cwI[169]==0) responseI[86663]=0; //assymetric
if (responseI[86663] != vnodeI[169]) parityerrors++;
parity=0;
parity+=vnodeI[167];
parity+=vnodeI[169];
parity+=vnodeI[647];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115847]=parity;
if (cwI[226]==0) responseI[115847]=0; //assymetric
if (responseI[115847] != vnodeI[226]) parityerrors++;
parity=0;
parity+=vnodeI[167];
parity+=vnodeI[169];
parity+=vnodeI[226];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[331399]=parity;
if (cwI[647]==0) responseI[331399]=0; //assymetric
if (responseI[331399] != vnodeI[647]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[365];
parity+=vnodeI[418];
parity+=vnodeI[648];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[11400]=parity;
if (cwI[22]==0) responseI[11400]=0; //assymetric
if (responseI[11400] != vnodeI[22]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[365];
parity+=vnodeI[418];
parity+=vnodeI[648];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34952]=parity;
if (cwI[68]==0) responseI[34952]=0; //assymetric
if (responseI[34952] != vnodeI[68]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[68];
parity+=vnodeI[418];
parity+=vnodeI[648];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187016]=parity;
if (cwI[365]==0) responseI[187016]=0; //assymetric
if (responseI[187016] != vnodeI[365]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[68];
parity+=vnodeI[365];
parity+=vnodeI[648];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214152]=parity;
if (cwI[418]==0) responseI[214152]=0; //assymetric
if (responseI[214152] != vnodeI[418]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[68];
parity+=vnodeI[365];
parity+=vnodeI[418];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[331912]=parity;
if (cwI[648]==0) responseI[331912]=0; //assymetric
if (responseI[331912] != vnodeI[648]) parityerrors++;
parity=0;
parity+=vnodeI[260];
parity+=vnodeI[320];
parity+=vnodeI[397];
parity+=vnodeI[649];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43145]=parity;
if (cwI[84]==0) responseI[43145]=0; //assymetric
if (responseI[43145] != vnodeI[84]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[320];
parity+=vnodeI[397];
parity+=vnodeI[649];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133257]=parity;
if (cwI[260]==0) responseI[133257]=0; //assymetric
if (responseI[133257] != vnodeI[260]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[260];
parity+=vnodeI[397];
parity+=vnodeI[649];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163977]=parity;
if (cwI[320]==0) responseI[163977]=0; //assymetric
if (responseI[163977] != vnodeI[320]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[260];
parity+=vnodeI[320];
parity+=vnodeI[649];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203401]=parity;
if (cwI[397]==0) responseI[203401]=0; //assymetric
if (responseI[203401] != vnodeI[397]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[260];
parity+=vnodeI[320];
parity+=vnodeI[397];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[332425]=parity;
if (cwI[649]==0) responseI[332425]=0; //assymetric
if (responseI[332425] != vnodeI[649]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[290];
parity+=vnodeI[391];
parity+=vnodeI[650];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6794]=parity;
if (cwI[13]==0) responseI[6794]=0; //assymetric
if (responseI[6794] != vnodeI[13]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[290];
parity+=vnodeI[391];
parity+=vnodeI[650];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109706]=parity;
if (cwI[214]==0) responseI[109706]=0; //assymetric
if (responseI[109706] != vnodeI[214]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[214];
parity+=vnodeI[391];
parity+=vnodeI[650];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148618]=parity;
if (cwI[290]==0) responseI[148618]=0; //assymetric
if (responseI[148618] != vnodeI[290]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[214];
parity+=vnodeI[290];
parity+=vnodeI[650];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200330]=parity;
if (cwI[391]==0) responseI[200330]=0; //assymetric
if (responseI[200330] != vnodeI[391]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[214];
parity+=vnodeI[290];
parity+=vnodeI[391];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[332938]=parity;
if (cwI[650]==0) responseI[332938]=0; //assymetric
if (responseI[332938] != vnodeI[650]) parityerrors++;
parity=0;
parity+=vnodeI[223];
parity+=vnodeI[303];
parity+=vnodeI[505];
parity+=vnodeI[651];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97931]=parity;
if (cwI[191]==0) responseI[97931]=0; //assymetric
if (responseI[97931] != vnodeI[191]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[303];
parity+=vnodeI[505];
parity+=vnodeI[651];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114315]=parity;
if (cwI[223]==0) responseI[114315]=0; //assymetric
if (responseI[114315] != vnodeI[223]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[223];
parity+=vnodeI[505];
parity+=vnodeI[651];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155275]=parity;
if (cwI[303]==0) responseI[155275]=0; //assymetric
if (responseI[155275] != vnodeI[303]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[223];
parity+=vnodeI[303];
parity+=vnodeI[651];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258699]=parity;
if (cwI[505]==0) responseI[258699]=0; //assymetric
if (responseI[258699] != vnodeI[505]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[223];
parity+=vnodeI[303];
parity+=vnodeI[505];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[333451]=parity;
if (cwI[651]==0) responseI[333451]=0; //assymetric
if (responseI[333451] != vnodeI[651]) parityerrors++;
parity=0;
parity+=vnodeI[273];
parity+=vnodeI[295];
parity+=vnodeI[320];
parity+=vnodeI[652];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115852]=parity;
if (cwI[226]==0) responseI[115852]=0; //assymetric
if (responseI[115852] != vnodeI[226]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[295];
parity+=vnodeI[320];
parity+=vnodeI[652];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[139916]=parity;
if (cwI[273]==0) responseI[139916]=0; //assymetric
if (responseI[139916] != vnodeI[273]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[273];
parity+=vnodeI[320];
parity+=vnodeI[652];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151180]=parity;
if (cwI[295]==0) responseI[151180]=0; //assymetric
if (responseI[151180] != vnodeI[295]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[273];
parity+=vnodeI[295];
parity+=vnodeI[652];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163980]=parity;
if (cwI[320]==0) responseI[163980]=0; //assymetric
if (responseI[163980] != vnodeI[320]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[273];
parity+=vnodeI[295];
parity+=vnodeI[320];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[333964]=parity;
if (cwI[652]==0) responseI[333964]=0; //assymetric
if (responseI[333964] != vnodeI[652]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[392];
parity+=vnodeI[462];
parity+=vnodeI[508];
parity+=vnodeI[653];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51853]=parity;
if (cwI[101]==0) responseI[51853]=0; //assymetric
if (responseI[51853] != vnodeI[101]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[392];
parity+=vnodeI[462];
parity+=vnodeI[508];
parity+=vnodeI[653];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123533]=parity;
if (cwI[241]==0) responseI[123533]=0; //assymetric
if (responseI[123533] != vnodeI[241]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[241];
parity+=vnodeI[462];
parity+=vnodeI[508];
parity+=vnodeI[653];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200845]=parity;
if (cwI[392]==0) responseI[200845]=0; //assymetric
if (responseI[200845] != vnodeI[392]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[241];
parity+=vnodeI[392];
parity+=vnodeI[508];
parity+=vnodeI[653];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236685]=parity;
if (cwI[462]==0) responseI[236685]=0; //assymetric
if (responseI[236685] != vnodeI[462]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[241];
parity+=vnodeI[392];
parity+=vnodeI[462];
parity+=vnodeI[653];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260237]=parity;
if (cwI[508]==0) responseI[260237]=0; //assymetric
if (responseI[260237] != vnodeI[508]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[241];
parity+=vnodeI[392];
parity+=vnodeI[462];
parity+=vnodeI[508];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[334477]=parity;
if (cwI[653]==0) responseI[334477]=0; //assymetric
if (responseI[334477] != vnodeI[653]) parityerrors++;
parity=0;
parity+=vnodeI[195];
parity+=vnodeI[361];
parity+=vnodeI[404];
parity+=vnodeI[654];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10382]=parity;
if (cwI[20]==0) responseI[10382]=0; //assymetric
if (responseI[10382] != vnodeI[20]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[361];
parity+=vnodeI[404];
parity+=vnodeI[654];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99982]=parity;
if (cwI[195]==0) responseI[99982]=0; //assymetric
if (responseI[99982] != vnodeI[195]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[195];
parity+=vnodeI[404];
parity+=vnodeI[654];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184974]=parity;
if (cwI[361]==0) responseI[184974]=0; //assymetric
if (responseI[184974] != vnodeI[361]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[195];
parity+=vnodeI[361];
parity+=vnodeI[654];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206990]=parity;
if (cwI[404]==0) responseI[206990]=0; //assymetric
if (responseI[206990] != vnodeI[404]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[195];
parity+=vnodeI[361];
parity+=vnodeI[404];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[334990]=parity;
if (cwI[654]==0) responseI[334990]=0; //assymetric
if (responseI[334990] != vnodeI[654]) parityerrors++;
parity=0;
parity+=vnodeI[346];
parity+=vnodeI[424];
parity+=vnodeI[511];
parity+=vnodeI[655];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16527]=parity;
if (cwI[32]==0) responseI[16527]=0; //assymetric
if (responseI[16527] != vnodeI[32]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[424];
parity+=vnodeI[511];
parity+=vnodeI[655];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177295]=parity;
if (cwI[346]==0) responseI[177295]=0; //assymetric
if (responseI[177295] != vnodeI[346]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[346];
parity+=vnodeI[511];
parity+=vnodeI[655];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217231]=parity;
if (cwI[424]==0) responseI[217231]=0; //assymetric
if (responseI[217231] != vnodeI[424]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[346];
parity+=vnodeI[424];
parity+=vnodeI[655];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261775]=parity;
if (cwI[511]==0) responseI[261775]=0; //assymetric
if (responseI[261775] != vnodeI[511]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[346];
parity+=vnodeI[424];
parity+=vnodeI[511];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[335503]=parity;
if (cwI[655]==0) responseI[335503]=0; //assymetric
if (responseI[335503] != vnodeI[655]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[292];
parity+=vnodeI[429];
parity+=vnodeI[656];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5776]=parity;
if (cwI[11]==0) responseI[5776]=0; //assymetric
if (responseI[5776] != vnodeI[11]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[292];
parity+=vnodeI[429];
parity+=vnodeI[656];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13968]=parity;
if (cwI[27]==0) responseI[13968]=0; //assymetric
if (responseI[13968] != vnodeI[27]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[27];
parity+=vnodeI[429];
parity+=vnodeI[656];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149648]=parity;
if (cwI[292]==0) responseI[149648]=0; //assymetric
if (responseI[149648] != vnodeI[292]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[27];
parity+=vnodeI[292];
parity+=vnodeI[656];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[219792]=parity;
if (cwI[429]==0) responseI[219792]=0; //assymetric
if (responseI[219792] != vnodeI[429]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[27];
parity+=vnodeI[292];
parity+=vnodeI[429];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[336016]=parity;
if (cwI[656]==0) responseI[336016]=0; //assymetric
if (responseI[336016] != vnodeI[656]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[318];
parity+=vnodeI[404];
parity+=vnodeI[657];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12433]=parity;
if (cwI[24]==0) responseI[12433]=0; //assymetric
if (responseI[12433] != vnodeI[24]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[318];
parity+=vnodeI[404];
parity+=vnodeI[657];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120977]=parity;
if (cwI[236]==0) responseI[120977]=0; //assymetric
if (responseI[120977] != vnodeI[236]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[236];
parity+=vnodeI[404];
parity+=vnodeI[657];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162961]=parity;
if (cwI[318]==0) responseI[162961]=0; //assymetric
if (responseI[162961] != vnodeI[318]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[236];
parity+=vnodeI[318];
parity+=vnodeI[657];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206993]=parity;
if (cwI[404]==0) responseI[206993]=0; //assymetric
if (responseI[206993] != vnodeI[404]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[236];
parity+=vnodeI[318];
parity+=vnodeI[404];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[336529]=parity;
if (cwI[657]==0) responseI[336529]=0; //assymetric
if (responseI[336529] != vnodeI[657]) parityerrors++;
parity=0;
parity+=vnodeI[419];
parity+=vnodeI[422];
parity+=vnodeI[458];
parity+=vnodeI[658];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29842]=parity;
if (cwI[58]==0) responseI[29842]=0; //assymetric
if (responseI[29842] != vnodeI[58]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[422];
parity+=vnodeI[458];
parity+=vnodeI[658];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214674]=parity;
if (cwI[419]==0) responseI[214674]=0; //assymetric
if (responseI[214674] != vnodeI[419]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[419];
parity+=vnodeI[458];
parity+=vnodeI[658];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216210]=parity;
if (cwI[422]==0) responseI[216210]=0; //assymetric
if (responseI[216210] != vnodeI[422]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[419];
parity+=vnodeI[422];
parity+=vnodeI[658];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234642]=parity;
if (cwI[458]==0) responseI[234642]=0; //assymetric
if (responseI[234642] != vnodeI[458]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[419];
parity+=vnodeI[422];
parity+=vnodeI[458];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[337042]=parity;
if (cwI[658]==0) responseI[337042]=0; //assymetric
if (responseI[337042] != vnodeI[658]) parityerrors++;
parity=0;
parity+=vnodeI[223];
parity+=vnodeI[271];
parity+=vnodeI[343];
parity+=vnodeI[659];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37011]=parity;
if (cwI[72]==0) responseI[37011]=0; //assymetric
if (responseI[37011] != vnodeI[72]) parityerrors++;
parity=0;
parity+=vnodeI[72];
parity+=vnodeI[271];
parity+=vnodeI[343];
parity+=vnodeI[659];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114323]=parity;
if (cwI[223]==0) responseI[114323]=0; //assymetric
if (responseI[114323] != vnodeI[223]) parityerrors++;
parity=0;
parity+=vnodeI[72];
parity+=vnodeI[223];
parity+=vnodeI[343];
parity+=vnodeI[659];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138899]=parity;
if (cwI[271]==0) responseI[138899]=0; //assymetric
if (responseI[138899] != vnodeI[271]) parityerrors++;
parity=0;
parity+=vnodeI[72];
parity+=vnodeI[223];
parity+=vnodeI[271];
parity+=vnodeI[659];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175763]=parity;
if (cwI[343]==0) responseI[175763]=0; //assymetric
if (responseI[175763] != vnodeI[343]) parityerrors++;
parity=0;
parity+=vnodeI[72];
parity+=vnodeI[223];
parity+=vnodeI[271];
parity+=vnodeI[343];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[337555]=parity;
if (cwI[659]==0) responseI[337555]=0; //assymetric
if (responseI[337555] != vnodeI[659]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[265];
parity+=vnodeI[388];
parity+=vnodeI[660];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24212]=parity;
if (cwI[47]==0) responseI[24212]=0; //assymetric
if (responseI[24212] != vnodeI[47]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[265];
parity+=vnodeI[388];
parity+=vnodeI[660];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59540]=parity;
if (cwI[116]==0) responseI[59540]=0; //assymetric
if (responseI[59540] != vnodeI[116]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[116];
parity+=vnodeI[388];
parity+=vnodeI[660];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135828]=parity;
if (cwI[265]==0) responseI[135828]=0; //assymetric
if (responseI[135828] != vnodeI[265]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[116];
parity+=vnodeI[265];
parity+=vnodeI[660];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198804]=parity;
if (cwI[388]==0) responseI[198804]=0; //assymetric
if (responseI[198804] != vnodeI[388]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[116];
parity+=vnodeI[265];
parity+=vnodeI[388];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[338068]=parity;
if (cwI[660]==0) responseI[338068]=0; //assymetric
if (responseI[338068] != vnodeI[660]) parityerrors++;
parity=0;
parity+=vnodeI[147];
parity+=vnodeI[318];
parity+=vnodeI[484];
parity+=vnodeI[661];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53909]=parity;
if (cwI[105]==0) responseI[53909]=0; //assymetric
if (responseI[53909] != vnodeI[105]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[318];
parity+=vnodeI[484];
parity+=vnodeI[661];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75413]=parity;
if (cwI[147]==0) responseI[75413]=0; //assymetric
if (responseI[75413] != vnodeI[147]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[147];
parity+=vnodeI[484];
parity+=vnodeI[661];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162965]=parity;
if (cwI[318]==0) responseI[162965]=0; //assymetric
if (responseI[162965] != vnodeI[318]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[147];
parity+=vnodeI[318];
parity+=vnodeI[661];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247957]=parity;
if (cwI[484]==0) responseI[247957]=0; //assymetric
if (responseI[247957] != vnodeI[484]) parityerrors++;
parity=0;
parity+=vnodeI[105];
parity+=vnodeI[147];
parity+=vnodeI[318];
parity+=vnodeI[484];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[338581]=parity;
if (cwI[661]==0) responseI[338581]=0; //assymetric
if (responseI[338581] != vnodeI[661]) parityerrors++;
parity=0;
parity+=vnodeI[186];
parity+=vnodeI[427];
parity+=vnodeI[485];
parity+=vnodeI[662];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18582]=parity;
if (cwI[36]==0) responseI[18582]=0; //assymetric
if (responseI[18582] != vnodeI[36]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[427];
parity+=vnodeI[485];
parity+=vnodeI[662];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[95382]=parity;
if (cwI[186]==0) responseI[95382]=0; //assymetric
if (responseI[95382] != vnodeI[186]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[186];
parity+=vnodeI[485];
parity+=vnodeI[662];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218774]=parity;
if (cwI[427]==0) responseI[218774]=0; //assymetric
if (responseI[218774] != vnodeI[427]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[186];
parity+=vnodeI[427];
parity+=vnodeI[662];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248470]=parity;
if (cwI[485]==0) responseI[248470]=0; //assymetric
if (responseI[248470] != vnodeI[485]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[186];
parity+=vnodeI[427];
parity+=vnodeI[485];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[339094]=parity;
if (cwI[662]==0) responseI[339094]=0; //assymetric
if (responseI[339094] != vnodeI[662]) parityerrors++;
parity=0;
parity+=vnodeI[85];
parity+=vnodeI[318];
parity+=vnodeI[347];
parity+=vnodeI[663];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19095]=parity;
if (cwI[37]==0) responseI[19095]=0; //assymetric
if (responseI[19095] != vnodeI[37]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[318];
parity+=vnodeI[347];
parity+=vnodeI[663];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43671]=parity;
if (cwI[85]==0) responseI[43671]=0; //assymetric
if (responseI[43671] != vnodeI[85]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[85];
parity+=vnodeI[347];
parity+=vnodeI[663];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162967]=parity;
if (cwI[318]==0) responseI[162967]=0; //assymetric
if (responseI[162967] != vnodeI[318]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[85];
parity+=vnodeI[318];
parity+=vnodeI[663];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177815]=parity;
if (cwI[347]==0) responseI[177815]=0; //assymetric
if (responseI[177815] != vnodeI[347]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[85];
parity+=vnodeI[318];
parity+=vnodeI[347];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[339607]=parity;
if (cwI[663]==0) responseI[339607]=0; //assymetric
if (responseI[339607] != vnodeI[663]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[114];
parity+=vnodeI[403];
parity+=vnodeI[664];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12952]=parity;
if (cwI[25]==0) responseI[12952]=0; //assymetric
if (responseI[12952] != vnodeI[25]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[114];
parity+=vnodeI[403];
parity+=vnodeI[664];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57496]=parity;
if (cwI[112]==0) responseI[57496]=0; //assymetric
if (responseI[57496] != vnodeI[112]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[112];
parity+=vnodeI[403];
parity+=vnodeI[664];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58520]=parity;
if (cwI[114]==0) responseI[58520]=0; //assymetric
if (responseI[58520] != vnodeI[114]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[112];
parity+=vnodeI[114];
parity+=vnodeI[664];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206488]=parity;
if (cwI[403]==0) responseI[206488]=0; //assymetric
if (responseI[206488] != vnodeI[403]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[112];
parity+=vnodeI[114];
parity+=vnodeI[403];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[340120]=parity;
if (cwI[664]==0) responseI[340120]=0; //assymetric
if (responseI[340120] != vnodeI[664]) parityerrors++;
parity=0;
parity+=vnodeI[249];
parity+=vnodeI[262];
parity+=vnodeI[325];
parity+=vnodeI[479];
parity+=vnodeI[665];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122009]=parity;
if (cwI[238]==0) responseI[122009]=0; //assymetric
if (responseI[122009] != vnodeI[238]) parityerrors++;
parity=0;
parity+=vnodeI[238];
parity+=vnodeI[262];
parity+=vnodeI[325];
parity+=vnodeI[479];
parity+=vnodeI[665];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127641]=parity;
if (cwI[249]==0) responseI[127641]=0; //assymetric
if (responseI[127641] != vnodeI[249]) parityerrors++;
parity=0;
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[325];
parity+=vnodeI[479];
parity+=vnodeI[665];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134297]=parity;
if (cwI[262]==0) responseI[134297]=0; //assymetric
if (responseI[134297] != vnodeI[262]) parityerrors++;
parity=0;
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[262];
parity+=vnodeI[479];
parity+=vnodeI[665];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166553]=parity;
if (cwI[325]==0) responseI[166553]=0; //assymetric
if (responseI[166553] != vnodeI[325]) parityerrors++;
parity=0;
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[262];
parity+=vnodeI[325];
parity+=vnodeI[665];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245401]=parity;
if (cwI[479]==0) responseI[245401]=0; //assymetric
if (responseI[245401] != vnodeI[479]) parityerrors++;
parity=0;
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[262];
parity+=vnodeI[325];
parity+=vnodeI[479];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[340633]=parity;
if (cwI[665]==0) responseI[340633]=0; //assymetric
if (responseI[340633] != vnodeI[665]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[229];
parity+=vnodeI[431];
parity+=vnodeI[666];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83610]=parity;
if (cwI[163]==0) responseI[83610]=0; //assymetric
if (responseI[83610] != vnodeI[163]) parityerrors++;
parity=0;
parity+=vnodeI[163];
parity+=vnodeI[229];
parity+=vnodeI[431];
parity+=vnodeI[666];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106138]=parity;
if (cwI[207]==0) responseI[106138]=0; //assymetric
if (responseI[106138] != vnodeI[207]) parityerrors++;
parity=0;
parity+=vnodeI[163];
parity+=vnodeI[207];
parity+=vnodeI[431];
parity+=vnodeI[666];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117402]=parity;
if (cwI[229]==0) responseI[117402]=0; //assymetric
if (responseI[117402] != vnodeI[229]) parityerrors++;
parity=0;
parity+=vnodeI[163];
parity+=vnodeI[207];
parity+=vnodeI[229];
parity+=vnodeI[666];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220826]=parity;
if (cwI[431]==0) responseI[220826]=0; //assymetric
if (responseI[220826] != vnodeI[431]) parityerrors++;
parity=0;
parity+=vnodeI[163];
parity+=vnodeI[207];
parity+=vnodeI[229];
parity+=vnodeI[431];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[341146]=parity;
if (cwI[666]==0) responseI[341146]=0; //assymetric
if (responseI[341146] != vnodeI[666]) parityerrors++;
parity=0;
parity+=vnodeI[62];
parity+=vnodeI[291];
parity+=vnodeI[394];
parity+=vnodeI[667];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21659]=parity;
if (cwI[42]==0) responseI[21659]=0; //assymetric
if (responseI[21659] != vnodeI[42]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[291];
parity+=vnodeI[394];
parity+=vnodeI[667];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31899]=parity;
if (cwI[62]==0) responseI[31899]=0; //assymetric
if (responseI[31899] != vnodeI[62]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[62];
parity+=vnodeI[394];
parity+=vnodeI[667];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149147]=parity;
if (cwI[291]==0) responseI[149147]=0; //assymetric
if (responseI[149147] != vnodeI[291]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[62];
parity+=vnodeI[291];
parity+=vnodeI[667];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201883]=parity;
if (cwI[394]==0) responseI[201883]=0; //assymetric
if (responseI[201883] != vnodeI[394]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[62];
parity+=vnodeI[291];
parity+=vnodeI[394];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[341659]=parity;
if (cwI[667]==0) responseI[341659]=0; //assymetric
if (responseI[341659] != vnodeI[667]) parityerrors++;
parity=0;
parity+=vnodeI[209];
parity+=vnodeI[221];
parity+=vnodeI[366];
parity+=vnodeI[668];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86172]=parity;
if (cwI[168]==0) responseI[86172]=0; //assymetric
if (responseI[86172] != vnodeI[168]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[221];
parity+=vnodeI[366];
parity+=vnodeI[668];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107164]=parity;
if (cwI[209]==0) responseI[107164]=0; //assymetric
if (responseI[107164] != vnodeI[209]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[209];
parity+=vnodeI[366];
parity+=vnodeI[668];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113308]=parity;
if (cwI[221]==0) responseI[113308]=0; //assymetric
if (responseI[113308] != vnodeI[221]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[209];
parity+=vnodeI[221];
parity+=vnodeI[668];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187548]=parity;
if (cwI[366]==0) responseI[187548]=0; //assymetric
if (responseI[187548] != vnodeI[366]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[209];
parity+=vnodeI[221];
parity+=vnodeI[366];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[342172]=parity;
if (cwI[668]==0) responseI[342172]=0; //assymetric
if (responseI[342172] != vnodeI[668]) parityerrors++;
parity=0;
parity+=vnodeI[267];
parity+=vnodeI[308];
parity+=vnodeI[498];
parity+=vnodeI[669];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[50333]=parity;
if (cwI[98]==0) responseI[50333]=0; //assymetric
if (responseI[50333] != vnodeI[98]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[308];
parity+=vnodeI[498];
parity+=vnodeI[669];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136861]=parity;
if (cwI[267]==0) responseI[136861]=0; //assymetric
if (responseI[136861] != vnodeI[267]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[267];
parity+=vnodeI[498];
parity+=vnodeI[669];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157853]=parity;
if (cwI[308]==0) responseI[157853]=0; //assymetric
if (responseI[157853] != vnodeI[308]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[267];
parity+=vnodeI[308];
parity+=vnodeI[669];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255133]=parity;
if (cwI[498]==0) responseI[255133]=0; //assymetric
if (responseI[255133] != vnodeI[498]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[267];
parity+=vnodeI[308];
parity+=vnodeI[498];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[342685]=parity;
if (cwI[669]==0) responseI[342685]=0; //assymetric
if (responseI[342685] != vnodeI[669]) parityerrors++;
parity=0;
parity+=vnodeI[251];
parity+=vnodeI[355];
parity+=vnodeI[372];
parity+=vnodeI[670];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17566]=parity;
if (cwI[34]==0) responseI[17566]=0; //assymetric
if (responseI[17566] != vnodeI[34]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[355];
parity+=vnodeI[372];
parity+=vnodeI[670];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128670]=parity;
if (cwI[251]==0) responseI[128670]=0; //assymetric
if (responseI[128670] != vnodeI[251]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[251];
parity+=vnodeI[372];
parity+=vnodeI[670];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181918]=parity;
if (cwI[355]==0) responseI[181918]=0; //assymetric
if (responseI[181918] != vnodeI[355]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[251];
parity+=vnodeI[355];
parity+=vnodeI[670];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190622]=parity;
if (cwI[372]==0) responseI[190622]=0; //assymetric
if (responseI[190622] != vnodeI[372]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[251];
parity+=vnodeI[355];
parity+=vnodeI[372];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[343198]=parity;
if (cwI[670]==0) responseI[343198]=0; //assymetric
if (responseI[343198] != vnodeI[670]) parityerrors++;
parity=0;
parity+=vnodeI[156];
parity+=vnodeI[412];
parity+=vnodeI[446];
parity+=vnodeI[671];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55967]=parity;
if (cwI[109]==0) responseI[55967]=0; //assymetric
if (responseI[55967] != vnodeI[109]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[412];
parity+=vnodeI[446];
parity+=vnodeI[671];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80031]=parity;
if (cwI[156]==0) responseI[80031]=0; //assymetric
if (responseI[80031] != vnodeI[156]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[156];
parity+=vnodeI[446];
parity+=vnodeI[671];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211103]=parity;
if (cwI[412]==0) responseI[211103]=0; //assymetric
if (responseI[211103] != vnodeI[412]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[156];
parity+=vnodeI[412];
parity+=vnodeI[671];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228511]=parity;
if (cwI[446]==0) responseI[228511]=0; //assymetric
if (responseI[228511] != vnodeI[446]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[156];
parity+=vnodeI[412];
parity+=vnodeI[446];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[343711]=parity;
if (cwI[671]==0) responseI[343711]=0; //assymetric
if (responseI[343711] != vnodeI[671]) parityerrors++;
parity=0;
parity+=vnodeI[243];
parity+=vnodeI[494];
parity+=vnodeI[672];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51360]=parity;
if (cwI[100]==0) responseI[51360]=0; //assymetric
if (responseI[51360] != vnodeI[100]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[494];
parity+=vnodeI[672];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124576]=parity;
if (cwI[243]==0) responseI[124576]=0; //assymetric
if (responseI[124576] != vnodeI[243]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[243];
parity+=vnodeI[672];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253088]=parity;
if (cwI[494]==0) responseI[253088]=0; //assymetric
if (responseI[253088] != vnodeI[494]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[243];
parity+=vnodeI[494];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[344224]=parity;
if (cwI[672]==0) responseI[344224]=0; //assymetric
if (responseI[344224] != vnodeI[672]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[227];
parity+=vnodeI[412];
parity+=vnodeI[673];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27809]=parity;
if (cwI[54]==0) responseI[27809]=0; //assymetric
if (responseI[27809] != vnodeI[54]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[227];
parity+=vnodeI[412];
parity+=vnodeI[673];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86689]=parity;
if (cwI[169]==0) responseI[86689]=0; //assymetric
if (responseI[86689] != vnodeI[169]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[169];
parity+=vnodeI[412];
parity+=vnodeI[673];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116385]=parity;
if (cwI[227]==0) responseI[116385]=0; //assymetric
if (responseI[116385] != vnodeI[227]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[169];
parity+=vnodeI[227];
parity+=vnodeI[673];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211105]=parity;
if (cwI[412]==0) responseI[211105]=0; //assymetric
if (responseI[211105] != vnodeI[412]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[169];
parity+=vnodeI[227];
parity+=vnodeI[412];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[344737]=parity;
if (cwI[673]==0) responseI[344737]=0; //assymetric
if (responseI[344737] != vnodeI[673]) parityerrors++;
parity=0;
parity+=vnodeI[81];
parity+=vnodeI[171];
parity+=vnodeI[432];
parity+=vnodeI[674];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2210]=parity;
if (cwI[4]==0) responseI[2210]=0; //assymetric
if (responseI[2210] != vnodeI[4]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[171];
parity+=vnodeI[432];
parity+=vnodeI[674];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41634]=parity;
if (cwI[81]==0) responseI[41634]=0; //assymetric
if (responseI[41634] != vnodeI[81]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[81];
parity+=vnodeI[432];
parity+=vnodeI[674];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87714]=parity;
if (cwI[171]==0) responseI[87714]=0; //assymetric
if (responseI[87714] != vnodeI[171]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[81];
parity+=vnodeI[171];
parity+=vnodeI[674];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[221346]=parity;
if (cwI[432]==0) responseI[221346]=0; //assymetric
if (responseI[221346] != vnodeI[432]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[81];
parity+=vnodeI[171];
parity+=vnodeI[432];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[345250]=parity;
if (cwI[674]==0) responseI[345250]=0; //assymetric
if (responseI[345250] != vnodeI[674]) parityerrors++;
parity=0;
parity+=vnodeI[125];
parity+=vnodeI[147];
parity+=vnodeI[262];
parity+=vnodeI[675];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20131]=parity;
if (cwI[39]==0) responseI[20131]=0; //assymetric
if (responseI[20131] != vnodeI[39]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[147];
parity+=vnodeI[262];
parity+=vnodeI[675];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64163]=parity;
if (cwI[125]==0) responseI[64163]=0; //assymetric
if (responseI[64163] != vnodeI[125]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[125];
parity+=vnodeI[262];
parity+=vnodeI[675];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75427]=parity;
if (cwI[147]==0) responseI[75427]=0; //assymetric
if (responseI[75427] != vnodeI[147]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[125];
parity+=vnodeI[147];
parity+=vnodeI[675];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134307]=parity;
if (cwI[262]==0) responseI[134307]=0; //assymetric
if (responseI[134307] != vnodeI[262]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[125];
parity+=vnodeI[147];
parity+=vnodeI[262];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[345763]=parity;
if (cwI[675]==0) responseI[345763]=0; //assymetric
if (responseI[345763] != vnodeI[675]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[270];
parity+=vnodeI[462];
parity+=vnodeI[504];
parity+=vnodeI[676];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28836]=parity;
if (cwI[56]==0) responseI[28836]=0; //assymetric
if (responseI[28836] != vnodeI[56]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[270];
parity+=vnodeI[462];
parity+=vnodeI[504];
parity+=vnodeI[676];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41124]=parity;
if (cwI[80]==0) responseI[41124]=0; //assymetric
if (responseI[41124] != vnodeI[80]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[80];
parity+=vnodeI[462];
parity+=vnodeI[504];
parity+=vnodeI[676];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138404]=parity;
if (cwI[270]==0) responseI[138404]=0; //assymetric
if (responseI[138404] != vnodeI[270]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[80];
parity+=vnodeI[270];
parity+=vnodeI[504];
parity+=vnodeI[676];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236708]=parity;
if (cwI[462]==0) responseI[236708]=0; //assymetric
if (responseI[236708] != vnodeI[462]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[80];
parity+=vnodeI[270];
parity+=vnodeI[462];
parity+=vnodeI[676];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258212]=parity;
if (cwI[504]==0) responseI[258212]=0; //assymetric
if (responseI[258212] != vnodeI[504]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[80];
parity+=vnodeI[270];
parity+=vnodeI[462];
parity+=vnodeI[504];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[346276]=parity;
if (cwI[676]==0) responseI[346276]=0; //assymetric
if (responseI[346276] != vnodeI[676]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[176];
parity+=vnodeI[343];
parity+=vnodeI[677];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31397]=parity;
if (cwI[61]==0) responseI[31397]=0; //assymetric
if (responseI[31397] != vnodeI[61]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[176];
parity+=vnodeI[343];
parity+=vnodeI[677];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34981]=parity;
if (cwI[68]==0) responseI[34981]=0; //assymetric
if (responseI[34981] != vnodeI[68]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[68];
parity+=vnodeI[343];
parity+=vnodeI[677];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90277]=parity;
if (cwI[176]==0) responseI[90277]=0; //assymetric
if (responseI[90277] != vnodeI[176]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[68];
parity+=vnodeI[176];
parity+=vnodeI[677];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175781]=parity;
if (cwI[343]==0) responseI[175781]=0; //assymetric
if (responseI[175781] != vnodeI[343]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[68];
parity+=vnodeI[176];
parity+=vnodeI[343];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[346789]=parity;
if (cwI[677]==0) responseI[346789]=0; //assymetric
if (responseI[346789] != vnodeI[677]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[181];
parity+=vnodeI[497];
parity+=vnodeI[678];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49830]=parity;
if (cwI[97]==0) responseI[49830]=0; //assymetric
if (responseI[49830] != vnodeI[97]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[181];
parity+=vnodeI[497];
parity+=vnodeI[678];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[72358]=parity;
if (cwI[141]==0) responseI[72358]=0; //assymetric
if (responseI[72358] != vnodeI[141]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[141];
parity+=vnodeI[497];
parity+=vnodeI[678];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92838]=parity;
if (cwI[181]==0) responseI[92838]=0; //assymetric
if (responseI[92838] != vnodeI[181]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[141];
parity+=vnodeI[181];
parity+=vnodeI[678];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[254630]=parity;
if (cwI[497]==0) responseI[254630]=0; //assymetric
if (responseI[254630] != vnodeI[497]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[141];
parity+=vnodeI[181];
parity+=vnodeI[497];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[347302]=parity;
if (cwI[678]==0) responseI[347302]=0; //assymetric
if (responseI[347302] != vnodeI[678]) parityerrors++;
parity=0;
parity+=vnodeI[377];
parity+=vnodeI[421];
parity+=vnodeI[445];
parity+=vnodeI[679];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40615]=parity;
if (cwI[79]==0) responseI[40615]=0; //assymetric
if (responseI[40615] != vnodeI[79]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[421];
parity+=vnodeI[445];
parity+=vnodeI[679];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[193191]=parity;
if (cwI[377]==0) responseI[193191]=0; //assymetric
if (responseI[193191] != vnodeI[377]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[377];
parity+=vnodeI[445];
parity+=vnodeI[679];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215719]=parity;
if (cwI[421]==0) responseI[215719]=0; //assymetric
if (responseI[215719] != vnodeI[421]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[377];
parity+=vnodeI[421];
parity+=vnodeI[679];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228007]=parity;
if (cwI[445]==0) responseI[228007]=0; //assymetric
if (responseI[228007] != vnodeI[445]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[377];
parity+=vnodeI[421];
parity+=vnodeI[445];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[347815]=parity;
if (cwI[679]==0) responseI[347815]=0; //assymetric
if (responseI[347815] != vnodeI[679]) parityerrors++;
parity=0;
parity+=vnodeI[316];
parity+=vnodeI[339];
parity+=vnodeI[396];
parity+=vnodeI[680];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36520]=parity;
if (cwI[71]==0) responseI[36520]=0; //assymetric
if (responseI[36520] != vnodeI[71]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[339];
parity+=vnodeI[396];
parity+=vnodeI[680];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161960]=parity;
if (cwI[316]==0) responseI[161960]=0; //assymetric
if (responseI[161960] != vnodeI[316]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[316];
parity+=vnodeI[396];
parity+=vnodeI[680];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173736]=parity;
if (cwI[339]==0) responseI[173736]=0; //assymetric
if (responseI[173736] != vnodeI[339]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[316];
parity+=vnodeI[339];
parity+=vnodeI[680];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202920]=parity;
if (cwI[396]==0) responseI[202920]=0; //assymetric
if (responseI[202920] != vnodeI[396]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[316];
parity+=vnodeI[339];
parity+=vnodeI[396];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[348328]=parity;
if (cwI[680]==0) responseI[348328]=0; //assymetric
if (responseI[348328] != vnodeI[680]) parityerrors++;
parity=0;
parity+=vnodeI[479];
parity+=vnodeI[494];
parity+=vnodeI[681];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171689]=parity;
if (cwI[335]==0) responseI[171689]=0; //assymetric
if (responseI[171689] != vnodeI[335]) parityerrors++;
parity=0;
parity+=vnodeI[335];
parity+=vnodeI[494];
parity+=vnodeI[681];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245417]=parity;
if (cwI[479]==0) responseI[245417]=0; //assymetric
if (responseI[245417] != vnodeI[479]) parityerrors++;
parity=0;
parity+=vnodeI[335];
parity+=vnodeI[479];
parity+=vnodeI[681];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253097]=parity;
if (cwI[494]==0) responseI[253097]=0; //assymetric
if (responseI[253097] != vnodeI[494]) parityerrors++;
parity=0;
parity+=vnodeI[335];
parity+=vnodeI[479];
parity+=vnodeI[494];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[348841]=parity;
if (cwI[681]==0) responseI[348841]=0; //assymetric
if (responseI[348841] != vnodeI[681]) parityerrors++;
parity=0;
parity+=vnodeI[167];
parity+=vnodeI[319];
parity+=vnodeI[442];
parity+=vnodeI[682];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28330]=parity;
if (cwI[55]==0) responseI[28330]=0; //assymetric
if (responseI[28330] != vnodeI[55]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[319];
parity+=vnodeI[442];
parity+=vnodeI[682];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85674]=parity;
if (cwI[167]==0) responseI[85674]=0; //assymetric
if (responseI[85674] != vnodeI[167]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[167];
parity+=vnodeI[442];
parity+=vnodeI[682];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163498]=parity;
if (cwI[319]==0) responseI[163498]=0; //assymetric
if (responseI[163498] != vnodeI[319]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[167];
parity+=vnodeI[319];
parity+=vnodeI[682];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226474]=parity;
if (cwI[442]==0) responseI[226474]=0; //assymetric
if (responseI[226474] != vnodeI[442]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[167];
parity+=vnodeI[319];
parity+=vnodeI[442];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[349354]=parity;
if (cwI[682]==0) responseI[349354]=0; //assymetric
if (responseI[349354] != vnodeI[682]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[274];
parity+=vnodeI[291];
parity+=vnodeI[339];
parity+=vnodeI[683];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40107]=parity;
if (cwI[78]==0) responseI[40107]=0; //assymetric
if (responseI[40107] != vnodeI[78]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[274];
parity+=vnodeI[291];
parity+=vnodeI[339];
parity+=vnodeI[683];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[72363]=parity;
if (cwI[141]==0) responseI[72363]=0; //assymetric
if (responseI[72363] != vnodeI[141]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[141];
parity+=vnodeI[291];
parity+=vnodeI[339];
parity+=vnodeI[683];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140459]=parity;
if (cwI[274]==0) responseI[140459]=0; //assymetric
if (responseI[140459] != vnodeI[274]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[141];
parity+=vnodeI[274];
parity+=vnodeI[339];
parity+=vnodeI[683];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149163]=parity;
if (cwI[291]==0) responseI[149163]=0; //assymetric
if (responseI[149163] != vnodeI[291]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[141];
parity+=vnodeI[274];
parity+=vnodeI[291];
parity+=vnodeI[683];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173739]=parity;
if (cwI[339]==0) responseI[173739]=0; //assymetric
if (responseI[173739] != vnodeI[339]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[141];
parity+=vnodeI[274];
parity+=vnodeI[291];
parity+=vnodeI[339];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[349867]=parity;
if (cwI[683]==0) responseI[349867]=0; //assymetric
if (responseI[349867] != vnodeI[683]) parityerrors++;
parity=0;
parity+=vnodeI[237];
parity+=vnodeI[257];
parity+=vnodeI[447];
parity+=vnodeI[684];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94892]=parity;
if (cwI[185]==0) responseI[94892]=0; //assymetric
if (responseI[94892] != vnodeI[185]) parityerrors++;
parity=0;
parity+=vnodeI[185];
parity+=vnodeI[257];
parity+=vnodeI[447];
parity+=vnodeI[684];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121516]=parity;
if (cwI[237]==0) responseI[121516]=0; //assymetric
if (responseI[121516] != vnodeI[237]) parityerrors++;
parity=0;
parity+=vnodeI[185];
parity+=vnodeI[237];
parity+=vnodeI[447];
parity+=vnodeI[684];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131756]=parity;
if (cwI[257]==0) responseI[131756]=0; //assymetric
if (responseI[131756] != vnodeI[257]) parityerrors++;
parity=0;
parity+=vnodeI[185];
parity+=vnodeI[237];
parity+=vnodeI[257];
parity+=vnodeI[684];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229036]=parity;
if (cwI[447]==0) responseI[229036]=0; //assymetric
if (responseI[229036] != vnodeI[447]) parityerrors++;
parity=0;
parity+=vnodeI[185];
parity+=vnodeI[237];
parity+=vnodeI[257];
parity+=vnodeI[447];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[350380]=parity;
if (cwI[684]==0) responseI[350380]=0; //assymetric
if (responseI[350380] != vnodeI[684]) parityerrors++;
parity=0;
parity+=vnodeI[409];
parity+=vnodeI[443];
parity+=vnodeI[503];
parity+=vnodeI[685];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207533]=parity;
if (cwI[405]==0) responseI[207533]=0; //assymetric
if (responseI[207533] != vnodeI[405]) parityerrors++;
parity=0;
parity+=vnodeI[405];
parity+=vnodeI[443];
parity+=vnodeI[503];
parity+=vnodeI[685];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209581]=parity;
if (cwI[409]==0) responseI[209581]=0; //assymetric
if (responseI[209581] != vnodeI[409]) parityerrors++;
parity=0;
parity+=vnodeI[405];
parity+=vnodeI[409];
parity+=vnodeI[503];
parity+=vnodeI[685];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226989]=parity;
if (cwI[443]==0) responseI[226989]=0; //assymetric
if (responseI[226989] != vnodeI[443]) parityerrors++;
parity=0;
parity+=vnodeI[405];
parity+=vnodeI[409];
parity+=vnodeI[443];
parity+=vnodeI[685];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257709]=parity;
if (cwI[503]==0) responseI[257709]=0; //assymetric
if (responseI[257709] != vnodeI[503]) parityerrors++;
parity=0;
parity+=vnodeI[405];
parity+=vnodeI[409];
parity+=vnodeI[443];
parity+=vnodeI[503];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[350893]=parity;
if (cwI[685]==0) responseI[350893]=0; //assymetric
if (responseI[350893] != vnodeI[685]) parityerrors++;
parity=0;
parity+=vnodeI[148];
parity+=vnodeI[400];
parity+=vnodeI[404];
parity+=vnodeI[686];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29358]=parity;
if (cwI[57]==0) responseI[29358]=0; //assymetric
if (responseI[29358] != vnodeI[57]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[400];
parity+=vnodeI[404];
parity+=vnodeI[686];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75950]=parity;
if (cwI[148]==0) responseI[75950]=0; //assymetric
if (responseI[75950] != vnodeI[148]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[148];
parity+=vnodeI[404];
parity+=vnodeI[686];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204974]=parity;
if (cwI[400]==0) responseI[204974]=0; //assymetric
if (responseI[204974] != vnodeI[400]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[148];
parity+=vnodeI[400];
parity+=vnodeI[686];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207022]=parity;
if (cwI[404]==0) responseI[207022]=0; //assymetric
if (responseI[207022] != vnodeI[404]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[148];
parity+=vnodeI[400];
parity+=vnodeI[404];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[351406]=parity;
if (cwI[686]==0) responseI[351406]=0; //assymetric
if (responseI[351406] != vnodeI[686]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[342];
parity+=vnodeI[422];
parity+=vnodeI[477];
parity+=vnodeI[687];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49327]=parity;
if (cwI[96]==0) responseI[49327]=0; //assymetric
if (responseI[49327] != vnodeI[96]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[342];
parity+=vnodeI[422];
parity+=vnodeI[477];
parity+=vnodeI[687];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117935]=parity;
if (cwI[230]==0) responseI[117935]=0; //assymetric
if (responseI[117935] != vnodeI[230]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[230];
parity+=vnodeI[422];
parity+=vnodeI[477];
parity+=vnodeI[687];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175279]=parity;
if (cwI[342]==0) responseI[175279]=0; //assymetric
if (responseI[175279] != vnodeI[342]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[230];
parity+=vnodeI[342];
parity+=vnodeI[477];
parity+=vnodeI[687];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216239]=parity;
if (cwI[422]==0) responseI[216239]=0; //assymetric
if (responseI[216239] != vnodeI[422]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[230];
parity+=vnodeI[342];
parity+=vnodeI[422];
parity+=vnodeI[687];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244399]=parity;
if (cwI[477]==0) responseI[244399]=0; //assymetric
if (responseI[244399] != vnodeI[477]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[230];
parity+=vnodeI[342];
parity+=vnodeI[422];
parity+=vnodeI[477];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[351919]=parity;
if (cwI[687]==0) responseI[351919]=0; //assymetric
if (responseI[351919] != vnodeI[687]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[222];
parity+=vnodeI[457];
parity+=vnodeI[688];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30896]=parity;
if (cwI[60]==0) responseI[30896]=0; //assymetric
if (responseI[30896] != vnodeI[60]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[222];
parity+=vnodeI[457];
parity+=vnodeI[688];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73904]=parity;
if (cwI[144]==0) responseI[73904]=0; //assymetric
if (responseI[73904] != vnodeI[144]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[144];
parity+=vnodeI[457];
parity+=vnodeI[688];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113840]=parity;
if (cwI[222]==0) responseI[113840]=0; //assymetric
if (responseI[113840] != vnodeI[222]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[144];
parity+=vnodeI[222];
parity+=vnodeI[688];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234160]=parity;
if (cwI[457]==0) responseI[234160]=0; //assymetric
if (responseI[234160] != vnodeI[457]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[144];
parity+=vnodeI[222];
parity+=vnodeI[457];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[352432]=parity;
if (cwI[688]==0) responseI[352432]=0; //assymetric
if (responseI[352432] != vnodeI[688]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[224];
parity+=vnodeI[411];
parity+=vnodeI[435];
parity+=vnodeI[689];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12465]=parity;
if (cwI[24]==0) responseI[12465]=0; //assymetric
if (responseI[12465] != vnodeI[24]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[224];
parity+=vnodeI[411];
parity+=vnodeI[435];
parity+=vnodeI[689];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71345]=parity;
if (cwI[139]==0) responseI[71345]=0; //assymetric
if (responseI[71345] != vnodeI[139]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[139];
parity+=vnodeI[411];
parity+=vnodeI[435];
parity+=vnodeI[689];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114865]=parity;
if (cwI[224]==0) responseI[114865]=0; //assymetric
if (responseI[114865] != vnodeI[224]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[139];
parity+=vnodeI[224];
parity+=vnodeI[435];
parity+=vnodeI[689];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210609]=parity;
if (cwI[411]==0) responseI[210609]=0; //assymetric
if (responseI[210609] != vnodeI[411]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[139];
parity+=vnodeI[224];
parity+=vnodeI[411];
parity+=vnodeI[689];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222897]=parity;
if (cwI[435]==0) responseI[222897]=0; //assymetric
if (responseI[222897] != vnodeI[435]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[139];
parity+=vnodeI[224];
parity+=vnodeI[411];
parity+=vnodeI[435];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[352945]=parity;
if (cwI[689]==0) responseI[352945]=0; //assymetric
if (responseI[352945] != vnodeI[689]) parityerrors++;
parity=0;
parity+=vnodeI[337];
parity+=vnodeI[353];
parity+=vnodeI[431];
parity+=vnodeI[690];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112818]=parity;
if (cwI[220]==0) responseI[112818]=0; //assymetric
if (responseI[112818] != vnodeI[220]) parityerrors++;
parity=0;
parity+=vnodeI[220];
parity+=vnodeI[353];
parity+=vnodeI[431];
parity+=vnodeI[690];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172722]=parity;
if (cwI[337]==0) responseI[172722]=0; //assymetric
if (responseI[172722] != vnodeI[337]) parityerrors++;
parity=0;
parity+=vnodeI[220];
parity+=vnodeI[337];
parity+=vnodeI[431];
parity+=vnodeI[690];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180914]=parity;
if (cwI[353]==0) responseI[180914]=0; //assymetric
if (responseI[180914] != vnodeI[353]) parityerrors++;
parity=0;
parity+=vnodeI[220];
parity+=vnodeI[337];
parity+=vnodeI[353];
parity+=vnodeI[690];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220850]=parity;
if (cwI[431]==0) responseI[220850]=0; //assymetric
if (responseI[220850] != vnodeI[431]) parityerrors++;
parity=0;
parity+=vnodeI[220];
parity+=vnodeI[337];
parity+=vnodeI[353];
parity+=vnodeI[431];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[353458]=parity;
if (cwI[690]==0) responseI[353458]=0; //assymetric
if (responseI[353458] != vnodeI[690]) parityerrors++;
parity=0;
parity+=vnodeI[156];
parity+=vnodeI[379];
parity+=vnodeI[691];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71859]=parity;
if (cwI[140]==0) responseI[71859]=0; //assymetric
if (responseI[71859] != vnodeI[140]) parityerrors++;
parity=0;
parity+=vnodeI[140];
parity+=vnodeI[379];
parity+=vnodeI[691];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80051]=parity;
if (cwI[156]==0) responseI[80051]=0; //assymetric
if (responseI[80051] != vnodeI[156]) parityerrors++;
parity=0;
parity+=vnodeI[140];
parity+=vnodeI[156];
parity+=vnodeI[691];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194227]=parity;
if (cwI[379]==0) responseI[194227]=0; //assymetric
if (responseI[194227] != vnodeI[379]) parityerrors++;
parity=0;
parity+=vnodeI[140];
parity+=vnodeI[156];
parity+=vnodeI[379];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[353971]=parity;
if (cwI[691]==0) responseI[353971]=0; //assymetric
if (responseI[353971] != vnodeI[691]) parityerrors++;
parity=0;
parity+=vnodeI[182];
parity+=vnodeI[219];
parity+=vnodeI[274];
parity+=vnodeI[692];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90804]=parity;
if (cwI[177]==0) responseI[90804]=0; //assymetric
if (responseI[90804] != vnodeI[177]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[219];
parity+=vnodeI[274];
parity+=vnodeI[692];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93364]=parity;
if (cwI[182]==0) responseI[93364]=0; //assymetric
if (responseI[93364] != vnodeI[182]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[182];
parity+=vnodeI[274];
parity+=vnodeI[692];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112308]=parity;
if (cwI[219]==0) responseI[112308]=0; //assymetric
if (responseI[112308] != vnodeI[219]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[182];
parity+=vnodeI[219];
parity+=vnodeI[692];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140468]=parity;
if (cwI[274]==0) responseI[140468]=0; //assymetric
if (responseI[140468] != vnodeI[274]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[182];
parity+=vnodeI[219];
parity+=vnodeI[274];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[354484]=parity;
if (cwI[692]==0) responseI[354484]=0; //assymetric
if (responseI[354484] != vnodeI[692]) parityerrors++;
parity=0;
parity+=vnodeI[291];
parity+=vnodeI[425];
parity+=vnodeI[430];
parity+=vnodeI[693];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1717]=parity;
if (cwI[3]==0) responseI[1717]=0; //assymetric
if (responseI[1717] != vnodeI[3]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[425];
parity+=vnodeI[430];
parity+=vnodeI[693];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149173]=parity;
if (cwI[291]==0) responseI[149173]=0; //assymetric
if (responseI[149173] != vnodeI[291]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[291];
parity+=vnodeI[430];
parity+=vnodeI[693];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217781]=parity;
if (cwI[425]==0) responseI[217781]=0; //assymetric
if (responseI[217781] != vnodeI[425]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[291];
parity+=vnodeI[425];
parity+=vnodeI[693];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220341]=parity;
if (cwI[430]==0) responseI[220341]=0; //assymetric
if (responseI[220341] != vnodeI[430]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[291];
parity+=vnodeI[425];
parity+=vnodeI[430];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[354997]=parity;
if (cwI[693]==0) responseI[354997]=0; //assymetric
if (responseI[354997] != vnodeI[693]) parityerrors++;
parity=0;
parity+=vnodeI[200];
parity+=vnodeI[250];
parity+=vnodeI[286];
parity+=vnodeI[381];
parity+=vnodeI[430];
parity+=vnodeI[511];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94390]=parity;
if (cwI[184]==0) responseI[94390]=0; //assymetric
if (responseI[94390] != vnodeI[184]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[250];
parity+=vnodeI[286];
parity+=vnodeI[381];
parity+=vnodeI[430];
parity+=vnodeI[511];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102582]=parity;
if (cwI[200]==0) responseI[102582]=0; //assymetric
if (responseI[102582] != vnodeI[200]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[200];
parity+=vnodeI[286];
parity+=vnodeI[381];
parity+=vnodeI[430];
parity+=vnodeI[511];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128182]=parity;
if (cwI[250]==0) responseI[128182]=0; //assymetric
if (responseI[128182] != vnodeI[250]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[200];
parity+=vnodeI[250];
parity+=vnodeI[381];
parity+=vnodeI[430];
parity+=vnodeI[511];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146614]=parity;
if (cwI[286]==0) responseI[146614]=0; //assymetric
if (responseI[146614] != vnodeI[286]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[200];
parity+=vnodeI[250];
parity+=vnodeI[286];
parity+=vnodeI[430];
parity+=vnodeI[511];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[195254]=parity;
if (cwI[381]==0) responseI[195254]=0; //assymetric
if (responseI[195254] != vnodeI[381]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[200];
parity+=vnodeI[250];
parity+=vnodeI[286];
parity+=vnodeI[381];
parity+=vnodeI[511];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220342]=parity;
if (cwI[430]==0) responseI[220342]=0; //assymetric
if (responseI[220342] != vnodeI[430]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[200];
parity+=vnodeI[250];
parity+=vnodeI[286];
parity+=vnodeI[381];
parity+=vnodeI[430];
parity+=vnodeI[694];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261814]=parity;
if (cwI[511]==0) responseI[261814]=0; //assymetric
if (responseI[261814] != vnodeI[511]) parityerrors++;
parity=0;
parity+=vnodeI[184];
parity+=vnodeI[200];
parity+=vnodeI[250];
parity+=vnodeI[286];
parity+=vnodeI[381];
parity+=vnodeI[430];
parity+=vnodeI[511];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[355510]=parity;
if (cwI[694]==0) responseI[355510]=0; //assymetric
if (responseI[355510] != vnodeI[694]) parityerrors++;
parity=0;
parity+=vnodeI[128];
parity+=vnodeI[218];
parity+=vnodeI[337];
parity+=vnodeI[695];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7863]=parity;
if (cwI[15]==0) responseI[7863]=0; //assymetric
if (responseI[7863] != vnodeI[15]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[218];
parity+=vnodeI[337];
parity+=vnodeI[695];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65719]=parity;
if (cwI[128]==0) responseI[65719]=0; //assymetric
if (responseI[65719] != vnodeI[128]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[128];
parity+=vnodeI[337];
parity+=vnodeI[695];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111799]=parity;
if (cwI[218]==0) responseI[111799]=0; //assymetric
if (responseI[111799] != vnodeI[218]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[128];
parity+=vnodeI[218];
parity+=vnodeI[695];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172727]=parity;
if (cwI[337]==0) responseI[172727]=0; //assymetric
if (responseI[172727] != vnodeI[337]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[128];
parity+=vnodeI[218];
parity+=vnodeI[337];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[356023]=parity;
if (cwI[695]==0) responseI[356023]=0; //assymetric
if (responseI[356023] != vnodeI[695]) parityerrors++;
parity=0;
parity+=vnodeI[377];
parity+=vnodeI[480];
parity+=vnodeI[510];
parity+=vnodeI[696];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82104]=parity;
if (cwI[160]==0) responseI[82104]=0; //assymetric
if (responseI[82104] != vnodeI[160]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[480];
parity+=vnodeI[510];
parity+=vnodeI[696];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[193208]=parity;
if (cwI[377]==0) responseI[193208]=0; //assymetric
if (responseI[193208] != vnodeI[377]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[377];
parity+=vnodeI[510];
parity+=vnodeI[696];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245944]=parity;
if (cwI[480]==0) responseI[245944]=0; //assymetric
if (responseI[245944] != vnodeI[480]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[377];
parity+=vnodeI[480];
parity+=vnodeI[696];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261304]=parity;
if (cwI[510]==0) responseI[261304]=0; //assymetric
if (responseI[261304] != vnodeI[510]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[377];
parity+=vnodeI[480];
parity+=vnodeI[510];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[356536]=parity;
if (cwI[696]==0) responseI[356536]=0; //assymetric
if (responseI[356536] != vnodeI[696]) parityerrors++;
parity=0;
parity+=vnodeI[228];
parity+=vnodeI[304];
parity+=vnodeI[358];
parity+=vnodeI[697];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24761]=parity;
if (cwI[48]==0) responseI[24761]=0; //assymetric
if (responseI[24761] != vnodeI[48]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[304];
parity+=vnodeI[358];
parity+=vnodeI[697];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116921]=parity;
if (cwI[228]==0) responseI[116921]=0; //assymetric
if (responseI[116921] != vnodeI[228]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[228];
parity+=vnodeI[358];
parity+=vnodeI[697];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155833]=parity;
if (cwI[304]==0) responseI[155833]=0; //assymetric
if (responseI[155833] != vnodeI[304]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[228];
parity+=vnodeI[304];
parity+=vnodeI[697];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183481]=parity;
if (cwI[358]==0) responseI[183481]=0; //assymetric
if (responseI[183481] != vnodeI[358]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[228];
parity+=vnodeI[304];
parity+=vnodeI[358];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[357049]=parity;
if (cwI[697]==0) responseI[357049]=0; //assymetric
if (responseI[357049] != vnodeI[697]) parityerrors++;
parity=0;
parity+=vnodeI[429];
parity+=vnodeI[483];
parity+=vnodeI[486];
parity+=vnodeI[698];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161466]=parity;
if (cwI[315]==0) responseI[161466]=0; //assymetric
if (responseI[161466] != vnodeI[315]) parityerrors++;
parity=0;
parity+=vnodeI[315];
parity+=vnodeI[483];
parity+=vnodeI[486];
parity+=vnodeI[698];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[219834]=parity;
if (cwI[429]==0) responseI[219834]=0; //assymetric
if (responseI[219834] != vnodeI[429]) parityerrors++;
parity=0;
parity+=vnodeI[315];
parity+=vnodeI[429];
parity+=vnodeI[486];
parity+=vnodeI[698];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247482]=parity;
if (cwI[483]==0) responseI[247482]=0; //assymetric
if (responseI[247482] != vnodeI[483]) parityerrors++;
parity=0;
parity+=vnodeI[315];
parity+=vnodeI[429];
parity+=vnodeI[483];
parity+=vnodeI[698];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249018]=parity;
if (cwI[486]==0) responseI[249018]=0; //assymetric
if (responseI[249018] != vnodeI[486]) parityerrors++;
parity=0;
parity+=vnodeI[315];
parity+=vnodeI[429];
parity+=vnodeI[483];
parity+=vnodeI[486];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[357562]=parity;
if (cwI[698]==0) responseI[357562]=0; //assymetric
if (responseI[357562] != vnodeI[698]) parityerrors++;
parity=0;
parity+=vnodeI[285];
parity+=vnodeI[360];
parity+=vnodeI[453];
parity+=vnodeI[699];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49339]=parity;
if (cwI[96]==0) responseI[49339]=0; //assymetric
if (responseI[49339] != vnodeI[96]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[360];
parity+=vnodeI[453];
parity+=vnodeI[699];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146107]=parity;
if (cwI[285]==0) responseI[146107]=0; //assymetric
if (responseI[146107] != vnodeI[285]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[285];
parity+=vnodeI[453];
parity+=vnodeI[699];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184507]=parity;
if (cwI[360]==0) responseI[184507]=0; //assymetric
if (responseI[184507] != vnodeI[360]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[285];
parity+=vnodeI[360];
parity+=vnodeI[699];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232123]=parity;
if (cwI[453]==0) responseI[232123]=0; //assymetric
if (responseI[232123] != vnodeI[453]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[285];
parity+=vnodeI[360];
parity+=vnodeI[453];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[358075]=parity;
if (cwI[699]==0) responseI[358075]=0; //assymetric
if (responseI[358075] != vnodeI[699]) parityerrors++;
parity=0;
parity+=vnodeI[272];
parity+=vnodeI[409];
parity+=vnodeI[700];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129724]=parity;
if (cwI[253]==0) responseI[129724]=0; //assymetric
if (responseI[129724] != vnodeI[253]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[409];
parity+=vnodeI[700];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[139452]=parity;
if (cwI[272]==0) responseI[139452]=0; //assymetric
if (responseI[139452] != vnodeI[272]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[272];
parity+=vnodeI[700];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209596]=parity;
if (cwI[409]==0) responseI[209596]=0; //assymetric
if (responseI[209596] != vnodeI[409]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[272];
parity+=vnodeI[409];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[358588]=parity;
if (cwI[700]==0) responseI[358588]=0; //assymetric
if (responseI[358588] != vnodeI[700]) parityerrors++;
parity=0;
parity+=vnodeI[237];
parity+=vnodeI[255];
parity+=vnodeI[260];
parity+=vnodeI[701];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90301]=parity;
if (cwI[176]==0) responseI[90301]=0; //assymetric
if (responseI[90301] != vnodeI[176]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[255];
parity+=vnodeI[260];
parity+=vnodeI[701];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121533]=parity;
if (cwI[237]==0) responseI[121533]=0; //assymetric
if (responseI[121533] != vnodeI[237]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[237];
parity+=vnodeI[260];
parity+=vnodeI[701];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130749]=parity;
if (cwI[255]==0) responseI[130749]=0; //assymetric
if (responseI[130749] != vnodeI[255]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[237];
parity+=vnodeI[255];
parity+=vnodeI[701];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133309]=parity;
if (cwI[260]==0) responseI[133309]=0; //assymetric
if (responseI[133309] != vnodeI[260]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[237];
parity+=vnodeI[255];
parity+=vnodeI[260];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[359101]=parity;
if (cwI[701]==0) responseI[359101]=0; //assymetric
if (responseI[359101] != vnodeI[701]) parityerrors++;
parity=0;
parity+=vnodeI[376];
parity+=vnodeI[460];
parity+=vnodeI[481];
parity+=vnodeI[702];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111806]=parity;
if (cwI[218]==0) responseI[111806]=0; //assymetric
if (responseI[111806] != vnodeI[218]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[460];
parity+=vnodeI[481];
parity+=vnodeI[702];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192702]=parity;
if (cwI[376]==0) responseI[192702]=0; //assymetric
if (responseI[192702] != vnodeI[376]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[376];
parity+=vnodeI[481];
parity+=vnodeI[702];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235710]=parity;
if (cwI[460]==0) responseI[235710]=0; //assymetric
if (responseI[235710] != vnodeI[460]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[376];
parity+=vnodeI[460];
parity+=vnodeI[702];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246462]=parity;
if (cwI[481]==0) responseI[246462]=0; //assymetric
if (responseI[246462] != vnodeI[481]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[376];
parity+=vnodeI[460];
parity+=vnodeI[481];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[359614]=parity;
if (cwI[702]==0) responseI[359614]=0; //assymetric
if (responseI[359614] != vnodeI[702]) parityerrors++;
parity=0;
parity+=vnodeI[358];
parity+=vnodeI[425];
parity+=vnodeI[483];
parity+=vnodeI[703];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21695]=parity;
if (cwI[42]==0) responseI[21695]=0; //assymetric
if (responseI[21695] != vnodeI[42]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[425];
parity+=vnodeI[483];
parity+=vnodeI[703];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183487]=parity;
if (cwI[358]==0) responseI[183487]=0; //assymetric
if (responseI[183487] != vnodeI[358]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[358];
parity+=vnodeI[483];
parity+=vnodeI[703];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217791]=parity;
if (cwI[425]==0) responseI[217791]=0; //assymetric
if (responseI[217791] != vnodeI[425]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[358];
parity+=vnodeI[425];
parity+=vnodeI[703];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247487]=parity;
if (cwI[483]==0) responseI[247487]=0; //assymetric
if (responseI[247487] != vnodeI[483]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[358];
parity+=vnodeI[425];
parity+=vnodeI[483];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[360127]=parity;
if (cwI[703]==0) responseI[360127]=0; //assymetric
if (responseI[360127] != vnodeI[703]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[118];
parity+=vnodeI[204];
parity+=vnodeI[704];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57536]=parity;
if (cwI[112]==0) responseI[57536]=0; //assymetric
if (responseI[57536] != vnodeI[112]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[118];
parity+=vnodeI[204];
parity+=vnodeI[704];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59584]=parity;
if (cwI[116]==0) responseI[59584]=0; //assymetric
if (responseI[59584] != vnodeI[116]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[116];
parity+=vnodeI[204];
parity+=vnodeI[704];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60608]=parity;
if (cwI[118]==0) responseI[60608]=0; //assymetric
if (responseI[60608] != vnodeI[118]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[116];
parity+=vnodeI[118];
parity+=vnodeI[704];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[104640]=parity;
if (cwI[204]==0) responseI[104640]=0; //assymetric
if (responseI[104640] != vnodeI[204]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[116];
parity+=vnodeI[118];
parity+=vnodeI[204];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[360640]=parity;
if (cwI[704]==0) responseI[360640]=0; //assymetric
if (responseI[360640] != vnodeI[704]) parityerrors++;
parity=0;
parity+=vnodeI[384];
parity+=vnodeI[453];
parity+=vnodeI[465];
parity+=vnodeI[705];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82113]=parity;
if (cwI[160]==0) responseI[82113]=0; //assymetric
if (responseI[82113] != vnodeI[160]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[453];
parity+=vnodeI[465];
parity+=vnodeI[705];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196801]=parity;
if (cwI[384]==0) responseI[196801]=0; //assymetric
if (responseI[196801] != vnodeI[384]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[384];
parity+=vnodeI[465];
parity+=vnodeI[705];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232129]=parity;
if (cwI[453]==0) responseI[232129]=0; //assymetric
if (responseI[232129] != vnodeI[453]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[384];
parity+=vnodeI[453];
parity+=vnodeI[705];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238273]=parity;
if (cwI[465]==0) responseI[238273]=0; //assymetric
if (responseI[238273] != vnodeI[465]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[384];
parity+=vnodeI[453];
parity+=vnodeI[465];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[361153]=parity;
if (cwI[705]==0) responseI[361153]=0; //assymetric
if (responseI[361153] != vnodeI[705]) parityerrors++;
parity=0;
parity+=vnodeI[123];
parity+=vnodeI[136];
parity+=vnodeI[330];
parity+=vnodeI[706];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13506]=parity;
if (cwI[26]==0) responseI[13506]=0; //assymetric
if (responseI[13506] != vnodeI[26]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[136];
parity+=vnodeI[330];
parity+=vnodeI[706];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63170]=parity;
if (cwI[123]==0) responseI[63170]=0; //assymetric
if (responseI[63170] != vnodeI[123]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[123];
parity+=vnodeI[330];
parity+=vnodeI[706];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[69826]=parity;
if (cwI[136]==0) responseI[69826]=0; //assymetric
if (responseI[69826] != vnodeI[136]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[123];
parity+=vnodeI[136];
parity+=vnodeI[706];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169154]=parity;
if (cwI[330]==0) responseI[169154]=0; //assymetric
if (responseI[169154] != vnodeI[330]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[123];
parity+=vnodeI[136];
parity+=vnodeI[330];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[361666]=parity;
if (cwI[706]==0) responseI[361666]=0; //assymetric
if (responseI[361666] != vnodeI[706]) parityerrors++;
parity=0;
parity+=vnodeI[281];
parity+=vnodeI[329];
parity+=vnodeI[478];
parity+=vnodeI[707];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90307]=parity;
if (cwI[176]==0) responseI[90307]=0; //assymetric
if (responseI[90307] != vnodeI[176]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[329];
parity+=vnodeI[478];
parity+=vnodeI[707];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[144067]=parity;
if (cwI[281]==0) responseI[144067]=0; //assymetric
if (responseI[144067] != vnodeI[281]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[281];
parity+=vnodeI[478];
parity+=vnodeI[707];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168643]=parity;
if (cwI[329]==0) responseI[168643]=0; //assymetric
if (responseI[168643] != vnodeI[329]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[281];
parity+=vnodeI[329];
parity+=vnodeI[707];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244931]=parity;
if (cwI[478]==0) responseI[244931]=0; //assymetric
if (responseI[244931] != vnodeI[478]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[281];
parity+=vnodeI[329];
parity+=vnodeI[478];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[362179]=parity;
if (cwI[707]==0) responseI[362179]=0; //assymetric
if (responseI[362179] != vnodeI[707]) parityerrors++;
parity=0;
parity+=vnodeI[282];
parity+=vnodeI[310];
parity+=vnodeI[366];
parity+=vnodeI[502];
parity+=vnodeI[708];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67268]=parity;
if (cwI[131]==0) responseI[67268]=0; //assymetric
if (responseI[67268] != vnodeI[131]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[310];
parity+=vnodeI[366];
parity+=vnodeI[502];
parity+=vnodeI[708];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[144580]=parity;
if (cwI[282]==0) responseI[144580]=0; //assymetric
if (responseI[144580] != vnodeI[282]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[282];
parity+=vnodeI[366];
parity+=vnodeI[502];
parity+=vnodeI[708];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158916]=parity;
if (cwI[310]==0) responseI[158916]=0; //assymetric
if (responseI[158916] != vnodeI[310]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[282];
parity+=vnodeI[310];
parity+=vnodeI[502];
parity+=vnodeI[708];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187588]=parity;
if (cwI[366]==0) responseI[187588]=0; //assymetric
if (responseI[187588] != vnodeI[366]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[282];
parity+=vnodeI[310];
parity+=vnodeI[366];
parity+=vnodeI[708];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257220]=parity;
if (cwI[502]==0) responseI[257220]=0; //assymetric
if (responseI[257220] != vnodeI[502]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[282];
parity+=vnodeI[310];
parity+=vnodeI[366];
parity+=vnodeI[502];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[362692]=parity;
if (cwI[708]==0) responseI[362692]=0; //assymetric
if (responseI[362692] != vnodeI[708]) parityerrors++;
parity=0;
parity+=vnodeI[239];
parity+=vnodeI[263];
parity+=vnodeI[330];
parity+=vnodeI[709];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[56517]=parity;
if (cwI[110]==0) responseI[56517]=0; //assymetric
if (responseI[56517] != vnodeI[110]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[263];
parity+=vnodeI[330];
parity+=vnodeI[709];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122565]=parity;
if (cwI[239]==0) responseI[122565]=0; //assymetric
if (responseI[122565] != vnodeI[239]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[239];
parity+=vnodeI[330];
parity+=vnodeI[709];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134853]=parity;
if (cwI[263]==0) responseI[134853]=0; //assymetric
if (responseI[134853] != vnodeI[263]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[239];
parity+=vnodeI[263];
parity+=vnodeI[709];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169157]=parity;
if (cwI[330]==0) responseI[169157]=0; //assymetric
if (responseI[169157] != vnodeI[330]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[239];
parity+=vnodeI[263];
parity+=vnodeI[330];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[363205]=parity;
if (cwI[709]==0) responseI[363205]=0; //assymetric
if (responseI[363205] != vnodeI[709]) parityerrors++;
parity=0;
parity+=vnodeI[39];
parity+=vnodeI[104];
parity+=vnodeI[293];
parity+=vnodeI[710];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[11462]=parity;
if (cwI[22]==0) responseI[11462]=0; //assymetric
if (responseI[11462] != vnodeI[22]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[104];
parity+=vnodeI[293];
parity+=vnodeI[710];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20166]=parity;
if (cwI[39]==0) responseI[20166]=0; //assymetric
if (responseI[20166] != vnodeI[39]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[39];
parity+=vnodeI[293];
parity+=vnodeI[710];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53446]=parity;
if (cwI[104]==0) responseI[53446]=0; //assymetric
if (responseI[53446] != vnodeI[104]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[39];
parity+=vnodeI[104];
parity+=vnodeI[710];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150214]=parity;
if (cwI[293]==0) responseI[150214]=0; //assymetric
if (responseI[150214] != vnodeI[293]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[39];
parity+=vnodeI[104];
parity+=vnodeI[293];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[363718]=parity;
if (cwI[710]==0) responseI[363718]=0; //assymetric
if (responseI[363718] != vnodeI[710]) parityerrors++;
parity=0;
parity+=vnodeI[213];
parity+=vnodeI[307];
parity+=vnodeI[477];
parity+=vnodeI[711];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29895]=parity;
if (cwI[58]==0) responseI[29895]=0; //assymetric
if (responseI[29895] != vnodeI[58]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[307];
parity+=vnodeI[477];
parity+=vnodeI[711];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109255]=parity;
if (cwI[213]==0) responseI[109255]=0; //assymetric
if (responseI[109255] != vnodeI[213]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[213];
parity+=vnodeI[477];
parity+=vnodeI[711];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157383]=parity;
if (cwI[307]==0) responseI[157383]=0; //assymetric
if (responseI[157383] != vnodeI[307]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[213];
parity+=vnodeI[307];
parity+=vnodeI[711];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244423]=parity;
if (cwI[477]==0) responseI[244423]=0; //assymetric
if (responseI[244423] != vnodeI[477]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[213];
parity+=vnodeI[307];
parity+=vnodeI[477];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[364231]=parity;
if (cwI[711]==0) responseI[364231]=0; //assymetric
if (responseI[364231] != vnodeI[711]) parityerrors++;
parity=0;
parity+=vnodeI[344];
parity+=vnodeI[401];
parity+=vnodeI[492];
parity+=vnodeI[712];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113864]=parity;
if (cwI[222]==0) responseI[113864]=0; //assymetric
if (responseI[113864] != vnodeI[222]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[401];
parity+=vnodeI[492];
parity+=vnodeI[712];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176328]=parity;
if (cwI[344]==0) responseI[176328]=0; //assymetric
if (responseI[176328] != vnodeI[344]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[344];
parity+=vnodeI[492];
parity+=vnodeI[712];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[205512]=parity;
if (cwI[401]==0) responseI[205512]=0; //assymetric
if (responseI[205512] != vnodeI[401]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[344];
parity+=vnodeI[401];
parity+=vnodeI[712];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252104]=parity;
if (cwI[492]==0) responseI[252104]=0; //assymetric
if (responseI[252104] != vnodeI[492]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[344];
parity+=vnodeI[401];
parity+=vnodeI[492];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[364744]=parity;
if (cwI[712]==0) responseI[364744]=0; //assymetric
if (responseI[364744] != vnodeI[712]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[268];
parity+=vnodeI[353];
parity+=vnodeI[713];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40137]=parity;
if (cwI[78]==0) responseI[40137]=0; //assymetric
if (responseI[40137] != vnodeI[78]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[268];
parity+=vnodeI[353];
parity+=vnodeI[713];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79049]=parity;
if (cwI[154]==0) responseI[79049]=0; //assymetric
if (responseI[79049] != vnodeI[154]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[154];
parity+=vnodeI[353];
parity+=vnodeI[713];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137417]=parity;
if (cwI[268]==0) responseI[137417]=0; //assymetric
if (responseI[137417] != vnodeI[268]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[154];
parity+=vnodeI[268];
parity+=vnodeI[713];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180937]=parity;
if (cwI[353]==0) responseI[180937]=0; //assymetric
if (responseI[180937] != vnodeI[353]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[154];
parity+=vnodeI[268];
parity+=vnodeI[353];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[365257]=parity;
if (cwI[713]==0) responseI[365257]=0; //assymetric
if (responseI[365257] != vnodeI[713]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[271];
parity+=vnodeI[415];
parity+=vnodeI[714];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7882]=parity;
if (cwI[15]==0) responseI[7882]=0; //assymetric
if (responseI[7882] != vnodeI[15]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[271];
parity+=vnodeI[415];
parity+=vnodeI[714];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33994]=parity;
if (cwI[66]==0) responseI[33994]=0; //assymetric
if (responseI[33994] != vnodeI[66]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[66];
parity+=vnodeI[415];
parity+=vnodeI[714];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138954]=parity;
if (cwI[271]==0) responseI[138954]=0; //assymetric
if (responseI[138954] != vnodeI[271]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[66];
parity+=vnodeI[271];
parity+=vnodeI[714];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212682]=parity;
if (cwI[415]==0) responseI[212682]=0; //assymetric
if (responseI[212682] != vnodeI[415]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[66];
parity+=vnodeI[271];
parity+=vnodeI[415];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[365770]=parity;
if (cwI[714]==0) responseI[365770]=0; //assymetric
if (responseI[365770] != vnodeI[714]) parityerrors++;
parity=0;
parity+=vnodeI[261];
parity+=vnodeI[371];
parity+=vnodeI[469];
parity+=vnodeI[715];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107723]=parity;
if (cwI[210]==0) responseI[107723]=0; //assymetric
if (responseI[107723] != vnodeI[210]) parityerrors++;
parity=0;
parity+=vnodeI[210];
parity+=vnodeI[371];
parity+=vnodeI[469];
parity+=vnodeI[715];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133835]=parity;
if (cwI[261]==0) responseI[133835]=0; //assymetric
if (responseI[133835] != vnodeI[261]) parityerrors++;
parity=0;
parity+=vnodeI[210];
parity+=vnodeI[261];
parity+=vnodeI[469];
parity+=vnodeI[715];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190155]=parity;
if (cwI[371]==0) responseI[190155]=0; //assymetric
if (responseI[190155] != vnodeI[371]) parityerrors++;
parity=0;
parity+=vnodeI[210];
parity+=vnodeI[261];
parity+=vnodeI[371];
parity+=vnodeI[715];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240331]=parity;
if (cwI[469]==0) responseI[240331]=0; //assymetric
if (responseI[240331] != vnodeI[469]) parityerrors++;
parity=0;
parity+=vnodeI[210];
parity+=vnodeI[261];
parity+=vnodeI[371];
parity+=vnodeI[469];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[366283]=parity;
if (cwI[715]==0) responseI[366283]=0; //assymetric
if (responseI[366283] != vnodeI[715]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[184];
parity+=vnodeI[306];
parity+=vnodeI[716];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19660]=parity;
if (cwI[38]==0) responseI[19660]=0; //assymetric
if (responseI[19660] != vnodeI[38]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[184];
parity+=vnodeI[306];
parity+=vnodeI[716];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54476]=parity;
if (cwI[106]==0) responseI[54476]=0; //assymetric
if (responseI[54476] != vnodeI[106]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[106];
parity+=vnodeI[306];
parity+=vnodeI[716];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94412]=parity;
if (cwI[184]==0) responseI[94412]=0; //assymetric
if (responseI[94412] != vnodeI[184]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[106];
parity+=vnodeI[184];
parity+=vnodeI[716];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156876]=parity;
if (cwI[306]==0) responseI[156876]=0; //assymetric
if (responseI[156876] != vnodeI[306]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[106];
parity+=vnodeI[184];
parity+=vnodeI[306];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[366796]=parity;
if (cwI[716]==0) responseI[366796]=0; //assymetric
if (responseI[366796] != vnodeI[716]) parityerrors++;
parity=0;
parity+=vnodeI[222];
parity+=vnodeI[230];
parity+=vnodeI[473];
parity+=vnodeI[717];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106189]=parity;
if (cwI[207]==0) responseI[106189]=0; //assymetric
if (responseI[106189] != vnodeI[207]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[230];
parity+=vnodeI[473];
parity+=vnodeI[717];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113869]=parity;
if (cwI[222]==0) responseI[113869]=0; //assymetric
if (responseI[113869] != vnodeI[222]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[222];
parity+=vnodeI[473];
parity+=vnodeI[717];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117965]=parity;
if (cwI[230]==0) responseI[117965]=0; //assymetric
if (responseI[117965] != vnodeI[230]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[222];
parity+=vnodeI[230];
parity+=vnodeI[717];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[242381]=parity;
if (cwI[473]==0) responseI[242381]=0; //assymetric
if (responseI[242381] != vnodeI[473]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[222];
parity+=vnodeI[230];
parity+=vnodeI[473];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[367309]=parity;
if (cwI[717]==0) responseI[367309]=0; //assymetric
if (responseI[367309] != vnodeI[717]) parityerrors++;
parity=0;
parity+=vnodeI[145];
parity+=vnodeI[265];
parity+=vnodeI[275];
parity+=vnodeI[467];
parity+=vnodeI[718];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54478]=parity;
if (cwI[106]==0) responseI[54478]=0; //assymetric
if (responseI[54478] != vnodeI[106]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[265];
parity+=vnodeI[275];
parity+=vnodeI[467];
parity+=vnodeI[718];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[74446]=parity;
if (cwI[145]==0) responseI[74446]=0; //assymetric
if (responseI[74446] != vnodeI[145]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[145];
parity+=vnodeI[275];
parity+=vnodeI[467];
parity+=vnodeI[718];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135886]=parity;
if (cwI[265]==0) responseI[135886]=0; //assymetric
if (responseI[135886] != vnodeI[265]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[145];
parity+=vnodeI[265];
parity+=vnodeI[467];
parity+=vnodeI[718];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141006]=parity;
if (cwI[275]==0) responseI[141006]=0; //assymetric
if (responseI[141006] != vnodeI[275]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[145];
parity+=vnodeI[265];
parity+=vnodeI[275];
parity+=vnodeI[718];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239310]=parity;
if (cwI[467]==0) responseI[239310]=0; //assymetric
if (responseI[239310] != vnodeI[467]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[145];
parity+=vnodeI[265];
parity+=vnodeI[275];
parity+=vnodeI[467];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[367822]=parity;
if (cwI[718]==0) responseI[367822]=0; //assymetric
if (responseI[367822] != vnodeI[718]) parityerrors++;
parity=0;
parity+=vnodeI[326];
parity+=vnodeI[476];
parity+=vnodeI[509];
parity+=vnodeI[719];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142031]=parity;
if (cwI[277]==0) responseI[142031]=0; //assymetric
if (responseI[142031] != vnodeI[277]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[476];
parity+=vnodeI[509];
parity+=vnodeI[719];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167119]=parity;
if (cwI[326]==0) responseI[167119]=0; //assymetric
if (responseI[167119] != vnodeI[326]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[326];
parity+=vnodeI[509];
parity+=vnodeI[719];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243919]=parity;
if (cwI[476]==0) responseI[243919]=0; //assymetric
if (responseI[243919] != vnodeI[476]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[326];
parity+=vnodeI[476];
parity+=vnodeI[719];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260815]=parity;
if (cwI[509]==0) responseI[260815]=0; //assymetric
if (responseI[260815] != vnodeI[509]) parityerrors++;
parity=0;
parity+=vnodeI[277];
parity+=vnodeI[326];
parity+=vnodeI[476];
parity+=vnodeI[509];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[368335]=parity;
if (cwI[719]==0) responseI[368335]=0; //assymetric
if (responseI[368335] != vnodeI[719]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[370];
parity+=vnodeI[383];
parity+=vnodeI[720];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[4304]=parity;
if (cwI[8]==0) responseI[4304]=0; //assymetric
if (responseI[4304] != vnodeI[8]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[370];
parity+=vnodeI[383];
parity+=vnodeI[720];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26320]=parity;
if (cwI[51]==0) responseI[26320]=0; //assymetric
if (responseI[26320] != vnodeI[51]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[51];
parity+=vnodeI[383];
parity+=vnodeI[720];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[189648]=parity;
if (cwI[370]==0) responseI[189648]=0; //assymetric
if (responseI[189648] != vnodeI[370]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[51];
parity+=vnodeI[370];
parity+=vnodeI[720];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196304]=parity;
if (cwI[383]==0) responseI[196304]=0; //assymetric
if (responseI[196304] != vnodeI[383]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[51];
parity+=vnodeI[370];
parity+=vnodeI[383];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[368848]=parity;
if (cwI[720]==0) responseI[368848]=0; //assymetric
if (responseI[368848] != vnodeI[720]) parityerrors++;
parity=0;
parity+=vnodeI[287];
parity+=vnodeI[454];
parity+=vnodeI[461];
parity+=vnodeI[721];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70353]=parity;
if (cwI[137]==0) responseI[70353]=0; //assymetric
if (responseI[70353] != vnodeI[137]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[454];
parity+=vnodeI[461];
parity+=vnodeI[721];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[147153]=parity;
if (cwI[287]==0) responseI[147153]=0; //assymetric
if (responseI[147153] != vnodeI[287]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[287];
parity+=vnodeI[461];
parity+=vnodeI[721];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232657]=parity;
if (cwI[454]==0) responseI[232657]=0; //assymetric
if (responseI[232657] != vnodeI[454]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[287];
parity+=vnodeI[454];
parity+=vnodeI[721];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236241]=parity;
if (cwI[461]==0) responseI[236241]=0; //assymetric
if (responseI[236241] != vnodeI[461]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[287];
parity+=vnodeI[454];
parity+=vnodeI[461];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[369361]=parity;
if (cwI[721]==0) responseI[369361]=0; //assymetric
if (responseI[369361] != vnodeI[721]) parityerrors++;
parity=0;
parity+=vnodeI[313];
parity+=vnodeI[383];
parity+=vnodeI[393];
parity+=vnodeI[722];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126674]=parity;
if (cwI[247]==0) responseI[126674]=0; //assymetric
if (responseI[126674] != vnodeI[247]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[383];
parity+=vnodeI[393];
parity+=vnodeI[722];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[160466]=parity;
if (cwI[313]==0) responseI[160466]=0; //assymetric
if (responseI[160466] != vnodeI[313]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[313];
parity+=vnodeI[393];
parity+=vnodeI[722];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196306]=parity;
if (cwI[383]==0) responseI[196306]=0; //assymetric
if (responseI[196306] != vnodeI[383]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[313];
parity+=vnodeI[383];
parity+=vnodeI[722];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201426]=parity;
if (cwI[393]==0) responseI[201426]=0; //assymetric
if (responseI[201426] != vnodeI[393]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[313];
parity+=vnodeI[383];
parity+=vnodeI[393];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[369874]=parity;
if (cwI[722]==0) responseI[369874]=0; //assymetric
if (responseI[369874] != vnodeI[722]) parityerrors++;
parity=0;
parity+=vnodeI[264];
parity+=vnodeI[372];
parity+=vnodeI[455];
parity+=vnodeI[723];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106195]=parity;
if (cwI[207]==0) responseI[106195]=0; //assymetric
if (responseI[106195] != vnodeI[207]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[372];
parity+=vnodeI[455];
parity+=vnodeI[723];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135379]=parity;
if (cwI[264]==0) responseI[135379]=0; //assymetric
if (responseI[135379] != vnodeI[264]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[264];
parity+=vnodeI[455];
parity+=vnodeI[723];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190675]=parity;
if (cwI[372]==0) responseI[190675]=0; //assymetric
if (responseI[190675] != vnodeI[372]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[264];
parity+=vnodeI[372];
parity+=vnodeI[723];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233171]=parity;
if (cwI[455]==0) responseI[233171]=0; //assymetric
if (responseI[233171] != vnodeI[455]) parityerrors++;
parity=0;
parity+=vnodeI[207];
parity+=vnodeI[264];
parity+=vnodeI[372];
parity+=vnodeI[455];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[370387]=parity;
if (cwI[723]==0) responseI[370387]=0; //assymetric
if (responseI[370387] != vnodeI[723]) parityerrors++;
parity=0;
parity+=vnodeI[268];
parity+=vnodeI[345];
parity+=vnodeI[354];
parity+=vnodeI[481];
parity+=vnodeI[724];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42708]=parity;
if (cwI[83]==0) responseI[42708]=0; //assymetric
if (responseI[42708] != vnodeI[83]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[345];
parity+=vnodeI[354];
parity+=vnodeI[481];
parity+=vnodeI[724];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137428]=parity;
if (cwI[268]==0) responseI[137428]=0; //assymetric
if (responseI[137428] != vnodeI[268]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[268];
parity+=vnodeI[354];
parity+=vnodeI[481];
parity+=vnodeI[724];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176852]=parity;
if (cwI[345]==0) responseI[176852]=0; //assymetric
if (responseI[176852] != vnodeI[345]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[268];
parity+=vnodeI[345];
parity+=vnodeI[481];
parity+=vnodeI[724];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181460]=parity;
if (cwI[354]==0) responseI[181460]=0; //assymetric
if (responseI[181460] != vnodeI[354]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[268];
parity+=vnodeI[345];
parity+=vnodeI[354];
parity+=vnodeI[724];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246484]=parity;
if (cwI[481]==0) responseI[246484]=0; //assymetric
if (responseI[246484] != vnodeI[481]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[268];
parity+=vnodeI[345];
parity+=vnodeI[354];
parity+=vnodeI[481];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[370900]=parity;
if (cwI[724]==0) responseI[370900]=0; //assymetric
if (responseI[370900] != vnodeI[724]) parityerrors++;
parity=0;
parity+=vnodeI[269];
parity+=vnodeI[311];
parity+=vnodeI[413];
parity+=vnodeI[725];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82645]=parity;
if (cwI[161]==0) responseI[82645]=0; //assymetric
if (responseI[82645] != vnodeI[161]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[311];
parity+=vnodeI[413];
parity+=vnodeI[725];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137941]=parity;
if (cwI[269]==0) responseI[137941]=0; //assymetric
if (responseI[137941] != vnodeI[269]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[269];
parity+=vnodeI[413];
parity+=vnodeI[725];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159445]=parity;
if (cwI[311]==0) responseI[159445]=0; //assymetric
if (responseI[159445] != vnodeI[311]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[269];
parity+=vnodeI[311];
parity+=vnodeI[725];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211669]=parity;
if (cwI[413]==0) responseI[211669]=0; //assymetric
if (responseI[211669] != vnodeI[413]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[269];
parity+=vnodeI[311];
parity+=vnodeI[413];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[371413]=parity;
if (cwI[725]==0) responseI[371413]=0; //assymetric
if (responseI[371413] != vnodeI[725]) parityerrors++;
parity=0;
parity+=vnodeI[205];
parity+=vnodeI[345];
parity+=vnodeI[506];
parity+=vnodeI[726];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12502]=parity;
if (cwI[24]==0) responseI[12502]=0; //assymetric
if (responseI[12502] != vnodeI[24]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[345];
parity+=vnodeI[506];
parity+=vnodeI[726];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105174]=parity;
if (cwI[205]==0) responseI[105174]=0; //assymetric
if (responseI[105174] != vnodeI[205]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[205];
parity+=vnodeI[506];
parity+=vnodeI[726];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176854]=parity;
if (cwI[345]==0) responseI[176854]=0; //assymetric
if (responseI[176854] != vnodeI[345]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[205];
parity+=vnodeI[345];
parity+=vnodeI[726];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259286]=parity;
if (cwI[506]==0) responseI[259286]=0; //assymetric
if (responseI[259286] != vnodeI[506]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[205];
parity+=vnodeI[345];
parity+=vnodeI[506];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[371926]=parity;
if (cwI[726]==0) responseI[371926]=0; //assymetric
if (responseI[371926] != vnodeI[726]) parityerrors++;
parity=0;
parity+=vnodeI[275];
parity+=vnodeI[322];
parity+=vnodeI[396];
parity+=vnodeI[727];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100567]=parity;
if (cwI[196]==0) responseI[100567]=0; //assymetric
if (responseI[100567] != vnodeI[196]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[322];
parity+=vnodeI[396];
parity+=vnodeI[727];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141015]=parity;
if (cwI[275]==0) responseI[141015]=0; //assymetric
if (responseI[141015] != vnodeI[275]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[275];
parity+=vnodeI[396];
parity+=vnodeI[727];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165079]=parity;
if (cwI[322]==0) responseI[165079]=0; //assymetric
if (responseI[165079] != vnodeI[322]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[275];
parity+=vnodeI[322];
parity+=vnodeI[727];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202967]=parity;
if (cwI[396]==0) responseI[202967]=0; //assymetric
if (responseI[202967] != vnodeI[396]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[275];
parity+=vnodeI[322];
parity+=vnodeI[396];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[372439]=parity;
if (cwI[727]==0) responseI[372439]=0; //assymetric
if (responseI[372439] != vnodeI[727]) parityerrors++;
parity=0;
parity+=vnodeI[331];
parity+=vnodeI[365];
parity+=vnodeI[371];
parity+=vnodeI[728];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37592]=parity;
if (cwI[73]==0) responseI[37592]=0; //assymetric
if (responseI[37592] != vnodeI[73]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[365];
parity+=vnodeI[371];
parity+=vnodeI[728];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169688]=parity;
if (cwI[331]==0) responseI[169688]=0; //assymetric
if (responseI[169688] != vnodeI[331]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[331];
parity+=vnodeI[371];
parity+=vnodeI[728];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187096]=parity;
if (cwI[365]==0) responseI[187096]=0; //assymetric
if (responseI[187096] != vnodeI[365]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[331];
parity+=vnodeI[365];
parity+=vnodeI[728];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190168]=parity;
if (cwI[371]==0) responseI[190168]=0; //assymetric
if (responseI[190168] != vnodeI[371]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[331];
parity+=vnodeI[365];
parity+=vnodeI[371];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[372952]=parity;
if (cwI[728]==0) responseI[372952]=0; //assymetric
if (responseI[372952] != vnodeI[728]) parityerrors++;
parity=0;
parity+=vnodeI[221];
parity+=vnodeI[301];
parity+=vnodeI[729];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100569]=parity;
if (cwI[196]==0) responseI[100569]=0; //assymetric
if (responseI[100569] != vnodeI[196]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[301];
parity+=vnodeI[729];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113369]=parity;
if (cwI[221]==0) responseI[113369]=0; //assymetric
if (responseI[113369] != vnodeI[221]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[221];
parity+=vnodeI[729];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154329]=parity;
if (cwI[301]==0) responseI[154329]=0; //assymetric
if (responseI[154329] != vnodeI[301]) parityerrors++;
parity=0;
parity+=vnodeI[196];
parity+=vnodeI[221];
parity+=vnodeI[301];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[373465]=parity;
if (cwI[729]==0) responseI[373465]=0; //assymetric
if (responseI[373465] != vnodeI[729]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[368];
parity+=vnodeI[451];
parity+=vnodeI[730];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[35034]=parity;
if (cwI[68]==0) responseI[35034]=0; //assymetric
if (responseI[35034] != vnodeI[68]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[368];
parity+=vnodeI[451];
parity+=vnodeI[730];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66778]=parity;
if (cwI[130]==0) responseI[66778]=0; //assymetric
if (responseI[66778] != vnodeI[130]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[130];
parity+=vnodeI[451];
parity+=vnodeI[730];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188634]=parity;
if (cwI[368]==0) responseI[188634]=0; //assymetric
if (responseI[188634] != vnodeI[368]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[130];
parity+=vnodeI[368];
parity+=vnodeI[730];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231130]=parity;
if (cwI[451]==0) responseI[231130]=0; //assymetric
if (responseI[231130] != vnodeI[451]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[130];
parity+=vnodeI[368];
parity+=vnodeI[451];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[373978]=parity;
if (cwI[730]==0) responseI[373978]=0; //assymetric
if (responseI[373978] != vnodeI[730]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[252];
parity+=vnodeI[256];
parity+=vnodeI[442];
parity+=vnodeI[731];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67803]=parity;
if (cwI[132]==0) responseI[67803]=0; //assymetric
if (responseI[67803] != vnodeI[132]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[252];
parity+=vnodeI[256];
parity+=vnodeI[442];
parity+=vnodeI[731];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117979]=parity;
if (cwI[230]==0) responseI[117979]=0; //assymetric
if (responseI[117979] != vnodeI[230]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[230];
parity+=vnodeI[256];
parity+=vnodeI[442];
parity+=vnodeI[731];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129243]=parity;
if (cwI[252]==0) responseI[129243]=0; //assymetric
if (responseI[129243] != vnodeI[252]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[230];
parity+=vnodeI[252];
parity+=vnodeI[442];
parity+=vnodeI[731];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131291]=parity;
if (cwI[256]==0) responseI[131291]=0; //assymetric
if (responseI[131291] != vnodeI[256]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[230];
parity+=vnodeI[252];
parity+=vnodeI[256];
parity+=vnodeI[731];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226523]=parity;
if (cwI[442]==0) responseI[226523]=0; //assymetric
if (responseI[226523] != vnodeI[442]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[230];
parity+=vnodeI[252];
parity+=vnodeI[256];
parity+=vnodeI[442];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[374491]=parity;
if (cwI[731]==0) responseI[374491]=0; //assymetric
if (responseI[374491] != vnodeI[731]) parityerrors++;
parity=0;
parity+=vnodeI[372];
parity+=vnodeI[384];
parity+=vnodeI[732];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3804]=parity;
if (cwI[7]==0) responseI[3804]=0; //assymetric
if (responseI[3804] != vnodeI[7]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[384];
parity+=vnodeI[732];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[190684]=parity;
if (cwI[372]==0) responseI[190684]=0; //assymetric
if (responseI[190684] != vnodeI[372]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[372];
parity+=vnodeI[732];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196828]=parity;
if (cwI[384]==0) responseI[196828]=0; //assymetric
if (responseI[196828] != vnodeI[384]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[372];
parity+=vnodeI[384];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[375004]=parity;
if (cwI[732]==0) responseI[375004]=0; //assymetric
if (responseI[375004] != vnodeI[732]) parityerrors++;
parity=0;
parity+=vnodeI[210];
parity+=vnodeI[233];
parity+=vnodeI[489];
parity+=vnodeI[733];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1245]=parity;
if (cwI[2]==0) responseI[1245]=0; //assymetric
if (responseI[1245] != vnodeI[2]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[233];
parity+=vnodeI[489];
parity+=vnodeI[733];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107741]=parity;
if (cwI[210]==0) responseI[107741]=0; //assymetric
if (responseI[107741] != vnodeI[210]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[210];
parity+=vnodeI[489];
parity+=vnodeI[733];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119517]=parity;
if (cwI[233]==0) responseI[119517]=0; //assymetric
if (responseI[119517] != vnodeI[233]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[210];
parity+=vnodeI[233];
parity+=vnodeI[733];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250589]=parity;
if (cwI[489]==0) responseI[250589]=0; //assymetric
if (responseI[250589] != vnodeI[489]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[210];
parity+=vnodeI[233];
parity+=vnodeI[489];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[375517]=parity;
if (cwI[733]==0) responseI[375517]=0; //assymetric
if (responseI[375517] != vnodeI[733]) parityerrors++;
parity=0;
parity+=vnodeI[152];
parity+=vnodeI[329];
parity+=vnodeI[510];
parity+=vnodeI[734];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26846]=parity;
if (cwI[52]==0) responseI[26846]=0; //assymetric
if (responseI[26846] != vnodeI[52]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[329];
parity+=vnodeI[510];
parity+=vnodeI[734];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78046]=parity;
if (cwI[152]==0) responseI[78046]=0; //assymetric
if (responseI[78046] != vnodeI[152]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[152];
parity+=vnodeI[510];
parity+=vnodeI[734];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168670]=parity;
if (cwI[329]==0) responseI[168670]=0; //assymetric
if (responseI[168670] != vnodeI[329]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[152];
parity+=vnodeI[329];
parity+=vnodeI[734];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261342]=parity;
if (cwI[510]==0) responseI[261342]=0; //assymetric
if (responseI[261342] != vnodeI[510]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[152];
parity+=vnodeI[329];
parity+=vnodeI[510];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[376030]=parity;
if (cwI[734]==0) responseI[376030]=0; //assymetric
if (responseI[376030] != vnodeI[734]) parityerrors++;
parity=0;
parity+=vnodeI[344];
parity+=vnodeI[366];
parity+=vnodeI[507];
parity+=vnodeI[735];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18655]=parity;
if (cwI[36]==0) responseI[18655]=0; //assymetric
if (responseI[18655] != vnodeI[36]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[366];
parity+=vnodeI[507];
parity+=vnodeI[735];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176351]=parity;
if (cwI[344]==0) responseI[176351]=0; //assymetric
if (responseI[176351] != vnodeI[344]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[344];
parity+=vnodeI[507];
parity+=vnodeI[735];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187615]=parity;
if (cwI[366]==0) responseI[187615]=0; //assymetric
if (responseI[187615] != vnodeI[366]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[344];
parity+=vnodeI[366];
parity+=vnodeI[735];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259807]=parity;
if (cwI[507]==0) responseI[259807]=0; //assymetric
if (responseI[259807] != vnodeI[507]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[344];
parity+=vnodeI[366];
parity+=vnodeI[507];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[376543]=parity;
if (cwI[735]==0) responseI[376543]=0; //assymetric
if (responseI[376543] != vnodeI[735]) parityerrors++;
parity=0;
parity+=vnodeI[108];
parity+=vnodeI[138];
parity+=vnodeI[345];
parity+=vnodeI[400];
parity+=vnodeI[736];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26336]=parity;
if (cwI[51]==0) responseI[26336]=0; //assymetric
if (responseI[26336] != vnodeI[51]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[138];
parity+=vnodeI[345];
parity+=vnodeI[400];
parity+=vnodeI[736];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55520]=parity;
if (cwI[108]==0) responseI[55520]=0; //assymetric
if (responseI[55520] != vnodeI[108]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[108];
parity+=vnodeI[345];
parity+=vnodeI[400];
parity+=vnodeI[736];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70880]=parity;
if (cwI[138]==0) responseI[70880]=0; //assymetric
if (responseI[70880] != vnodeI[138]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[108];
parity+=vnodeI[138];
parity+=vnodeI[400];
parity+=vnodeI[736];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176864]=parity;
if (cwI[345]==0) responseI[176864]=0; //assymetric
if (responseI[176864] != vnodeI[345]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[108];
parity+=vnodeI[138];
parity+=vnodeI[345];
parity+=vnodeI[736];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[205024]=parity;
if (cwI[400]==0) responseI[205024]=0; //assymetric
if (responseI[205024] != vnodeI[400]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[108];
parity+=vnodeI[138];
parity+=vnodeI[345];
parity+=vnodeI[400];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[377056]=parity;
if (cwI[736]==0) responseI[377056]=0; //assymetric
if (responseI[377056] != vnodeI[736]) parityerrors++;
parity=0;
parity+=vnodeI[466];
parity+=vnodeI[495];
parity+=vnodeI[510];
parity+=vnodeI[737];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151265]=parity;
if (cwI[295]==0) responseI[151265]=0; //assymetric
if (responseI[151265] != vnodeI[295]) parityerrors++;
parity=0;
parity+=vnodeI[295];
parity+=vnodeI[495];
parity+=vnodeI[510];
parity+=vnodeI[737];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238817]=parity;
if (cwI[466]==0) responseI[238817]=0; //assymetric
if (responseI[238817] != vnodeI[466]) parityerrors++;
parity=0;
parity+=vnodeI[295];
parity+=vnodeI[466];
parity+=vnodeI[510];
parity+=vnodeI[737];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253665]=parity;
if (cwI[495]==0) responseI[253665]=0; //assymetric
if (responseI[253665] != vnodeI[495]) parityerrors++;
parity=0;
parity+=vnodeI[295];
parity+=vnodeI[466];
parity+=vnodeI[495];
parity+=vnodeI[737];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[261345]=parity;
if (cwI[510]==0) responseI[261345]=0; //assymetric
if (responseI[261345] != vnodeI[510]) parityerrors++;
parity=0;
parity+=vnodeI[295];
parity+=vnodeI[466];
parity+=vnodeI[495];
parity+=vnodeI[510];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[377569]=parity;
if (cwI[737]==0) responseI[377569]=0; //assymetric
if (responseI[377569] != vnodeI[737]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[260];
parity+=vnodeI[389];
parity+=vnodeI[421];
parity+=vnodeI[738];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59618]=parity;
if (cwI[116]==0) responseI[59618]=0; //assymetric
if (responseI[59618] != vnodeI[116]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[183];
parity+=vnodeI[260];
parity+=vnodeI[389];
parity+=vnodeI[421];
parity+=vnodeI[738];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60130]=parity;
if (cwI[117]==0) responseI[60130]=0; //assymetric
if (responseI[60130] != vnodeI[117]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[117];
parity+=vnodeI[260];
parity+=vnodeI[389];
parity+=vnodeI[421];
parity+=vnodeI[738];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93922]=parity;
if (cwI[183]==0) responseI[93922]=0; //assymetric
if (responseI[93922] != vnodeI[183]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[389];
parity+=vnodeI[421];
parity+=vnodeI[738];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133346]=parity;
if (cwI[260]==0) responseI[133346]=0; //assymetric
if (responseI[133346] != vnodeI[260]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[260];
parity+=vnodeI[421];
parity+=vnodeI[738];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[199394]=parity;
if (cwI[389]==0) responseI[199394]=0; //assymetric
if (responseI[199394] != vnodeI[389]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[260];
parity+=vnodeI[389];
parity+=vnodeI[738];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215778]=parity;
if (cwI[421]==0) responseI[215778]=0; //assymetric
if (responseI[215778] != vnodeI[421]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[260];
parity+=vnodeI[389];
parity+=vnodeI[421];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[378082]=parity;
if (cwI[738]==0) responseI[378082]=0; //assymetric
if (responseI[378082] != vnodeI[738]) parityerrors++;
parity=0;
parity+=vnodeI[284];
parity+=vnodeI[499];
parity+=vnodeI[739];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59619]=parity;
if (cwI[116]==0) responseI[59619]=0; //assymetric
if (responseI[59619] != vnodeI[116]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[499];
parity+=vnodeI[739];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145635]=parity;
if (cwI[284]==0) responseI[145635]=0; //assymetric
if (responseI[145635] != vnodeI[284]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[284];
parity+=vnodeI[739];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255715]=parity;
if (cwI[499]==0) responseI[255715]=0; //assymetric
if (responseI[255715] != vnodeI[499]) parityerrors++;
parity=0;
parity+=vnodeI[116];
parity+=vnodeI[284];
parity+=vnodeI[499];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[378595]=parity;
if (cwI[739]==0) responseI[378595]=0; //assymetric
if (responseI[378595] != vnodeI[739]) parityerrors++;
parity=0;
parity+=vnodeI[274];
parity+=vnodeI[353];
parity+=vnodeI[434];
parity+=vnodeI[740];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10980]=parity;
if (cwI[21]==0) responseI[10980]=0; //assymetric
if (responseI[10980] != vnodeI[21]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[353];
parity+=vnodeI[434];
parity+=vnodeI[740];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140516]=parity;
if (cwI[274]==0) responseI[140516]=0; //assymetric
if (responseI[140516] != vnodeI[274]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[274];
parity+=vnodeI[434];
parity+=vnodeI[740];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180964]=parity;
if (cwI[353]==0) responseI[180964]=0; //assymetric
if (responseI[180964] != vnodeI[353]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[274];
parity+=vnodeI[353];
parity+=vnodeI[740];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222436]=parity;
if (cwI[434]==0) responseI[222436]=0; //assymetric
if (responseI[222436] != vnodeI[434]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[274];
parity+=vnodeI[353];
parity+=vnodeI[434];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[379108]=parity;
if (cwI[740]==0) responseI[379108]=0; //assymetric
if (responseI[379108] != vnodeI[740]) parityerrors++;
parity=0;
parity+=vnodeI[255];
parity+=vnodeI[336];
parity+=vnodeI[434];
parity+=vnodeI[741];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76517]=parity;
if (cwI[149]==0) responseI[76517]=0; //assymetric
if (responseI[76517] != vnodeI[149]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[336];
parity+=vnodeI[434];
parity+=vnodeI[741];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130789]=parity;
if (cwI[255]==0) responseI[130789]=0; //assymetric
if (responseI[130789] != vnodeI[255]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[255];
parity+=vnodeI[434];
parity+=vnodeI[741];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172261]=parity;
if (cwI[336]==0) responseI[172261]=0; //assymetric
if (responseI[172261] != vnodeI[336]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[255];
parity+=vnodeI[336];
parity+=vnodeI[741];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222437]=parity;
if (cwI[434]==0) responseI[222437]=0; //assymetric
if (responseI[222437] != vnodeI[434]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[255];
parity+=vnodeI[336];
parity+=vnodeI[434];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[379621]=parity;
if (cwI[741]==0) responseI[379621]=0; //assymetric
if (responseI[379621] != vnodeI[741]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[65];
parity+=vnodeI[111];
parity+=vnodeI[406];
parity+=vnodeI[742];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16102]=parity;
if (cwI[31]==0) responseI[16102]=0; //assymetric
if (responseI[16102] != vnodeI[31]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[65];
parity+=vnodeI[111];
parity+=vnodeI[406];
parity+=vnodeI[742];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20710]=parity;
if (cwI[40]==0) responseI[20710]=0; //assymetric
if (responseI[20710] != vnodeI[40]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[40];
parity+=vnodeI[111];
parity+=vnodeI[406];
parity+=vnodeI[742];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33510]=parity;
if (cwI[65]==0) responseI[33510]=0; //assymetric
if (responseI[33510] != vnodeI[65]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[40];
parity+=vnodeI[65];
parity+=vnodeI[406];
parity+=vnodeI[742];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57062]=parity;
if (cwI[111]==0) responseI[57062]=0; //assymetric
if (responseI[57062] != vnodeI[111]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[40];
parity+=vnodeI[65];
parity+=vnodeI[111];
parity+=vnodeI[742];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208102]=parity;
if (cwI[406]==0) responseI[208102]=0; //assymetric
if (responseI[208102] != vnodeI[406]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[40];
parity+=vnodeI[65];
parity+=vnodeI[111];
parity+=vnodeI[406];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[380134]=parity;
if (cwI[742]==0) responseI[380134]=0; //assymetric
if (responseI[380134] != vnodeI[742]) parityerrors++;
parity=0;
parity+=vnodeI[304];
parity+=vnodeI[370];
parity+=vnodeI[425];
parity+=vnodeI[458];
parity+=vnodeI[743];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33511]=parity;
if (cwI[65]==0) responseI[33511]=0; //assymetric
if (responseI[33511] != vnodeI[65]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[370];
parity+=vnodeI[425];
parity+=vnodeI[458];
parity+=vnodeI[743];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155879]=parity;
if (cwI[304]==0) responseI[155879]=0; //assymetric
if (responseI[155879] != vnodeI[304]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[304];
parity+=vnodeI[425];
parity+=vnodeI[458];
parity+=vnodeI[743];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[189671]=parity;
if (cwI[370]==0) responseI[189671]=0; //assymetric
if (responseI[189671] != vnodeI[370]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[304];
parity+=vnodeI[370];
parity+=vnodeI[458];
parity+=vnodeI[743];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217831]=parity;
if (cwI[425]==0) responseI[217831]=0; //assymetric
if (responseI[217831] != vnodeI[425]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[304];
parity+=vnodeI[370];
parity+=vnodeI[425];
parity+=vnodeI[743];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234727]=parity;
if (cwI[458]==0) responseI[234727]=0; //assymetric
if (responseI[234727] != vnodeI[458]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[304];
parity+=vnodeI[370];
parity+=vnodeI[425];
parity+=vnodeI[458];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[380647]=parity;
if (cwI[743]==0) responseI[380647]=0; //assymetric
if (responseI[380647] != vnodeI[743]) parityerrors++;
parity=0;
parity+=vnodeI[358];
parity+=vnodeI[362];
parity+=vnodeI[486];
parity+=vnodeI[744];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180456]=parity;
if (cwI[352]==0) responseI[180456]=0; //assymetric
if (responseI[180456] != vnodeI[352]) parityerrors++;
parity=0;
parity+=vnodeI[352];
parity+=vnodeI[362];
parity+=vnodeI[486];
parity+=vnodeI[744];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183528]=parity;
if (cwI[358]==0) responseI[183528]=0; //assymetric
if (responseI[183528] != vnodeI[358]) parityerrors++;
parity=0;
parity+=vnodeI[352];
parity+=vnodeI[358];
parity+=vnodeI[486];
parity+=vnodeI[744];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185576]=parity;
if (cwI[362]==0) responseI[185576]=0; //assymetric
if (responseI[185576] != vnodeI[362]) parityerrors++;
parity=0;
parity+=vnodeI[352];
parity+=vnodeI[358];
parity+=vnodeI[362];
parity+=vnodeI[744];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249064]=parity;
if (cwI[486]==0) responseI[249064]=0; //assymetric
if (responseI[249064] != vnodeI[486]) parityerrors++;
parity=0;
parity+=vnodeI[352];
parity+=vnodeI[358];
parity+=vnodeI[362];
parity+=vnodeI[486];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[381160]=parity;
if (cwI[744]==0) responseI[381160]=0; //assymetric
if (responseI[381160] != vnodeI[744]) parityerrors++;
parity=0;
parity+=vnodeI[81];
parity+=vnodeI[341];
parity+=vnodeI[507];
parity+=vnodeI[745];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[9449]=parity;
if (cwI[18]==0) responseI[9449]=0; //assymetric
if (responseI[9449] != vnodeI[18]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[341];
parity+=vnodeI[507];
parity+=vnodeI[745];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41705]=parity;
if (cwI[81]==0) responseI[41705]=0; //assymetric
if (responseI[41705] != vnodeI[81]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[81];
parity+=vnodeI[507];
parity+=vnodeI[745];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174825]=parity;
if (cwI[341]==0) responseI[174825]=0; //assymetric
if (responseI[174825] != vnodeI[341]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[81];
parity+=vnodeI[341];
parity+=vnodeI[745];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259817]=parity;
if (cwI[507]==0) responseI[259817]=0; //assymetric
if (responseI[259817] != vnodeI[507]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[81];
parity+=vnodeI[341];
parity+=vnodeI[507];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[381673]=parity;
if (cwI[745]==0) responseI[381673]=0; //assymetric
if (responseI[381673] != vnodeI[745]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[258];
parity+=vnodeI[333];
parity+=vnodeI[408];
parity+=vnodeI[746];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48874]=parity;
if (cwI[95]==0) responseI[48874]=0; //assymetric
if (responseI[48874] != vnodeI[95]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[258];
parity+=vnodeI[333];
parity+=vnodeI[408];
parity+=vnodeI[746];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68842]=parity;
if (cwI[134]==0) responseI[68842]=0; //assymetric
if (responseI[68842] != vnodeI[134]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[134];
parity+=vnodeI[333];
parity+=vnodeI[408];
parity+=vnodeI[746];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132330]=parity;
if (cwI[258]==0) responseI[132330]=0; //assymetric
if (responseI[132330] != vnodeI[258]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[134];
parity+=vnodeI[258];
parity+=vnodeI[408];
parity+=vnodeI[746];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170730]=parity;
if (cwI[333]==0) responseI[170730]=0; //assymetric
if (responseI[170730] != vnodeI[333]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[134];
parity+=vnodeI[258];
parity+=vnodeI[333];
parity+=vnodeI[746];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209130]=parity;
if (cwI[408]==0) responseI[209130]=0; //assymetric
if (responseI[209130] != vnodeI[408]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[134];
parity+=vnodeI[258];
parity+=vnodeI[333];
parity+=vnodeI[408];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[382186]=parity;
if (cwI[746]==0) responseI[382186]=0; //assymetric
if (responseI[382186] != vnodeI[746]) parityerrors++;
parity=0;
parity+=vnodeI[103];
parity+=vnodeI[181];
parity+=vnodeI[351];
parity+=vnodeI[747];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47339]=parity;
if (cwI[92]==0) responseI[47339]=0; //assymetric
if (responseI[47339] != vnodeI[92]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[181];
parity+=vnodeI[351];
parity+=vnodeI[747];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52971]=parity;
if (cwI[103]==0) responseI[52971]=0; //assymetric
if (responseI[52971] != vnodeI[103]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[103];
parity+=vnodeI[351];
parity+=vnodeI[747];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92907]=parity;
if (cwI[181]==0) responseI[92907]=0; //assymetric
if (responseI[92907] != vnodeI[181]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[103];
parity+=vnodeI[181];
parity+=vnodeI[747];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[179947]=parity;
if (cwI[351]==0) responseI[179947]=0; //assymetric
if (responseI[179947] != vnodeI[351]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[103];
parity+=vnodeI[181];
parity+=vnodeI[351];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[382699]=parity;
if (cwI[747]==0) responseI[382699]=0; //assymetric
if (responseI[382699] != vnodeI[747]) parityerrors++;
parity=0;
parity+=vnodeI[252];
parity+=vnodeI[501];
parity+=vnodeI[748];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49900]=parity;
if (cwI[97]==0) responseI[49900]=0; //assymetric
if (responseI[49900] != vnodeI[97]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[501];
parity+=vnodeI[748];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129260]=parity;
if (cwI[252]==0) responseI[129260]=0; //assymetric
if (responseI[129260] != vnodeI[252]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[252];
parity+=vnodeI[748];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256748]=parity;
if (cwI[501]==0) responseI[256748]=0; //assymetric
if (responseI[256748] != vnodeI[501]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[252];
parity+=vnodeI[501];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[383212]=parity;
if (cwI[748]==0) responseI[383212]=0; //assymetric
if (responseI[383212] != vnodeI[748]) parityerrors++;
parity=0;
parity+=vnodeI[376];
parity+=vnodeI[492];
parity+=vnodeI[499];
parity+=vnodeI[749];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58605]=parity;
if (cwI[114]==0) responseI[58605]=0; //assymetric
if (responseI[58605] != vnodeI[114]) parityerrors++;
parity=0;
parity+=vnodeI[114];
parity+=vnodeI[492];
parity+=vnodeI[499];
parity+=vnodeI[749];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192749]=parity;
if (cwI[376]==0) responseI[192749]=0; //assymetric
if (responseI[192749] != vnodeI[376]) parityerrors++;
parity=0;
parity+=vnodeI[114];
parity+=vnodeI[376];
parity+=vnodeI[499];
parity+=vnodeI[749];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252141]=parity;
if (cwI[492]==0) responseI[252141]=0; //assymetric
if (responseI[252141] != vnodeI[492]) parityerrors++;
parity=0;
parity+=vnodeI[114];
parity+=vnodeI[376];
parity+=vnodeI[492];
parity+=vnodeI[749];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255725]=parity;
if (cwI[499]==0) responseI[255725]=0; //assymetric
if (responseI[255725] != vnodeI[499]) parityerrors++;
parity=0;
parity+=vnodeI[114];
parity+=vnodeI[376];
parity+=vnodeI[492];
parity+=vnodeI[499];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[383725]=parity;
if (cwI[749]==0) responseI[383725]=0; //assymetric
if (responseI[383725] != vnodeI[749]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[215];
parity+=vnodeI[440];
parity+=vnodeI[750];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62702]=parity;
if (cwI[122]==0) responseI[62702]=0; //assymetric
if (responseI[62702] != vnodeI[122]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[215];
parity+=vnodeI[440];
parity+=vnodeI[750];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[98542]=parity;
if (cwI[192]==0) responseI[98542]=0; //assymetric
if (responseI[98542] != vnodeI[192]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[192];
parity+=vnodeI[440];
parity+=vnodeI[750];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110318]=parity;
if (cwI[215]==0) responseI[110318]=0; //assymetric
if (responseI[110318] != vnodeI[215]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[192];
parity+=vnodeI[215];
parity+=vnodeI[750];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225518]=parity;
if (cwI[440]==0) responseI[225518]=0; //assymetric
if (responseI[225518] != vnodeI[440]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[192];
parity+=vnodeI[215];
parity+=vnodeI[440];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[384238]=parity;
if (cwI[750]==0) responseI[384238]=0; //assymetric
if (responseI[384238] != vnodeI[750]) parityerrors++;
parity=0;
parity+=vnodeI[301];
parity+=vnodeI[309];
parity+=vnodeI[356];
parity+=vnodeI[751];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105711]=parity;
if (cwI[206]==0) responseI[105711]=0; //assymetric
if (responseI[105711] != vnodeI[206]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[309];
parity+=vnodeI[356];
parity+=vnodeI[751];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154351]=parity;
if (cwI[301]==0) responseI[154351]=0; //assymetric
if (responseI[154351] != vnodeI[301]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[301];
parity+=vnodeI[356];
parity+=vnodeI[751];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158447]=parity;
if (cwI[309]==0) responseI[158447]=0; //assymetric
if (responseI[158447] != vnodeI[309]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[301];
parity+=vnodeI[309];
parity+=vnodeI[751];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[182511]=parity;
if (cwI[356]==0) responseI[182511]=0; //assymetric
if (responseI[182511] != vnodeI[356]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[301];
parity+=vnodeI[309];
parity+=vnodeI[356];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[384751]=parity;
if (cwI[751]==0) responseI[384751]=0; //assymetric
if (responseI[384751] != vnodeI[751]) parityerrors++;
parity=0;
parity+=vnodeI[121];
parity+=vnodeI[385];
parity+=vnodeI[421];
parity+=vnodeI[752];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26864]=parity;
if (cwI[52]==0) responseI[26864]=0; //assymetric
if (responseI[26864] != vnodeI[52]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[385];
parity+=vnodeI[421];
parity+=vnodeI[752];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62192]=parity;
if (cwI[121]==0) responseI[62192]=0; //assymetric
if (responseI[62192] != vnodeI[121]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[121];
parity+=vnodeI[421];
parity+=vnodeI[752];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197360]=parity;
if (cwI[385]==0) responseI[197360]=0; //assymetric
if (responseI[197360] != vnodeI[385]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[121];
parity+=vnodeI[385];
parity+=vnodeI[752];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215792]=parity;
if (cwI[421]==0) responseI[215792]=0; //assymetric
if (responseI[215792] != vnodeI[421]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[121];
parity+=vnodeI[385];
parity+=vnodeI[421];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[385264]=parity;
if (cwI[752]==0) responseI[385264]=0; //assymetric
if (responseI[385264] != vnodeI[752]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[292];
parity+=vnodeI[367];
parity+=vnodeI[753];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22769]=parity;
if (cwI[44]==0) responseI[22769]=0; //assymetric
if (responseI[22769] != vnodeI[44]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[292];
parity+=vnodeI[367];
parity+=vnodeI[753];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29425]=parity;
if (cwI[57]==0) responseI[29425]=0; //assymetric
if (responseI[29425] != vnodeI[57]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[57];
parity+=vnodeI[367];
parity+=vnodeI[753];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149745]=parity;
if (cwI[292]==0) responseI[149745]=0; //assymetric
if (responseI[149745] != vnodeI[292]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[57];
parity+=vnodeI[292];
parity+=vnodeI[753];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188145]=parity;
if (cwI[367]==0) responseI[188145]=0; //assymetric
if (responseI[188145] != vnodeI[367]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[57];
parity+=vnodeI[292];
parity+=vnodeI[367];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[385777]=parity;
if (cwI[753]==0) responseI[385777]=0; //assymetric
if (responseI[385777] != vnodeI[753]) parityerrors++;
parity=0;
parity+=vnodeI[148];
parity+=vnodeI[285];
parity+=vnodeI[301];
parity+=vnodeI[754];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8946]=parity;
if (cwI[17]==0) responseI[8946]=0; //assymetric
if (responseI[8946] != vnodeI[17]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[285];
parity+=vnodeI[301];
parity+=vnodeI[754];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76018]=parity;
if (cwI[148]==0) responseI[76018]=0; //assymetric
if (responseI[76018] != vnodeI[148]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[148];
parity+=vnodeI[301];
parity+=vnodeI[754];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146162]=parity;
if (cwI[285]==0) responseI[146162]=0; //assymetric
if (responseI[146162] != vnodeI[285]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[148];
parity+=vnodeI[285];
parity+=vnodeI[754];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154354]=parity;
if (cwI[301]==0) responseI[154354]=0; //assymetric
if (responseI[154354] != vnodeI[301]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[148];
parity+=vnodeI[285];
parity+=vnodeI[301];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[386290]=parity;
if (cwI[754]==0) responseI[386290]=0; //assymetric
if (responseI[386290] != vnodeI[754]) parityerrors++;
parity=0;
parity+=vnodeI[245];
parity+=vnodeI[246];
parity+=vnodeI[422];
parity+=vnodeI[755];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114931]=parity;
if (cwI[224]==0) responseI[114931]=0; //assymetric
if (responseI[114931] != vnodeI[224]) parityerrors++;
parity=0;
parity+=vnodeI[224];
parity+=vnodeI[246];
parity+=vnodeI[422];
parity+=vnodeI[755];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125683]=parity;
if (cwI[245]==0) responseI[125683]=0; //assymetric
if (responseI[125683] != vnodeI[245]) parityerrors++;
parity=0;
parity+=vnodeI[224];
parity+=vnodeI[245];
parity+=vnodeI[422];
parity+=vnodeI[755];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126195]=parity;
if (cwI[246]==0) responseI[126195]=0; //assymetric
if (responseI[126195] != vnodeI[246]) parityerrors++;
parity=0;
parity+=vnodeI[224];
parity+=vnodeI[245];
parity+=vnodeI[246];
parity+=vnodeI[755];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216307]=parity;
if (cwI[422]==0) responseI[216307]=0; //assymetric
if (responseI[216307] != vnodeI[422]) parityerrors++;
parity=0;
parity+=vnodeI[224];
parity+=vnodeI[245];
parity+=vnodeI[246];
parity+=vnodeI[422];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[386803]=parity;
if (cwI[755]==0) responseI[386803]=0; //assymetric
if (responseI[386803] != vnodeI[755]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[240];
parity+=vnodeI[367];
parity+=vnodeI[756];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42228]=parity;
if (cwI[82]==0) responseI[42228]=0; //assymetric
if (responseI[42228] != vnodeI[82]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[240];
parity+=vnodeI[367];
parity+=vnodeI[756];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54516]=parity;
if (cwI[106]==0) responseI[54516]=0; //assymetric
if (responseI[54516] != vnodeI[106]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[106];
parity+=vnodeI[367];
parity+=vnodeI[756];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123124]=parity;
if (cwI[240]==0) responseI[123124]=0; //assymetric
if (responseI[123124] != vnodeI[240]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[106];
parity+=vnodeI[240];
parity+=vnodeI[756];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188148]=parity;
if (cwI[367]==0) responseI[188148]=0; //assymetric
if (responseI[188148] != vnodeI[367]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[106];
parity+=vnodeI[240];
parity+=vnodeI[367];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[387316]=parity;
if (cwI[756]==0) responseI[387316]=0; //assymetric
if (responseI[387316] != vnodeI[756]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[324];
parity+=vnodeI[465];
parity+=vnodeI[757];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28405]=parity;
if (cwI[55]==0) responseI[28405]=0; //assymetric
if (responseI[28405] != vnodeI[55]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[324];
parity+=vnodeI[465];
parity+=vnodeI[757];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[101621]=parity;
if (cwI[198]==0) responseI[101621]=0; //assymetric
if (responseI[101621] != vnodeI[198]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[198];
parity+=vnodeI[465];
parity+=vnodeI[757];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166133]=parity;
if (cwI[324]==0) responseI[166133]=0; //assymetric
if (responseI[166133] != vnodeI[324]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[198];
parity+=vnodeI[324];
parity+=vnodeI[757];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238325]=parity;
if (cwI[465]==0) responseI[238325]=0; //assymetric
if (responseI[238325] != vnodeI[465]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[198];
parity+=vnodeI[324];
parity+=vnodeI[465];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[387829]=parity;
if (cwI[757]==0) responseI[387829]=0; //assymetric
if (responseI[387829] != vnodeI[757]) parityerrors++;
parity=0;
parity+=vnodeI[108];
parity+=vnodeI[274];
parity+=vnodeI[449];
parity+=vnodeI[758];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44278]=parity;
if (cwI[86]==0) responseI[44278]=0; //assymetric
if (responseI[44278] != vnodeI[86]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[274];
parity+=vnodeI[449];
parity+=vnodeI[758];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55542]=parity;
if (cwI[108]==0) responseI[55542]=0; //assymetric
if (responseI[55542] != vnodeI[108]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[108];
parity+=vnodeI[449];
parity+=vnodeI[758];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140534]=parity;
if (cwI[274]==0) responseI[140534]=0; //assymetric
if (responseI[140534] != vnodeI[274]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[108];
parity+=vnodeI[274];
parity+=vnodeI[758];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230134]=parity;
if (cwI[449]==0) responseI[230134]=0; //assymetric
if (responseI[230134] != vnodeI[449]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[108];
parity+=vnodeI[274];
parity+=vnodeI[449];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[388342]=parity;
if (cwI[758]==0) responseI[388342]=0; //assymetric
if (responseI[388342] != vnodeI[758]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[233];
parity+=vnodeI[759];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30455]=parity;
if (cwI[59]==0) responseI[30455]=0; //assymetric
if (responseI[30455] != vnodeI[59]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[233];
parity+=vnodeI[759];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[72951]=parity;
if (cwI[142]==0) responseI[72951]=0; //assymetric
if (responseI[72951] != vnodeI[142]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[142];
parity+=vnodeI[759];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119543]=parity;
if (cwI[233]==0) responseI[119543]=0; //assymetric
if (responseI[119543] != vnodeI[233]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[142];
parity+=vnodeI[233];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[388855]=parity;
if (cwI[759]==0) responseI[388855]=0; //assymetric
if (responseI[388855] != vnodeI[759]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[205];
parity+=vnodeI[386];
parity+=vnodeI[760];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53496]=parity;
if (cwI[104]==0) responseI[53496]=0; //assymetric
if (responseI[53496] != vnodeI[104]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[205];
parity+=vnodeI[386];
parity+=vnodeI[760];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57592]=parity;
if (cwI[112]==0) responseI[57592]=0; //assymetric
if (responseI[57592] != vnodeI[112]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[112];
parity+=vnodeI[386];
parity+=vnodeI[760];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105208]=parity;
if (cwI[205]==0) responseI[105208]=0; //assymetric
if (responseI[105208] != vnodeI[205]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[112];
parity+=vnodeI[205];
parity+=vnodeI[760];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197880]=parity;
if (cwI[386]==0) responseI[197880]=0; //assymetric
if (responseI[197880] != vnodeI[386]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[112];
parity+=vnodeI[205];
parity+=vnodeI[386];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[389368]=parity;
if (cwI[760]==0) responseI[389368]=0; //assymetric
if (responseI[389368] != vnodeI[760]) parityerrors++;
parity=0;
parity+=vnodeI[341];
parity+=vnodeI[430];
parity+=vnodeI[446];
parity+=vnodeI[761];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24825]=parity;
if (cwI[48]==0) responseI[24825]=0; //assymetric
if (responseI[24825] != vnodeI[48]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[430];
parity+=vnodeI[446];
parity+=vnodeI[761];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174841]=parity;
if (cwI[341]==0) responseI[174841]=0; //assymetric
if (responseI[174841] != vnodeI[341]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[341];
parity+=vnodeI[446];
parity+=vnodeI[761];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220409]=parity;
if (cwI[430]==0) responseI[220409]=0; //assymetric
if (responseI[220409] != vnodeI[430]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[341];
parity+=vnodeI[430];
parity+=vnodeI[761];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228601]=parity;
if (cwI[446]==0) responseI[228601]=0; //assymetric
if (responseI[228601] != vnodeI[446]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[341];
parity+=vnodeI[430];
parity+=vnodeI[446];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[389881]=parity;
if (cwI[761]==0) responseI[389881]=0; //assymetric
if (responseI[389881] != vnodeI[761]) parityerrors++;
parity=0;
parity+=vnodeI[263];
parity+=vnodeI[311];
parity+=vnodeI[367];
parity+=vnodeI[762];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115962]=parity;
if (cwI[226]==0) responseI[115962]=0; //assymetric
if (responseI[115962] != vnodeI[226]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[311];
parity+=vnodeI[367];
parity+=vnodeI[762];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134906]=parity;
if (cwI[263]==0) responseI[134906]=0; //assymetric
if (responseI[134906] != vnodeI[263]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[263];
parity+=vnodeI[367];
parity+=vnodeI[762];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159482]=parity;
if (cwI[311]==0) responseI[159482]=0; //assymetric
if (responseI[159482] != vnodeI[311]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[263];
parity+=vnodeI[311];
parity+=vnodeI[762];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188154]=parity;
if (cwI[367]==0) responseI[188154]=0; //assymetric
if (responseI[188154] != vnodeI[367]) parityerrors++;
parity=0;
parity+=vnodeI[226];
parity+=vnodeI[263];
parity+=vnodeI[311];
parity+=vnodeI[367];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[390394]=parity;
if (cwI[762]==0) responseI[390394]=0; //assymetric
if (responseI[390394] != vnodeI[762]) parityerrors++;
parity=0;
parity+=vnodeI[297];
parity+=vnodeI[302];
parity+=vnodeI[348];
parity+=vnodeI[763];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41723]=parity;
if (cwI[81]==0) responseI[41723]=0; //assymetric
if (responseI[41723] != vnodeI[81]) parityerrors++;
parity=0;
parity+=vnodeI[81];
parity+=vnodeI[302];
parity+=vnodeI[348];
parity+=vnodeI[763];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152315]=parity;
if (cwI[297]==0) responseI[152315]=0; //assymetric
if (responseI[152315] != vnodeI[297]) parityerrors++;
parity=0;
parity+=vnodeI[81];
parity+=vnodeI[297];
parity+=vnodeI[348];
parity+=vnodeI[763];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154875]=parity;
if (cwI[302]==0) responseI[154875]=0; //assymetric
if (responseI[154875] != vnodeI[302]) parityerrors++;
parity=0;
parity+=vnodeI[81];
parity+=vnodeI[297];
parity+=vnodeI[302];
parity+=vnodeI[763];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[178427]=parity;
if (cwI[348]==0) responseI[178427]=0; //assymetric
if (responseI[178427] != vnodeI[348]) parityerrors++;
parity=0;
parity+=vnodeI[81];
parity+=vnodeI[297];
parity+=vnodeI[302];
parity+=vnodeI[348];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[390907]=parity;
if (cwI[763]==0) responseI[390907]=0; //assymetric
if (responseI[390907] != vnodeI[763]) parityerrors++;
parity=0;
parity+=vnodeI[411];
parity+=vnodeI[464];
parity+=vnodeI[468];
parity+=vnodeI[764];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58108]=parity;
if (cwI[113]==0) responseI[58108]=0; //assymetric
if (responseI[58108] != vnodeI[113]) parityerrors++;
parity=0;
parity+=vnodeI[113];
parity+=vnodeI[464];
parity+=vnodeI[468];
parity+=vnodeI[764];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210684]=parity;
if (cwI[411]==0) responseI[210684]=0; //assymetric
if (responseI[210684] != vnodeI[411]) parityerrors++;
parity=0;
parity+=vnodeI[113];
parity+=vnodeI[411];
parity+=vnodeI[468];
parity+=vnodeI[764];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[237820]=parity;
if (cwI[464]==0) responseI[237820]=0; //assymetric
if (responseI[237820] != vnodeI[464]) parityerrors++;
parity=0;
parity+=vnodeI[113];
parity+=vnodeI[411];
parity+=vnodeI[464];
parity+=vnodeI[764];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239868]=parity;
if (cwI[468]==0) responseI[239868]=0; //assymetric
if (responseI[239868] != vnodeI[468]) parityerrors++;
parity=0;
parity+=vnodeI[113];
parity+=vnodeI[411];
parity+=vnodeI[464];
parity+=vnodeI[468];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[391420]=parity;
if (cwI[764]==0) responseI[391420]=0; //assymetric
if (responseI[391420] != vnodeI[764]) parityerrors++;
parity=0;
parity+=vnodeI[118];
parity+=vnodeI[194];
parity+=vnodeI[260];
parity+=vnodeI[765];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28925]=parity;
if (cwI[56]==0) responseI[28925]=0; //assymetric
if (responseI[28925] != vnodeI[56]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[194];
parity+=vnodeI[260];
parity+=vnodeI[765];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60669]=parity;
if (cwI[118]==0) responseI[60669]=0; //assymetric
if (responseI[60669] != vnodeI[118]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[118];
parity+=vnodeI[260];
parity+=vnodeI[765];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99581]=parity;
if (cwI[194]==0) responseI[99581]=0; //assymetric
if (responseI[99581] != vnodeI[194]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[118];
parity+=vnodeI[194];
parity+=vnodeI[765];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133373]=parity;
if (cwI[260]==0) responseI[133373]=0; //assymetric
if (responseI[133373] != vnodeI[260]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[118];
parity+=vnodeI[194];
parity+=vnodeI[260];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[391933]=parity;
if (cwI[765]==0) responseI[391933]=0; //assymetric
if (responseI[391933] != vnodeI[765]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[485];
parity+=vnodeI[500];
parity+=vnodeI[766];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38654]=parity;
if (cwI[75]==0) responseI[38654]=0; //assymetric
if (responseI[38654] != vnodeI[75]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[485];
parity+=vnodeI[500];
parity+=vnodeI[766];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44286]=parity;
if (cwI[86]==0) responseI[44286]=0; //assymetric
if (responseI[44286] != vnodeI[86]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[86];
parity+=vnodeI[500];
parity+=vnodeI[766];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248574]=parity;
if (cwI[485]==0) responseI[248574]=0; //assymetric
if (responseI[248574] != vnodeI[485]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[86];
parity+=vnodeI[485];
parity+=vnodeI[766];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256254]=parity;
if (cwI[500]==0) responseI[256254]=0; //assymetric
if (responseI[256254] != vnodeI[500]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[86];
parity+=vnodeI[485];
parity+=vnodeI[500];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[392446]=parity;
if (cwI[766]==0) responseI[392446]=0; //assymetric
if (responseI[392446] != vnodeI[766]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[408];
parity+=vnodeI[423];
parity+=vnodeI[767];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29951]=parity;
if (cwI[58]==0) responseI[29951]=0; //assymetric
if (responseI[29951] != vnodeI[58]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[408];
parity+=vnodeI[423];
parity+=vnodeI[767];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108287]=parity;
if (cwI[211]==0) responseI[108287]=0; //assymetric
if (responseI[108287] != vnodeI[211]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[211];
parity+=vnodeI[423];
parity+=vnodeI[767];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209151]=parity;
if (cwI[408]==0) responseI[209151]=0; //assymetric
if (responseI[209151] != vnodeI[408]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[211];
parity+=vnodeI[408];
parity+=vnodeI[767];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216831]=parity;
if (cwI[423]==0) responseI[216831]=0; //assymetric
if (responseI[216831] != vnodeI[423]) parityerrors++;
parity=0;
parity+=vnodeI[58];
parity+=vnodeI[211];
parity+=vnodeI[408];
parity+=vnodeI[423];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[392959]=parity;
if (cwI[767]==0) responseI[392959]=0; //assymetric
if (responseI[392959] != vnodeI[767]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[152];
parity+=vnodeI[196];
parity+=vnodeI[270];
parity+=vnodeI[451];
parity+=vnodeI[768];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22272]=parity;
if (cwI[43]==0) responseI[22272]=0; //assymetric
if (responseI[22272] != vnodeI[43]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[152];
parity+=vnodeI[196];
parity+=vnodeI[270];
parity+=vnodeI[451];
parity+=vnodeI[768];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41216]=parity;
if (cwI[80]==0) responseI[41216]=0; //assymetric
if (responseI[41216] != vnodeI[80]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[80];
parity+=vnodeI[196];
parity+=vnodeI[270];
parity+=vnodeI[451];
parity+=vnodeI[768];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78080]=parity;
if (cwI[152]==0) responseI[78080]=0; //assymetric
if (responseI[78080] != vnodeI[152]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[80];
parity+=vnodeI[152];
parity+=vnodeI[270];
parity+=vnodeI[451];
parity+=vnodeI[768];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100608]=parity;
if (cwI[196]==0) responseI[100608]=0; //assymetric
if (responseI[100608] != vnodeI[196]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[80];
parity+=vnodeI[152];
parity+=vnodeI[196];
parity+=vnodeI[451];
parity+=vnodeI[768];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138496]=parity;
if (cwI[270]==0) responseI[138496]=0; //assymetric
if (responseI[138496] != vnodeI[270]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[80];
parity+=vnodeI[152];
parity+=vnodeI[196];
parity+=vnodeI[270];
parity+=vnodeI[768];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231168]=parity;
if (cwI[451]==0) responseI[231168]=0; //assymetric
if (responseI[231168] != vnodeI[451]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[80];
parity+=vnodeI[152];
parity+=vnodeI[196];
parity+=vnodeI[270];
parity+=vnodeI[451];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[393472]=parity;
if (cwI[768]==0) responseI[393472]=0; //assymetric
if (responseI[393472] != vnodeI[768]) parityerrors++;
parity=0;
parity+=vnodeI[185];
parity+=vnodeI[188];
parity+=vnodeI[296];
parity+=vnodeI[769];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84737]=parity;
if (cwI[165]==0) responseI[84737]=0; //assymetric
if (responseI[84737] != vnodeI[165]) parityerrors++;
parity=0;
parity+=vnodeI[165];
parity+=vnodeI[188];
parity+=vnodeI[296];
parity+=vnodeI[769];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94977]=parity;
if (cwI[185]==0) responseI[94977]=0; //assymetric
if (responseI[94977] != vnodeI[185]) parityerrors++;
parity=0;
parity+=vnodeI[165];
parity+=vnodeI[185];
parity+=vnodeI[296];
parity+=vnodeI[769];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96513]=parity;
if (cwI[188]==0) responseI[96513]=0; //assymetric
if (responseI[96513] != vnodeI[188]) parityerrors++;
parity=0;
parity+=vnodeI[165];
parity+=vnodeI[185];
parity+=vnodeI[188];
parity+=vnodeI[769];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151809]=parity;
if (cwI[296]==0) responseI[151809]=0; //assymetric
if (responseI[151809] != vnodeI[296]) parityerrors++;
parity=0;
parity+=vnodeI[165];
parity+=vnodeI[185];
parity+=vnodeI[188];
parity+=vnodeI[296];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[393985]=parity;
if (cwI[769]==0) responseI[393985]=0; //assymetric
if (responseI[393985] != vnodeI[769]) parityerrors++;
parity=0;
parity+=vnodeI[166];
parity+=vnodeI[282];
parity+=vnodeI[508];
parity+=vnodeI[770];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70402]=parity;
if (cwI[137]==0) responseI[70402]=0; //assymetric
if (responseI[70402] != vnodeI[137]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[282];
parity+=vnodeI[508];
parity+=vnodeI[770];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85250]=parity;
if (cwI[166]==0) responseI[85250]=0; //assymetric
if (responseI[85250] != vnodeI[166]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[166];
parity+=vnodeI[508];
parity+=vnodeI[770];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[144642]=parity;
if (cwI[282]==0) responseI[144642]=0; //assymetric
if (responseI[144642] != vnodeI[282]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[166];
parity+=vnodeI[282];
parity+=vnodeI[770];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260354]=parity;
if (cwI[508]==0) responseI[260354]=0; //assymetric
if (responseI[260354] != vnodeI[508]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[166];
parity+=vnodeI[282];
parity+=vnodeI[508];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[394498]=parity;
if (cwI[770]==0) responseI[394498]=0; //assymetric
if (responseI[394498] != vnodeI[770]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[110];
parity+=vnodeI[296];
parity+=vnodeI[771];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13571]=parity;
if (cwI[26]==0) responseI[13571]=0; //assymetric
if (responseI[13571] != vnodeI[26]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[110];
parity+=vnodeI[296];
parity+=vnodeI[771];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19203]=parity;
if (cwI[37]==0) responseI[19203]=0; //assymetric
if (responseI[19203] != vnodeI[37]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[37];
parity+=vnodeI[296];
parity+=vnodeI[771];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[56579]=parity;
if (cwI[110]==0) responseI[56579]=0; //assymetric
if (responseI[56579] != vnodeI[110]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[37];
parity+=vnodeI[110];
parity+=vnodeI[771];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151811]=parity;
if (cwI[296]==0) responseI[151811]=0; //assymetric
if (responseI[151811] != vnodeI[296]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[37];
parity+=vnodeI[110];
parity+=vnodeI[296];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[395011]=parity;
if (cwI[771]==0) responseI[395011]=0; //assymetric
if (responseI[395011] != vnodeI[771]) parityerrors++;
parity=0;
parity+=vnodeI[252];
parity+=vnodeI[435];
parity+=vnodeI[469];
parity+=vnodeI[772];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123652]=parity;
if (cwI[241]==0) responseI[123652]=0; //assymetric
if (responseI[123652] != vnodeI[241]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[435];
parity+=vnodeI[469];
parity+=vnodeI[772];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129284]=parity;
if (cwI[252]==0) responseI[129284]=0; //assymetric
if (responseI[129284] != vnodeI[252]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[252];
parity+=vnodeI[469];
parity+=vnodeI[772];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222980]=parity;
if (cwI[435]==0) responseI[222980]=0; //assymetric
if (responseI[222980] != vnodeI[435]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[252];
parity+=vnodeI[435];
parity+=vnodeI[772];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240388]=parity;
if (cwI[469]==0) responseI[240388]=0; //assymetric
if (responseI[240388] != vnodeI[469]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[252];
parity+=vnodeI[435];
parity+=vnodeI[469];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[395524]=parity;
if (cwI[772]==0) responseI[395524]=0; //assymetric
if (responseI[395524] != vnodeI[772]) parityerrors++;
parity=0;
parity+=vnodeI[341];
parity+=vnodeI[374];
parity+=vnodeI[439];
parity+=vnodeI[773];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157445]=parity;
if (cwI[307]==0) responseI[157445]=0; //assymetric
if (responseI[157445] != vnodeI[307]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[374];
parity+=vnodeI[439];
parity+=vnodeI[773];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174853]=parity;
if (cwI[341]==0) responseI[174853]=0; //assymetric
if (responseI[174853] != vnodeI[341]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[341];
parity+=vnodeI[439];
parity+=vnodeI[773];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191749]=parity;
if (cwI[374]==0) responseI[191749]=0; //assymetric
if (responseI[191749] != vnodeI[374]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[341];
parity+=vnodeI[374];
parity+=vnodeI[773];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225029]=parity;
if (cwI[439]==0) responseI[225029]=0; //assymetric
if (responseI[225029] != vnodeI[439]) parityerrors++;
parity=0;
parity+=vnodeI[307];
parity+=vnodeI[341];
parity+=vnodeI[374];
parity+=vnodeI[439];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[396037]=parity;
if (cwI[773]==0) responseI[396037]=0; //assymetric
if (responseI[396037] != vnodeI[773]) parityerrors++;
parity=0;
parity+=vnodeI[113];
parity+=vnodeI[399];
parity+=vnodeI[435];
parity+=vnodeI[774];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30470]=parity;
if (cwI[59]==0) responseI[30470]=0; //assymetric
if (responseI[30470] != vnodeI[59]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[399];
parity+=vnodeI[435];
parity+=vnodeI[774];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58118]=parity;
if (cwI[113]==0) responseI[58118]=0; //assymetric
if (responseI[58118] != vnodeI[113]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[113];
parity+=vnodeI[435];
parity+=vnodeI[774];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204550]=parity;
if (cwI[399]==0) responseI[204550]=0; //assymetric
if (responseI[204550] != vnodeI[399]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[113];
parity+=vnodeI[399];
parity+=vnodeI[774];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222982]=parity;
if (cwI[435]==0) responseI[222982]=0; //assymetric
if (responseI[222982] != vnodeI[435]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[113];
parity+=vnodeI[399];
parity+=vnodeI[435];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[396550]=parity;
if (cwI[774]==0) responseI[396550]=0; //assymetric
if (responseI[396550] != vnodeI[774]) parityerrors++;
parity=0;
parity+=vnodeI[194];
parity+=vnodeI[322];
parity+=vnodeI[330];
parity+=vnodeI[333];
parity+=vnodeI[775];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10503]=parity;
if (cwI[20]==0) responseI[10503]=0; //assymetric
if (responseI[10503] != vnodeI[20]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[322];
parity+=vnodeI[330];
parity+=vnodeI[333];
parity+=vnodeI[775];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99591]=parity;
if (cwI[194]==0) responseI[99591]=0; //assymetric
if (responseI[99591] != vnodeI[194]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[194];
parity+=vnodeI[330];
parity+=vnodeI[333];
parity+=vnodeI[775];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165127]=parity;
if (cwI[322]==0) responseI[165127]=0; //assymetric
if (responseI[165127] != vnodeI[322]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[194];
parity+=vnodeI[322];
parity+=vnodeI[333];
parity+=vnodeI[775];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169223]=parity;
if (cwI[330]==0) responseI[169223]=0; //assymetric
if (responseI[169223] != vnodeI[330]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[194];
parity+=vnodeI[322];
parity+=vnodeI[330];
parity+=vnodeI[775];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170759]=parity;
if (cwI[333]==0) responseI[170759]=0; //assymetric
if (responseI[170759] != vnodeI[333]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[194];
parity+=vnodeI[322];
parity+=vnodeI[330];
parity+=vnodeI[333];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[397063]=parity;
if (cwI[775]==0) responseI[397063]=0; //assymetric
if (responseI[397063] != vnodeI[775]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[314];
parity+=vnodeI[418];
parity+=vnodeI[776];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33032]=parity;
if (cwI[64]==0) responseI[33032]=0; //assymetric
if (responseI[33032] != vnodeI[64]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[314];
parity+=vnodeI[418];
parity+=vnodeI[776];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47368]=parity;
if (cwI[92]==0) responseI[47368]=0; //assymetric
if (responseI[47368] != vnodeI[92]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[92];
parity+=vnodeI[418];
parity+=vnodeI[776];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161032]=parity;
if (cwI[314]==0) responseI[161032]=0; //assymetric
if (responseI[161032] != vnodeI[314]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[92];
parity+=vnodeI[314];
parity+=vnodeI[776];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214280]=parity;
if (cwI[418]==0) responseI[214280]=0; //assymetric
if (responseI[214280] != vnodeI[418]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[92];
parity+=vnodeI[314];
parity+=vnodeI[418];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[397576]=parity;
if (cwI[776]==0) responseI[397576]=0; //assymetric
if (responseI[397576] != vnodeI[776]) parityerrors++;
parity=0;
parity+=vnodeI[344];
parity+=vnodeI[433];
parity+=vnodeI[489];
parity+=vnodeI[777];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108809]=parity;
if (cwI[212]==0) responseI[108809]=0; //assymetric
if (responseI[108809] != vnodeI[212]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[433];
parity+=vnodeI[489];
parity+=vnodeI[777];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176393]=parity;
if (cwI[344]==0) responseI[176393]=0; //assymetric
if (responseI[176393] != vnodeI[344]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[344];
parity+=vnodeI[489];
parity+=vnodeI[777];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[221961]=parity;
if (cwI[433]==0) responseI[221961]=0; //assymetric
if (responseI[221961] != vnodeI[433]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[344];
parity+=vnodeI[433];
parity+=vnodeI[777];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250633]=parity;
if (cwI[489]==0) responseI[250633]=0; //assymetric
if (responseI[250633] != vnodeI[489]) parityerrors++;
parity=0;
parity+=vnodeI[212];
parity+=vnodeI[344];
parity+=vnodeI[433];
parity+=vnodeI[489];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[398089]=parity;
if (cwI[777]==0) responseI[398089]=0; //assymetric
if (responseI[398089] != vnodeI[777]) parityerrors++;
parity=0;
parity+=vnodeI[107];
parity+=vnodeI[263];
parity+=vnodeI[445];
parity+=vnodeI[451];
parity+=vnodeI[778];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3850]=parity;
if (cwI[7]==0) responseI[3850]=0; //assymetric
if (responseI[3850] != vnodeI[7]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[263];
parity+=vnodeI[445];
parity+=vnodeI[451];
parity+=vnodeI[778];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55050]=parity;
if (cwI[107]==0) responseI[55050]=0; //assymetric
if (responseI[55050] != vnodeI[107]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[107];
parity+=vnodeI[445];
parity+=vnodeI[451];
parity+=vnodeI[778];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134922]=parity;
if (cwI[263]==0) responseI[134922]=0; //assymetric
if (responseI[134922] != vnodeI[263]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[107];
parity+=vnodeI[263];
parity+=vnodeI[451];
parity+=vnodeI[778];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228106]=parity;
if (cwI[445]==0) responseI[228106]=0; //assymetric
if (responseI[228106] != vnodeI[445]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[107];
parity+=vnodeI[263];
parity+=vnodeI[445];
parity+=vnodeI[778];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231178]=parity;
if (cwI[451]==0) responseI[231178]=0; //assymetric
if (responseI[231178] != vnodeI[451]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[107];
parity+=vnodeI[263];
parity+=vnodeI[445];
parity+=vnodeI[451];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[398602]=parity;
if (cwI[778]==0) responseI[398602]=0; //assymetric
if (responseI[398602] != vnodeI[778]) parityerrors++;
parity=0;
parity+=vnodeI[165];
parity+=vnodeI[363];
parity+=vnodeI[450];
parity+=vnodeI[779];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2315]=parity;
if (cwI[4]==0) responseI[2315]=0; //assymetric
if (responseI[2315] != vnodeI[4]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[363];
parity+=vnodeI[450];
parity+=vnodeI[779];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84747]=parity;
if (cwI[165]==0) responseI[84747]=0; //assymetric
if (responseI[84747] != vnodeI[165]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[165];
parity+=vnodeI[450];
parity+=vnodeI[779];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186123]=parity;
if (cwI[363]==0) responseI[186123]=0; //assymetric
if (responseI[186123] != vnodeI[363]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[165];
parity+=vnodeI[363];
parity+=vnodeI[779];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230667]=parity;
if (cwI[450]==0) responseI[230667]=0; //assymetric
if (responseI[230667] != vnodeI[450]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[165];
parity+=vnodeI[363];
parity+=vnodeI[450];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[399115]=parity;
if (cwI[779]==0) responseI[399115]=0; //assymetric
if (responseI[399115] != vnodeI[779]) parityerrors++;
parity=0;
parity+=vnodeI[20];
parity+=vnodeI[138];
parity+=vnodeI[143];
parity+=vnodeI[780];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8460]=parity;
if (cwI[16]==0) responseI[8460]=0; //assymetric
if (responseI[8460] != vnodeI[16]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[138];
parity+=vnodeI[143];
parity+=vnodeI[780];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10508]=parity;
if (cwI[20]==0) responseI[10508]=0; //assymetric
if (responseI[10508] != vnodeI[20]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[20];
parity+=vnodeI[143];
parity+=vnodeI[780];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70924]=parity;
if (cwI[138]==0) responseI[70924]=0; //assymetric
if (responseI[70924] != vnodeI[138]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[20];
parity+=vnodeI[138];
parity+=vnodeI[780];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73484]=parity;
if (cwI[143]==0) responseI[73484]=0; //assymetric
if (responseI[73484] != vnodeI[143]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[20];
parity+=vnodeI[138];
parity+=vnodeI[143];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[399628]=parity;
if (cwI[780]==0) responseI[399628]=0; //assymetric
if (responseI[399628] != vnodeI[780]) parityerrors++;
parity=0;
parity+=vnodeI[268];
parity+=vnodeI[276];
parity+=vnodeI[502];
parity+=vnodeI[781];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34573]=parity;
if (cwI[67]==0) responseI[34573]=0; //assymetric
if (responseI[34573] != vnodeI[67]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[276];
parity+=vnodeI[502];
parity+=vnodeI[781];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137485]=parity;
if (cwI[268]==0) responseI[137485]=0; //assymetric
if (responseI[137485] != vnodeI[268]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[268];
parity+=vnodeI[502];
parity+=vnodeI[781];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141581]=parity;
if (cwI[276]==0) responseI[141581]=0; //assymetric
if (responseI[141581] != vnodeI[276]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[268];
parity+=vnodeI[276];
parity+=vnodeI[781];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257293]=parity;
if (cwI[502]==0) responseI[257293]=0; //assymetric
if (responseI[257293] != vnodeI[502]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[268];
parity+=vnodeI[276];
parity+=vnodeI[502];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[400141]=parity;
if (cwI[781]==0) responseI[400141]=0; //assymetric
if (responseI[400141] != vnodeI[781]) parityerrors++;
parity=0;
parity+=vnodeI[199];
parity+=vnodeI[237];
parity+=vnodeI[360];
parity+=vnodeI[490];
parity+=vnodeI[782];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30478]=parity;
if (cwI[59]==0) responseI[30478]=0; //assymetric
if (responseI[30478] != vnodeI[59]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[237];
parity+=vnodeI[360];
parity+=vnodeI[490];
parity+=vnodeI[782];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102158]=parity;
if (cwI[199]==0) responseI[102158]=0; //assymetric
if (responseI[102158] != vnodeI[199]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[199];
parity+=vnodeI[360];
parity+=vnodeI[490];
parity+=vnodeI[782];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121614]=parity;
if (cwI[237]==0) responseI[121614]=0; //assymetric
if (responseI[121614] != vnodeI[237]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[199];
parity+=vnodeI[237];
parity+=vnodeI[490];
parity+=vnodeI[782];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184590]=parity;
if (cwI[360]==0) responseI[184590]=0; //assymetric
if (responseI[184590] != vnodeI[360]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[199];
parity+=vnodeI[237];
parity+=vnodeI[360];
parity+=vnodeI[782];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251150]=parity;
if (cwI[490]==0) responseI[251150]=0; //assymetric
if (responseI[251150] != vnodeI[490]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[199];
parity+=vnodeI[237];
parity+=vnodeI[360];
parity+=vnodeI[490];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[400654]=parity;
if (cwI[782]==0) responseI[400654]=0; //assymetric
if (responseI[400654] != vnodeI[782]) parityerrors++;
parity=0;
parity+=vnodeI[120];
parity+=vnodeI[164];
parity+=vnodeI[323];
parity+=vnodeI[783];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33551]=parity;
if (cwI[65]==0) responseI[33551]=0; //assymetric
if (responseI[33551] != vnodeI[65]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[164];
parity+=vnodeI[323];
parity+=vnodeI[783];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61711]=parity;
if (cwI[120]==0) responseI[61711]=0; //assymetric
if (responseI[61711] != vnodeI[120]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[120];
parity+=vnodeI[323];
parity+=vnodeI[783];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84239]=parity;
if (cwI[164]==0) responseI[84239]=0; //assymetric
if (responseI[84239] != vnodeI[164]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[120];
parity+=vnodeI[164];
parity+=vnodeI[783];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165647]=parity;
if (cwI[323]==0) responseI[165647]=0; //assymetric
if (responseI[165647] != vnodeI[323]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[120];
parity+=vnodeI[164];
parity+=vnodeI[323];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[401167]=parity;
if (cwI[783]==0) responseI[401167]=0; //assymetric
if (responseI[401167] != vnodeI[783]) parityerrors++;
parity=0;
parity+=vnodeI[108];
parity+=vnodeI[269];
parity+=vnodeI[370];
parity+=vnodeI[784];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15120]=parity;
if (cwI[29]==0) responseI[15120]=0; //assymetric
if (responseI[15120] != vnodeI[29]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[269];
parity+=vnodeI[370];
parity+=vnodeI[784];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55568]=parity;
if (cwI[108]==0) responseI[55568]=0; //assymetric
if (responseI[55568] != vnodeI[108]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[108];
parity+=vnodeI[370];
parity+=vnodeI[784];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138000]=parity;
if (cwI[269]==0) responseI[138000]=0; //assymetric
if (responseI[138000] != vnodeI[269]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[108];
parity+=vnodeI[269];
parity+=vnodeI[784];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[189712]=parity;
if (cwI[370]==0) responseI[189712]=0; //assymetric
if (responseI[189712] != vnodeI[370]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[108];
parity+=vnodeI[269];
parity+=vnodeI[370];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[401680]=parity;
if (cwI[784]==0) responseI[401680]=0; //assymetric
if (responseI[401680] != vnodeI[784]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[253];
parity+=vnodeI[504];
parity+=vnodeI[785];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48401]=parity;
if (cwI[94]==0) responseI[48401]=0; //assymetric
if (responseI[48401] != vnodeI[94]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[253];
parity+=vnodeI[504];
parity+=vnodeI[785];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68881]=parity;
if (cwI[134]==0) responseI[68881]=0; //assymetric
if (responseI[68881] != vnodeI[134]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[134];
parity+=vnodeI[504];
parity+=vnodeI[785];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129809]=parity;
if (cwI[253]==0) responseI[129809]=0; //assymetric
if (responseI[129809] != vnodeI[253]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[134];
parity+=vnodeI[253];
parity+=vnodeI[785];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258321]=parity;
if (cwI[504]==0) responseI[258321]=0; //assymetric
if (responseI[258321] != vnodeI[504]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[134];
parity+=vnodeI[253];
parity+=vnodeI[504];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[402193]=parity;
if (cwI[785]==0) responseI[402193]=0; //assymetric
if (responseI[402193] != vnodeI[785]) parityerrors++;
parity=0;
parity+=vnodeI[410];
parity+=vnodeI[425];
parity+=vnodeI[786];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161042]=parity;
if (cwI[314]==0) responseI[161042]=0; //assymetric
if (responseI[161042] != vnodeI[314]) parityerrors++;
parity=0;
parity+=vnodeI[314];
parity+=vnodeI[425];
parity+=vnodeI[786];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210194]=parity;
if (cwI[410]==0) responseI[210194]=0; //assymetric
if (responseI[210194] != vnodeI[410]) parityerrors++;
parity=0;
parity+=vnodeI[314];
parity+=vnodeI[410];
parity+=vnodeI[786];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217874]=parity;
if (cwI[425]==0) responseI[217874]=0; //assymetric
if (responseI[217874] != vnodeI[425]) parityerrors++;
parity=0;
parity+=vnodeI[314];
parity+=vnodeI[410];
parity+=vnodeI[425];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[402706]=parity;
if (cwI[786]==0) responseI[402706]=0; //assymetric
if (responseI[402706] != vnodeI[786]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[255];
parity+=vnodeI[423];
parity+=vnodeI[787];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25875]=parity;
if (cwI[50]==0) responseI[25875]=0; //assymetric
if (responseI[25875] != vnodeI[50]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[255];
parity+=vnodeI[423];
parity+=vnodeI[787];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31507]=parity;
if (cwI[61]==0) responseI[31507]=0; //assymetric
if (responseI[31507] != vnodeI[61]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[61];
parity+=vnodeI[423];
parity+=vnodeI[787];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130835]=parity;
if (cwI[255]==0) responseI[130835]=0; //assymetric
if (responseI[130835] != vnodeI[255]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[61];
parity+=vnodeI[255];
parity+=vnodeI[787];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216851]=parity;
if (cwI[423]==0) responseI[216851]=0; //assymetric
if (responseI[216851] != vnodeI[423]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[61];
parity+=vnodeI[255];
parity+=vnodeI[423];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[403219]=parity;
if (cwI[787]==0) responseI[403219]=0; //assymetric
if (responseI[403219] != vnodeI[787]) parityerrors++;
parity=0;
parity+=vnodeI[445];
parity+=vnodeI[463];
parity+=vnodeI[476];
parity+=vnodeI[788];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33044]=parity;
if (cwI[64]==0) responseI[33044]=0; //assymetric
if (responseI[33044] != vnodeI[64]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[463];
parity+=vnodeI[476];
parity+=vnodeI[788];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228116]=parity;
if (cwI[445]==0) responseI[228116]=0; //assymetric
if (responseI[228116] != vnodeI[445]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[445];
parity+=vnodeI[476];
parity+=vnodeI[788];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[237332]=parity;
if (cwI[463]==0) responseI[237332]=0; //assymetric
if (responseI[237332] != vnodeI[463]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[445];
parity+=vnodeI[463];
parity+=vnodeI[788];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243988]=parity;
if (cwI[476]==0) responseI[243988]=0; //assymetric
if (responseI[243988] != vnodeI[476]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[445];
parity+=vnodeI[463];
parity+=vnodeI[476];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[403732]=parity;
if (cwI[788]==0) responseI[403732]=0; //assymetric
if (responseI[403732] != vnodeI[788]) parityerrors++;
parity=0;
parity+=vnodeI[265];
parity+=vnodeI[328];
parity+=vnodeI[403];
parity+=vnodeI[789];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27925]=parity;
if (cwI[54]==0) responseI[27925]=0; //assymetric
if (responseI[27925] != vnodeI[54]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[328];
parity+=vnodeI[403];
parity+=vnodeI[789];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135957]=parity;
if (cwI[265]==0) responseI[135957]=0; //assymetric
if (responseI[135957] != vnodeI[265]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[265];
parity+=vnodeI[403];
parity+=vnodeI[789];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168213]=parity;
if (cwI[328]==0) responseI[168213]=0; //assymetric
if (responseI[168213] != vnodeI[328]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[265];
parity+=vnodeI[328];
parity+=vnodeI[789];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206613]=parity;
if (cwI[403]==0) responseI[206613]=0; //assymetric
if (responseI[206613] != vnodeI[403]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[265];
parity+=vnodeI[328];
parity+=vnodeI[403];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[404245]=parity;
if (cwI[789]==0) responseI[404245]=0; //assymetric
if (responseI[404245] != vnodeI[789]) parityerrors++;
parity=0;
parity+=vnodeI[143];
parity+=vnodeI[325];
parity+=vnodeI[345];
parity+=vnodeI[790];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15126]=parity;
if (cwI[29]==0) responseI[15126]=0; //assymetric
if (responseI[15126] != vnodeI[29]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[325];
parity+=vnodeI[345];
parity+=vnodeI[790];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73494]=parity;
if (cwI[143]==0) responseI[73494]=0; //assymetric
if (responseI[73494] != vnodeI[143]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[143];
parity+=vnodeI[345];
parity+=vnodeI[790];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166678]=parity;
if (cwI[325]==0) responseI[166678]=0; //assymetric
if (responseI[166678] != vnodeI[325]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[143];
parity+=vnodeI[325];
parity+=vnodeI[790];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176918]=parity;
if (cwI[345]==0) responseI[176918]=0; //assymetric
if (responseI[176918] != vnodeI[345]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[143];
parity+=vnodeI[325];
parity+=vnodeI[345];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[404758]=parity;
if (cwI[790]==0) responseI[404758]=0; //assymetric
if (responseI[404758] != vnodeI[790]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[111];
parity+=vnodeI[289];
parity+=vnodeI[791];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5399]=parity;
if (cwI[10]==0) responseI[5399]=0; //assymetric
if (responseI[5399] != vnodeI[10]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[111];
parity+=vnodeI[289];
parity+=vnodeI[791];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48407]=parity;
if (cwI[94]==0) responseI[48407]=0; //assymetric
if (responseI[48407] != vnodeI[94]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[94];
parity+=vnodeI[289];
parity+=vnodeI[791];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57111]=parity;
if (cwI[111]==0) responseI[57111]=0; //assymetric
if (responseI[57111] != vnodeI[111]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[94];
parity+=vnodeI[111];
parity+=vnodeI[791];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148247]=parity;
if (cwI[289]==0) responseI[148247]=0; //assymetric
if (responseI[148247] != vnodeI[289]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[94];
parity+=vnodeI[111];
parity+=vnodeI[289];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[405271]=parity;
if (cwI[791]==0) responseI[405271]=0; //assymetric
if (responseI[405271] != vnodeI[791]) parityerrors++;
parity=0;
parity+=vnodeI[186];
parity+=vnodeI[200];
parity+=vnodeI[439];
parity+=vnodeI[792];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37656]=parity;
if (cwI[73]==0) responseI[37656]=0; //assymetric
if (responseI[37656] != vnodeI[73]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[200];
parity+=vnodeI[439];
parity+=vnodeI[792];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[95512]=parity;
if (cwI[186]==0) responseI[95512]=0; //assymetric
if (responseI[95512] != vnodeI[186]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[186];
parity+=vnodeI[439];
parity+=vnodeI[792];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102680]=parity;
if (cwI[200]==0) responseI[102680]=0; //assymetric
if (responseI[102680] != vnodeI[200]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[186];
parity+=vnodeI[200];
parity+=vnodeI[792];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225048]=parity;
if (cwI[439]==0) responseI[225048]=0; //assymetric
if (responseI[225048] != vnodeI[439]) parityerrors++;
parity=0;
parity+=vnodeI[73];
parity+=vnodeI[186];
parity+=vnodeI[200];
parity+=vnodeI[439];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[405784]=parity;
if (cwI[792]==0) responseI[405784]=0; //assymetric
if (responseI[405784] != vnodeI[792]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[435];
parity+=vnodeI[440];
parity+=vnodeI[793];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16153]=parity;
if (cwI[31]==0) responseI[16153]=0; //assymetric
if (responseI[16153] != vnodeI[31]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[435];
parity+=vnodeI[440];
parity+=vnodeI[793];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18201]=parity;
if (cwI[35]==0) responseI[18201]=0; //assymetric
if (responseI[18201] != vnodeI[35]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[35];
parity+=vnodeI[440];
parity+=vnodeI[793];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223001]=parity;
if (cwI[435]==0) responseI[223001]=0; //assymetric
if (responseI[223001] != vnodeI[435]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[35];
parity+=vnodeI[435];
parity+=vnodeI[793];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225561]=parity;
if (cwI[440]==0) responseI[225561]=0; //assymetric
if (responseI[225561] != vnodeI[440]) parityerrors++;
parity=0;
parity+=vnodeI[31];
parity+=vnodeI[35];
parity+=vnodeI[435];
parity+=vnodeI[440];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[406297]=parity;
if (cwI[793]==0) responseI[406297]=0; //assymetric
if (responseI[406297] != vnodeI[793]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[233];
parity+=vnodeI[357];
parity+=vnodeI[794];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6938]=parity;
if (cwI[13]==0) responseI[6938]=0; //assymetric
if (responseI[6938] != vnodeI[13]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[233];
parity+=vnodeI[357];
parity+=vnodeI[794];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66842]=parity;
if (cwI[130]==0) responseI[66842]=0; //assymetric
if (responseI[66842] != vnodeI[130]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[130];
parity+=vnodeI[357];
parity+=vnodeI[794];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119578]=parity;
if (cwI[233]==0) responseI[119578]=0; //assymetric
if (responseI[119578] != vnodeI[233]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[130];
parity+=vnodeI[233];
parity+=vnodeI[794];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183066]=parity;
if (cwI[357]==0) responseI[183066]=0; //assymetric
if (responseI[183066] != vnodeI[357]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[130];
parity+=vnodeI[233];
parity+=vnodeI[357];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[406810]=parity;
if (cwI[794]==0) responseI[406810]=0; //assymetric
if (responseI[406810] != vnodeI[794]) parityerrors++;
parity=0;
parity+=vnodeI[229];
parity+=vnodeI[248];
parity+=vnodeI[409];
parity+=vnodeI[795];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12059]=parity;
if (cwI[23]==0) responseI[12059]=0; //assymetric
if (responseI[12059] != vnodeI[23]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[248];
parity+=vnodeI[409];
parity+=vnodeI[795];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117531]=parity;
if (cwI[229]==0) responseI[117531]=0; //assymetric
if (responseI[117531] != vnodeI[229]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[229];
parity+=vnodeI[409];
parity+=vnodeI[795];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127259]=parity;
if (cwI[248]==0) responseI[127259]=0; //assymetric
if (responseI[127259] != vnodeI[248]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[229];
parity+=vnodeI[248];
parity+=vnodeI[795];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209691]=parity;
if (cwI[409]==0) responseI[209691]=0; //assymetric
if (responseI[209691] != vnodeI[409]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[229];
parity+=vnodeI[248];
parity+=vnodeI[409];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[407323]=parity;
if (cwI[795]==0) responseI[407323]=0; //assymetric
if (responseI[407323] != vnodeI[795]) parityerrors++;
parity=0;
parity+=vnodeI[174];
parity+=vnodeI[196];
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[796];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47388]=parity;
if (cwI[92]==0) responseI[47388]=0; //assymetric
if (responseI[47388] != vnodeI[92]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[196];
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[796];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89372]=parity;
if (cwI[174]==0) responseI[89372]=0; //assymetric
if (responseI[89372] != vnodeI[174]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[174];
parity+=vnodeI[238];
parity+=vnodeI[249];
parity+=vnodeI[796];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100636]=parity;
if (cwI[196]==0) responseI[100636]=0; //assymetric
if (responseI[100636] != vnodeI[196]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[174];
parity+=vnodeI[196];
parity+=vnodeI[249];
parity+=vnodeI[796];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122140]=parity;
if (cwI[238]==0) responseI[122140]=0; //assymetric
if (responseI[122140] != vnodeI[238]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[174];
parity+=vnodeI[196];
parity+=vnodeI[238];
parity+=vnodeI[796];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127772]=parity;
if (cwI[249]==0) responseI[127772]=0; //assymetric
if (responseI[127772] != vnodeI[249]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[174];
parity+=vnodeI[196];
parity+=vnodeI[238];
parity+=vnodeI[249];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[407836]=parity;
if (cwI[796]==0) responseI[407836]=0; //assymetric
if (responseI[407836] != vnodeI[796]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[81];
parity+=vnodeI[157];
parity+=vnodeI[460];
parity+=vnodeI[797];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10013]=parity;
if (cwI[19]==0) responseI[10013]=0; //assymetric
if (responseI[10013] != vnodeI[19]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[81];
parity+=vnodeI[157];
parity+=vnodeI[460];
parity+=vnodeI[797];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14109]=parity;
if (cwI[27]==0) responseI[14109]=0; //assymetric
if (responseI[14109] != vnodeI[27]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[27];
parity+=vnodeI[157];
parity+=vnodeI[460];
parity+=vnodeI[797];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41757]=parity;
if (cwI[81]==0) responseI[41757]=0; //assymetric
if (responseI[41757] != vnodeI[81]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[27];
parity+=vnodeI[81];
parity+=vnodeI[460];
parity+=vnodeI[797];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80669]=parity;
if (cwI[157]==0) responseI[80669]=0; //assymetric
if (responseI[80669] != vnodeI[157]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[27];
parity+=vnodeI[81];
parity+=vnodeI[157];
parity+=vnodeI[797];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235805]=parity;
if (cwI[460]==0) responseI[235805]=0; //assymetric
if (responseI[235805] != vnodeI[460]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[27];
parity+=vnodeI[81];
parity+=vnodeI[157];
parity+=vnodeI[460];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[408349]=parity;
if (cwI[797]==0) responseI[408349]=0; //assymetric
if (responseI[408349] != vnodeI[797]) parityerrors++;
parity=0;
parity+=vnodeI[146];
parity+=vnodeI[339];
parity+=vnodeI[456];
parity+=vnodeI[798];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16670]=parity;
if (cwI[32]==0) responseI[16670]=0; //assymetric
if (responseI[16670] != vnodeI[32]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[339];
parity+=vnodeI[456];
parity+=vnodeI[798];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75038]=parity;
if (cwI[146]==0) responseI[75038]=0; //assymetric
if (responseI[75038] != vnodeI[146]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[146];
parity+=vnodeI[456];
parity+=vnodeI[798];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173854]=parity;
if (cwI[339]==0) responseI[173854]=0; //assymetric
if (responseI[173854] != vnodeI[339]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[146];
parity+=vnodeI[339];
parity+=vnodeI[798];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233758]=parity;
if (cwI[456]==0) responseI[233758]=0; //assymetric
if (responseI[233758] != vnodeI[456]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[146];
parity+=vnodeI[339];
parity+=vnodeI[456];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[408862]=parity;
if (cwI[798]==0) responseI[408862]=0; //assymetric
if (responseI[408862] != vnodeI[798]) parityerrors++;
parity=0;
parity+=vnodeI[128];
parity+=vnodeI[173];
parity+=vnodeI[178];
parity+=vnodeI[799];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52511]=parity;
if (cwI[102]==0) responseI[52511]=0; //assymetric
if (responseI[52511] != vnodeI[102]) parityerrors++;
parity=0;
parity+=vnodeI[102];
parity+=vnodeI[173];
parity+=vnodeI[178];
parity+=vnodeI[799];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65823]=parity;
if (cwI[128]==0) responseI[65823]=0; //assymetric
if (responseI[65823] != vnodeI[128]) parityerrors++;
parity=0;
parity+=vnodeI[102];
parity+=vnodeI[128];
parity+=vnodeI[178];
parity+=vnodeI[799];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88863]=parity;
if (cwI[173]==0) responseI[88863]=0; //assymetric
if (responseI[88863] != vnodeI[173]) parityerrors++;
parity=0;
parity+=vnodeI[102];
parity+=vnodeI[128];
parity+=vnodeI[173];
parity+=vnodeI[799];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91423]=parity;
if (cwI[178]==0) responseI[91423]=0; //assymetric
if (responseI[91423] != vnodeI[178]) parityerrors++;
parity=0;
parity+=vnodeI[102];
parity+=vnodeI[128];
parity+=vnodeI[173];
parity+=vnodeI[178];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[409375]=parity;
if (cwI[799]==0) responseI[409375]=0; //assymetric
if (responseI[409375] != vnodeI[799]) parityerrors++;
parity=0;
parity+=vnodeI[102];
parity+=vnodeI[121];
parity+=vnodeI[126];
parity+=vnodeI[800];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46368]=parity;
if (cwI[90]==0) responseI[46368]=0; //assymetric
if (responseI[46368] != vnodeI[90]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[121];
parity+=vnodeI[126];
parity+=vnodeI[800];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52512]=parity;
if (cwI[102]==0) responseI[52512]=0; //assymetric
if (responseI[52512] != vnodeI[102]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[102];
parity+=vnodeI[126];
parity+=vnodeI[800];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62240]=parity;
if (cwI[121]==0) responseI[62240]=0; //assymetric
if (responseI[62240] != vnodeI[121]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[102];
parity+=vnodeI[121];
parity+=vnodeI[800];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64800]=parity;
if (cwI[126]==0) responseI[64800]=0; //assymetric
if (responseI[64800] != vnodeI[126]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[102];
parity+=vnodeI[121];
parity+=vnodeI[126];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[409888]=parity;
if (cwI[800]==0) responseI[409888]=0; //assymetric
if (responseI[409888] != vnodeI[800]) parityerrors++;
parity=0;
parity+=vnodeI[130];
parity+=vnodeI[368];
parity+=vnodeI[398];
parity+=vnodeI[801];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53537]=parity;
if (cwI[104]==0) responseI[53537]=0; //assymetric
if (responseI[53537] != vnodeI[104]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[368];
parity+=vnodeI[398];
parity+=vnodeI[801];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66849]=parity;
if (cwI[130]==0) responseI[66849]=0; //assymetric
if (responseI[66849] != vnodeI[130]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[130];
parity+=vnodeI[398];
parity+=vnodeI[801];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188705]=parity;
if (cwI[368]==0) responseI[188705]=0; //assymetric
if (responseI[188705] != vnodeI[368]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[130];
parity+=vnodeI[368];
parity+=vnodeI[801];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204065]=parity;
if (cwI[398]==0) responseI[204065]=0; //assymetric
if (responseI[204065] != vnodeI[398]) parityerrors++;
parity=0;
parity+=vnodeI[104];
parity+=vnodeI[130];
parity+=vnodeI[368];
parity+=vnodeI[398];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[410401]=parity;
if (cwI[801]==0) responseI[410401]=0; //assymetric
if (responseI[410401] != vnodeI[801]) parityerrors++;
parity=0;
parity+=vnodeI[102];
parity+=vnodeI[119];
parity+=vnodeI[229];
parity+=vnodeI[802];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41250]=parity;
if (cwI[80]==0) responseI[41250]=0; //assymetric
if (responseI[41250] != vnodeI[80]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[119];
parity+=vnodeI[229];
parity+=vnodeI[802];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52514]=parity;
if (cwI[102]==0) responseI[52514]=0; //assymetric
if (responseI[52514] != vnodeI[102]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[102];
parity+=vnodeI[229];
parity+=vnodeI[802];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61218]=parity;
if (cwI[119]==0) responseI[61218]=0; //assymetric
if (responseI[61218] != vnodeI[119]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[102];
parity+=vnodeI[119];
parity+=vnodeI[802];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117538]=parity;
if (cwI[229]==0) responseI[117538]=0; //assymetric
if (responseI[117538] != vnodeI[229]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[102];
parity+=vnodeI[119];
parity+=vnodeI[229];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[410914]=parity;
if (cwI[802]==0) responseI[410914]=0; //assymetric
if (responseI[410914] != vnodeI[802]) parityerrors++;
parity=0;
parity+=vnodeI[397];
parity+=vnodeI[419];
parity+=vnodeI[466];
parity+=vnodeI[803];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22307]=parity;
if (cwI[43]==0) responseI[22307]=0; //assymetric
if (responseI[22307] != vnodeI[43]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[419];
parity+=vnodeI[466];
parity+=vnodeI[803];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203555]=parity;
if (cwI[397]==0) responseI[203555]=0; //assymetric
if (responseI[203555] != vnodeI[397]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[397];
parity+=vnodeI[466];
parity+=vnodeI[803];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214819]=parity;
if (cwI[419]==0) responseI[214819]=0; //assymetric
if (responseI[214819] != vnodeI[419]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[397];
parity+=vnodeI[419];
parity+=vnodeI[803];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238883]=parity;
if (cwI[466]==0) responseI[238883]=0; //assymetric
if (responseI[238883] != vnodeI[466]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[397];
parity+=vnodeI[419];
parity+=vnodeI[466];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[411427]=parity;
if (cwI[803]==0) responseI[411427]=0; //assymetric
if (responseI[411427] != vnodeI[803]) parityerrors++;
parity=0;
parity+=vnodeI[322];
parity+=vnodeI[324];
parity+=vnodeI[382];
parity+=vnodeI[804];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[292]=parity;
if (cwI[0]==0) responseI[292]=0; //assymetric
if (responseI[292] != vnodeI[0]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[324];
parity+=vnodeI[382];
parity+=vnodeI[804];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165156]=parity;
if (cwI[322]==0) responseI[165156]=0; //assymetric
if (responseI[165156] != vnodeI[322]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[322];
parity+=vnodeI[382];
parity+=vnodeI[804];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166180]=parity;
if (cwI[324]==0) responseI[166180]=0; //assymetric
if (responseI[166180] != vnodeI[324]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[322];
parity+=vnodeI[324];
parity+=vnodeI[804];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[195876]=parity;
if (cwI[382]==0) responseI[195876]=0; //assymetric
if (responseI[195876] != vnodeI[382]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[322];
parity+=vnodeI[324];
parity+=vnodeI[382];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[411940]=parity;
if (cwI[804]==0) responseI[411940]=0; //assymetric
if (responseI[411940] != vnodeI[804]) parityerrors++;
parity=0;
parity+=vnodeI[286];
parity+=vnodeI[338];
parity+=vnodeI[353];
parity+=vnodeI[805];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[98597]=parity;
if (cwI[192]==0) responseI[98597]=0; //assymetric
if (responseI[98597] != vnodeI[192]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[338];
parity+=vnodeI[353];
parity+=vnodeI[805];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[146725]=parity;
if (cwI[286]==0) responseI[146725]=0; //assymetric
if (responseI[146725] != vnodeI[286]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[286];
parity+=vnodeI[353];
parity+=vnodeI[805];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173349]=parity;
if (cwI[338]==0) responseI[173349]=0; //assymetric
if (responseI[173349] != vnodeI[338]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[286];
parity+=vnodeI[338];
parity+=vnodeI[805];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181029]=parity;
if (cwI[353]==0) responseI[181029]=0; //assymetric
if (responseI[181029] != vnodeI[353]) parityerrors++;
parity=0;
parity+=vnodeI[192];
parity+=vnodeI[286];
parity+=vnodeI[338];
parity+=vnodeI[353];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[412453]=parity;
if (cwI[805]==0) responseI[412453]=0; //assymetric
if (responseI[412453] != vnodeI[805]) parityerrors++;
parity=0;
parity+=vnodeI[273];
parity+=vnodeI[329];
parity+=vnodeI[455];
parity+=vnodeI[806];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128294]=parity;
if (cwI[250]==0) responseI[128294]=0; //assymetric
if (responseI[128294] != vnodeI[250]) parityerrors++;
parity=0;
parity+=vnodeI[250];
parity+=vnodeI[329];
parity+=vnodeI[455];
parity+=vnodeI[806];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140070]=parity;
if (cwI[273]==0) responseI[140070]=0; //assymetric
if (responseI[140070] != vnodeI[273]) parityerrors++;
parity=0;
parity+=vnodeI[250];
parity+=vnodeI[273];
parity+=vnodeI[455];
parity+=vnodeI[806];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168742]=parity;
if (cwI[329]==0) responseI[168742]=0; //assymetric
if (responseI[168742] != vnodeI[329]) parityerrors++;
parity=0;
parity+=vnodeI[250];
parity+=vnodeI[273];
parity+=vnodeI[329];
parity+=vnodeI[806];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233254]=parity;
if (cwI[455]==0) responseI[233254]=0; //assymetric
if (responseI[233254] != vnodeI[455]) parityerrors++;
parity=0;
parity+=vnodeI[250];
parity+=vnodeI[273];
parity+=vnodeI[329];
parity+=vnodeI[455];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[412966]=parity;
if (cwI[806]==0) responseI[412966]=0; //assymetric
if (responseI[412966] != vnodeI[806]) parityerrors++;
parity=0;
parity+=vnodeI[162];
parity+=vnodeI[449];
parity+=vnodeI[478];
parity+=vnodeI[807];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1831]=parity;
if (cwI[3]==0) responseI[1831]=0; //assymetric
if (responseI[1831] != vnodeI[3]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[449];
parity+=vnodeI[478];
parity+=vnodeI[807];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83239]=parity;
if (cwI[162]==0) responseI[83239]=0; //assymetric
if (responseI[83239] != vnodeI[162]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[162];
parity+=vnodeI[478];
parity+=vnodeI[807];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230183]=parity;
if (cwI[449]==0) responseI[230183]=0; //assymetric
if (responseI[230183] != vnodeI[449]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[162];
parity+=vnodeI[449];
parity+=vnodeI[807];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245031]=parity;
if (cwI[478]==0) responseI[245031]=0; //assymetric
if (responseI[245031] != vnodeI[478]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[162];
parity+=vnodeI[449];
parity+=vnodeI[478];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[413479]=parity;
if (cwI[807]==0) responseI[413479]=0; //assymetric
if (responseI[413479] != vnodeI[807]) parityerrors++;
parity=0;
parity+=vnodeI[185];
parity+=vnodeI[247];
parity+=vnodeI[449];
parity+=vnodeI[808];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61736]=parity;
if (cwI[120]==0) responseI[61736]=0; //assymetric
if (responseI[61736] != vnodeI[120]) parityerrors++;
parity=0;
parity+=vnodeI[120];
parity+=vnodeI[247];
parity+=vnodeI[449];
parity+=vnodeI[808];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[95016]=parity;
if (cwI[185]==0) responseI[95016]=0; //assymetric
if (responseI[95016] != vnodeI[185]) parityerrors++;
parity=0;
parity+=vnodeI[120];
parity+=vnodeI[185];
parity+=vnodeI[449];
parity+=vnodeI[808];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126760]=parity;
if (cwI[247]==0) responseI[126760]=0; //assymetric
if (responseI[126760] != vnodeI[247]) parityerrors++;
parity=0;
parity+=vnodeI[120];
parity+=vnodeI[185];
parity+=vnodeI[247];
parity+=vnodeI[808];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230184]=parity;
if (cwI[449]==0) responseI[230184]=0; //assymetric
if (responseI[230184] != vnodeI[449]) parityerrors++;
parity=0;
parity+=vnodeI[120];
parity+=vnodeI[185];
parity+=vnodeI[247];
parity+=vnodeI[449];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[413992]=parity;
if (cwI[808]==0) responseI[413992]=0; //assymetric
if (responseI[413992] != vnodeI[808]) parityerrors++;
parity=0;
parity+=vnodeI[157];
parity+=vnodeI[278];
parity+=vnodeI[506];
parity+=vnodeI[809];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[56617]=parity;
if (cwI[110]==0) responseI[56617]=0; //assymetric
if (responseI[56617] != vnodeI[110]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[278];
parity+=vnodeI[506];
parity+=vnodeI[809];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80681]=parity;
if (cwI[157]==0) responseI[80681]=0; //assymetric
if (responseI[80681] != vnodeI[157]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[157];
parity+=vnodeI[506];
parity+=vnodeI[809];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142633]=parity;
if (cwI[278]==0) responseI[142633]=0; //assymetric
if (responseI[142633] != vnodeI[278]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[157];
parity+=vnodeI[278];
parity+=vnodeI[809];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259369]=parity;
if (cwI[506]==0) responseI[259369]=0; //assymetric
if (responseI[259369] != vnodeI[506]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[157];
parity+=vnodeI[278];
parity+=vnodeI[506];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[414505]=parity;
if (cwI[809]==0) responseI[414505]=0; //assymetric
if (responseI[414505] != vnodeI[809]) parityerrors++;
parity=0;
parity+=vnodeI[244];
parity+=vnodeI[276];
parity+=vnodeI[357];
parity+=vnodeI[810];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3370]=parity;
if (cwI[6]==0) responseI[3370]=0; //assymetric
if (responseI[3370] != vnodeI[6]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[276];
parity+=vnodeI[357];
parity+=vnodeI[810];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125226]=parity;
if (cwI[244]==0) responseI[125226]=0; //assymetric
if (responseI[125226] != vnodeI[244]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[244];
parity+=vnodeI[357];
parity+=vnodeI[810];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141610]=parity;
if (cwI[276]==0) responseI[141610]=0; //assymetric
if (responseI[141610] != vnodeI[276]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[244];
parity+=vnodeI[276];
parity+=vnodeI[810];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183082]=parity;
if (cwI[357]==0) responseI[183082]=0; //assymetric
if (responseI[183082] != vnodeI[357]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[244];
parity+=vnodeI[276];
parity+=vnodeI[357];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[415018]=parity;
if (cwI[810]==0) responseI[415018]=0; //assymetric
if (responseI[415018] != vnodeI[810]) parityerrors++;
parity=0;
parity+=vnodeI[373];
parity+=vnodeI[407];
parity+=vnodeI[416];
parity+=vnodeI[811];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38187]=parity;
if (cwI[74]==0) responseI[38187]=0; //assymetric
if (responseI[38187] != vnodeI[74]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[407];
parity+=vnodeI[416];
parity+=vnodeI[811];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191275]=parity;
if (cwI[373]==0) responseI[191275]=0; //assymetric
if (responseI[191275] != vnodeI[373]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[373];
parity+=vnodeI[416];
parity+=vnodeI[811];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208683]=parity;
if (cwI[407]==0) responseI[208683]=0; //assymetric
if (responseI[208683] != vnodeI[407]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[373];
parity+=vnodeI[407];
parity+=vnodeI[811];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213291]=parity;
if (cwI[416]==0) responseI[213291]=0; //assymetric
if (responseI[213291] != vnodeI[416]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[373];
parity+=vnodeI[407];
parity+=vnodeI[416];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[415531]=parity;
if (cwI[811]==0) responseI[415531]=0; //assymetric
if (responseI[415531] != vnodeI[811]) parityerrors++;
parity=0;
parity+=vnodeI[138];
parity+=vnodeI[272];
parity+=vnodeI[433];
parity+=vnodeI[812];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3884]=parity;
if (cwI[7]==0) responseI[3884]=0; //assymetric
if (responseI[3884] != vnodeI[7]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[272];
parity+=vnodeI[433];
parity+=vnodeI[812];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70956]=parity;
if (cwI[138]==0) responseI[70956]=0; //assymetric
if (responseI[70956] != vnodeI[138]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[138];
parity+=vnodeI[433];
parity+=vnodeI[812];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[139564]=parity;
if (cwI[272]==0) responseI[139564]=0; //assymetric
if (responseI[139564] != vnodeI[272]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[138];
parity+=vnodeI[272];
parity+=vnodeI[812];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[221996]=parity;
if (cwI[433]==0) responseI[221996]=0; //assymetric
if (responseI[221996] != vnodeI[433]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[138];
parity+=vnodeI[272];
parity+=vnodeI[433];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[416044]=parity;
if (cwI[812]==0) responseI[416044]=0; //assymetric
if (responseI[416044] != vnodeI[812]) parityerrors++;
parity=0;
parity+=vnodeI[255];
parity+=vnodeI[361];
parity+=vnodeI[374];
parity+=vnodeI[813];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24365]=parity;
if (cwI[47]==0) responseI[24365]=0; //assymetric
if (responseI[24365] != vnodeI[47]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[361];
parity+=vnodeI[374];
parity+=vnodeI[813];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130861]=parity;
if (cwI[255]==0) responseI[130861]=0; //assymetric
if (responseI[130861] != vnodeI[255]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[255];
parity+=vnodeI[374];
parity+=vnodeI[813];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185133]=parity;
if (cwI[361]==0) responseI[185133]=0; //assymetric
if (responseI[185133] != vnodeI[361]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[255];
parity+=vnodeI[361];
parity+=vnodeI[813];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191789]=parity;
if (cwI[374]==0) responseI[191789]=0; //assymetric
if (responseI[191789] != vnodeI[374]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[255];
parity+=vnodeI[361];
parity+=vnodeI[374];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[416557]=parity;
if (cwI[813]==0) responseI[416557]=0; //assymetric
if (responseI[416557] != vnodeI[813]) parityerrors++;
parity=0;
parity+=vnodeI[145];
parity+=vnodeI[194];
parity+=vnodeI[242];
parity+=vnodeI[814];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[35118]=parity;
if (cwI[68]==0) responseI[35118]=0; //assymetric
if (responseI[35118] != vnodeI[68]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[194];
parity+=vnodeI[242];
parity+=vnodeI[814];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[74542]=parity;
if (cwI[145]==0) responseI[74542]=0; //assymetric
if (responseI[74542] != vnodeI[145]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[145];
parity+=vnodeI[242];
parity+=vnodeI[814];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99630]=parity;
if (cwI[194]==0) responseI[99630]=0; //assymetric
if (responseI[99630] != vnodeI[194]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[145];
parity+=vnodeI[194];
parity+=vnodeI[814];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124206]=parity;
if (cwI[242]==0) responseI[124206]=0; //assymetric
if (responseI[124206] != vnodeI[242]) parityerrors++;
parity=0;
parity+=vnodeI[68];
parity+=vnodeI[145];
parity+=vnodeI[194];
parity+=vnodeI[242];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[417070]=parity;
if (cwI[814]==0) responseI[417070]=0; //assymetric
if (responseI[417070] != vnodeI[814]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[148];
parity+=vnodeI[165];
parity+=vnodeI[200];
parity+=vnodeI[815];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41263]=parity;
if (cwI[80]==0) responseI[41263]=0; //assymetric
if (responseI[41263] != vnodeI[80]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[148];
parity+=vnodeI[165];
parity+=vnodeI[200];
parity+=vnodeI[815];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42799]=parity;
if (cwI[83]==0) responseI[42799]=0; //assymetric
if (responseI[42799] != vnodeI[83]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[83];
parity+=vnodeI[165];
parity+=vnodeI[200];
parity+=vnodeI[815];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76079]=parity;
if (cwI[148]==0) responseI[76079]=0; //assymetric
if (responseI[76079] != vnodeI[148]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[83];
parity+=vnodeI[148];
parity+=vnodeI[200];
parity+=vnodeI[815];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84783]=parity;
if (cwI[165]==0) responseI[84783]=0; //assymetric
if (responseI[84783] != vnodeI[165]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[83];
parity+=vnodeI[148];
parity+=vnodeI[165];
parity+=vnodeI[815];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102703]=parity;
if (cwI[200]==0) responseI[102703]=0; //assymetric
if (responseI[102703] != vnodeI[200]) parityerrors++;
parity=0;
parity+=vnodeI[80];
parity+=vnodeI[83];
parity+=vnodeI[148];
parity+=vnodeI[165];
parity+=vnodeI[200];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[417583]=parity;
if (cwI[815]==0) responseI[417583]=0; //assymetric
if (responseI[417583] != vnodeI[815]) parityerrors++;
parity=0;
parity+=vnodeI[314];
parity+=vnodeI[316];
parity+=vnodeI[334];
parity+=vnodeI[816];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129840]=parity;
if (cwI[253]==0) responseI[129840]=0; //assymetric
if (responseI[129840] != vnodeI[253]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[316];
parity+=vnodeI[334];
parity+=vnodeI[816];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161072]=parity;
if (cwI[314]==0) responseI[161072]=0; //assymetric
if (responseI[161072] != vnodeI[314]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[314];
parity+=vnodeI[334];
parity+=vnodeI[816];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162096]=parity;
if (cwI[316]==0) responseI[162096]=0; //assymetric
if (responseI[162096] != vnodeI[316]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[314];
parity+=vnodeI[316];
parity+=vnodeI[816];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171312]=parity;
if (cwI[334]==0) responseI[171312]=0; //assymetric
if (responseI[171312] != vnodeI[334]) parityerrors++;
parity=0;
parity+=vnodeI[253];
parity+=vnodeI[314];
parity+=vnodeI[316];
parity+=vnodeI[334];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[418096]=parity;
if (cwI[816]==0) responseI[418096]=0; //assymetric
if (responseI[418096] != vnodeI[816]) parityerrors++;
parity=0;
parity+=vnodeI[187];
parity+=vnodeI[220];
parity+=vnodeI[413];
parity+=vnodeI[817];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90929]=parity;
if (cwI[177]==0) responseI[90929]=0; //assymetric
if (responseI[90929] != vnodeI[177]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[220];
parity+=vnodeI[413];
parity+=vnodeI[817];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96049]=parity;
if (cwI[187]==0) responseI[96049]=0; //assymetric
if (responseI[96049] != vnodeI[187]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[187];
parity+=vnodeI[413];
parity+=vnodeI[817];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112945]=parity;
if (cwI[220]==0) responseI[112945]=0; //assymetric
if (responseI[112945] != vnodeI[220]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[187];
parity+=vnodeI[220];
parity+=vnodeI[817];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211761]=parity;
if (cwI[413]==0) responseI[211761]=0; //assymetric
if (responseI[211761] != vnodeI[413]) parityerrors++;
parity=0;
parity+=vnodeI[177];
parity+=vnodeI[187];
parity+=vnodeI[220];
parity+=vnodeI[413];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[418609]=parity;
if (cwI[817]==0) responseI[418609]=0; //assymetric
if (responseI[418609] != vnodeI[817]) parityerrors++;
parity=0;
parity+=vnodeI[145];
parity+=vnodeI[293];
parity+=vnodeI[379];
parity+=vnodeI[818];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44850]=parity;
if (cwI[87]==0) responseI[44850]=0; //assymetric
if (responseI[44850] != vnodeI[87]) parityerrors++;
parity=0;
parity+=vnodeI[87];
parity+=vnodeI[293];
parity+=vnodeI[379];
parity+=vnodeI[818];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[74546]=parity;
if (cwI[145]==0) responseI[74546]=0; //assymetric
if (responseI[74546] != vnodeI[145]) parityerrors++;
parity=0;
parity+=vnodeI[87];
parity+=vnodeI[145];
parity+=vnodeI[379];
parity+=vnodeI[818];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150322]=parity;
if (cwI[293]==0) responseI[150322]=0; //assymetric
if (responseI[150322] != vnodeI[293]) parityerrors++;
parity=0;
parity+=vnodeI[87];
parity+=vnodeI[145];
parity+=vnodeI[293];
parity+=vnodeI[818];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194354]=parity;
if (cwI[379]==0) responseI[194354]=0; //assymetric
if (responseI[194354] != vnodeI[379]) parityerrors++;
parity=0;
parity+=vnodeI[87];
parity+=vnodeI[145];
parity+=vnodeI[293];
parity+=vnodeI[379];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[419122]=parity;
if (cwI[818]==0) responseI[419122]=0; //assymetric
if (responseI[419122] != vnodeI[818]) parityerrors++;
parity=0;
parity+=vnodeI[289];
parity+=vnodeI[431];
parity+=vnodeI[504];
parity+=vnodeI[819];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87347]=parity;
if (cwI[170]==0) responseI[87347]=0; //assymetric
if (responseI[87347] != vnodeI[170]) parityerrors++;
parity=0;
parity+=vnodeI[170];
parity+=vnodeI[431];
parity+=vnodeI[504];
parity+=vnodeI[819];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148275]=parity;
if (cwI[289]==0) responseI[148275]=0; //assymetric
if (responseI[148275] != vnodeI[289]) parityerrors++;
parity=0;
parity+=vnodeI[170];
parity+=vnodeI[289];
parity+=vnodeI[504];
parity+=vnodeI[819];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220979]=parity;
if (cwI[431]==0) responseI[220979]=0; //assymetric
if (responseI[220979] != vnodeI[431]) parityerrors++;
parity=0;
parity+=vnodeI[170];
parity+=vnodeI[289];
parity+=vnodeI[431];
parity+=vnodeI[819];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258355]=parity;
if (cwI[504]==0) responseI[258355]=0; //assymetric
if (responseI[258355] != vnodeI[504]) parityerrors++;
parity=0;
parity+=vnodeI[170];
parity+=vnodeI[289];
parity+=vnodeI[431];
parity+=vnodeI[504];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[419635]=parity;
if (cwI[819]==0) responseI[419635]=0; //assymetric
if (responseI[419635] != vnodeI[819]) parityerrors++;
parity=0;
parity+=vnodeI[88];
parity+=vnodeI[123];
parity+=vnodeI[299];
parity+=vnodeI[820];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28980]=parity;
if (cwI[56]==0) responseI[28980]=0; //assymetric
if (responseI[28980] != vnodeI[56]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[123];
parity+=vnodeI[299];
parity+=vnodeI[820];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[45364]=parity;
if (cwI[88]==0) responseI[45364]=0; //assymetric
if (responseI[45364] != vnodeI[88]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[88];
parity+=vnodeI[299];
parity+=vnodeI[820];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63284]=parity;
if (cwI[123]==0) responseI[63284]=0; //assymetric
if (responseI[63284] != vnodeI[123]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[88];
parity+=vnodeI[123];
parity+=vnodeI[820];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153396]=parity;
if (cwI[299]==0) responseI[153396]=0; //assymetric
if (responseI[153396] != vnodeI[299]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[88];
parity+=vnodeI[123];
parity+=vnodeI[299];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[420148]=parity;
if (cwI[820]==0) responseI[420148]=0; //assymetric
if (responseI[420148] != vnodeI[820]) parityerrors++;
parity=0;
parity+=vnodeI[152];
parity+=vnodeI[283];
parity+=vnodeI[342];
parity+=vnodeI[821];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48949]=parity;
if (cwI[95]==0) responseI[48949]=0; //assymetric
if (responseI[48949] != vnodeI[95]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[283];
parity+=vnodeI[342];
parity+=vnodeI[821];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78133]=parity;
if (cwI[152]==0) responseI[78133]=0; //assymetric
if (responseI[78133] != vnodeI[152]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[152];
parity+=vnodeI[342];
parity+=vnodeI[821];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145205]=parity;
if (cwI[283]==0) responseI[145205]=0; //assymetric
if (responseI[145205] != vnodeI[283]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[152];
parity+=vnodeI[283];
parity+=vnodeI[821];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175413]=parity;
if (cwI[342]==0) responseI[175413]=0; //assymetric
if (responseI[175413] != vnodeI[342]) parityerrors++;
parity=0;
parity+=vnodeI[95];
parity+=vnodeI[152];
parity+=vnodeI[283];
parity+=vnodeI[342];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[420661]=parity;
if (cwI[821]==0) responseI[420661]=0; //assymetric
if (responseI[420661] != vnodeI[821]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[267];
parity+=vnodeI[302];
parity+=vnodeI[822];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27446]=parity;
if (cwI[53]==0) responseI[27446]=0; //assymetric
if (responseI[27446] != vnodeI[53]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[267];
parity+=vnodeI[302];
parity+=vnodeI[822];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63798]=parity;
if (cwI[124]==0) responseI[63798]=0; //assymetric
if (responseI[63798] != vnodeI[124]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[124];
parity+=vnodeI[302];
parity+=vnodeI[822];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137014]=parity;
if (cwI[267]==0) responseI[137014]=0; //assymetric
if (responseI[137014] != vnodeI[267]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[124];
parity+=vnodeI[267];
parity+=vnodeI[822];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154934]=parity;
if (cwI[302]==0) responseI[154934]=0; //assymetric
if (responseI[154934] != vnodeI[302]) parityerrors++;
parity=0;
parity+=vnodeI[53];
parity+=vnodeI[124];
parity+=vnodeI[267];
parity+=vnodeI[302];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[421174]=parity;
if (cwI[822]==0) responseI[421174]=0; //assymetric
if (responseI[421174] != vnodeI[822]) parityerrors++;
parity=0;
parity+=vnodeI[178];
parity+=vnodeI[233];
parity+=vnodeI[373];
parity+=vnodeI[823];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51511]=parity;
if (cwI[100]==0) responseI[51511]=0; //assymetric
if (responseI[51511] != vnodeI[100]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[233];
parity+=vnodeI[373];
parity+=vnodeI[823];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91447]=parity;
if (cwI[178]==0) responseI[91447]=0; //assymetric
if (responseI[91447] != vnodeI[178]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[178];
parity+=vnodeI[373];
parity+=vnodeI[823];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119607]=parity;
if (cwI[233]==0) responseI[119607]=0; //assymetric
if (responseI[119607] != vnodeI[233]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[178];
parity+=vnodeI[233];
parity+=vnodeI[823];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191287]=parity;
if (cwI[373]==0) responseI[191287]=0; //assymetric
if (responseI[191287] != vnodeI[373]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[178];
parity+=vnodeI[233];
parity+=vnodeI[373];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[421687]=parity;
if (cwI[823]==0) responseI[421687]=0; //assymetric
if (responseI[421687] != vnodeI[823]) parityerrors++;
parity=0;
parity+=vnodeI[13];
parity+=vnodeI[253];
parity+=vnodeI[466];
parity+=vnodeI[824];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[4408]=parity;
if (cwI[8]==0) responseI[4408]=0; //assymetric
if (responseI[4408] != vnodeI[8]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[253];
parity+=vnodeI[466];
parity+=vnodeI[824];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6968]=parity;
if (cwI[13]==0) responseI[6968]=0; //assymetric
if (responseI[6968] != vnodeI[13]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[13];
parity+=vnodeI[466];
parity+=vnodeI[824];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129848]=parity;
if (cwI[253]==0) responseI[129848]=0; //assymetric
if (responseI[129848] != vnodeI[253]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[13];
parity+=vnodeI[253];
parity+=vnodeI[824];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238904]=parity;
if (cwI[466]==0) responseI[238904]=0; //assymetric
if (responseI[238904] != vnodeI[466]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[13];
parity+=vnodeI[253];
parity+=vnodeI[466];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[422200]=parity;
if (cwI[824]==0) responseI[422200]=0; //assymetric
if (responseI[422200] != vnodeI[824]) parityerrors++;
parity=0;
parity+=vnodeI[135];
parity+=vnodeI[310];
parity+=vnodeI[359];
parity+=vnodeI[825];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34617]=parity;
if (cwI[67]==0) responseI[34617]=0; //assymetric
if (responseI[34617] != vnodeI[67]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[310];
parity+=vnodeI[359];
parity+=vnodeI[825];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[69433]=parity;
if (cwI[135]==0) responseI[69433]=0; //assymetric
if (responseI[69433] != vnodeI[135]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[135];
parity+=vnodeI[359];
parity+=vnodeI[825];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159033]=parity;
if (cwI[310]==0) responseI[159033]=0; //assymetric
if (responseI[159033] != vnodeI[310]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[135];
parity+=vnodeI[310];
parity+=vnodeI[825];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184121]=parity;
if (cwI[359]==0) responseI[184121]=0; //assymetric
if (responseI[184121] != vnodeI[359]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[135];
parity+=vnodeI[310];
parity+=vnodeI[359];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[422713]=parity;
if (cwI[825]==0) responseI[422713]=0; //assymetric
if (responseI[422713] != vnodeI[825]) parityerrors++;
parity=0;
parity+=vnodeI[224];
parity+=vnodeI[320];
parity+=vnodeI[374];
parity+=vnodeI[826];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[74042]=parity;
if (cwI[144]==0) responseI[74042]=0; //assymetric
if (responseI[74042] != vnodeI[144]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[320];
parity+=vnodeI[374];
parity+=vnodeI[826];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115002]=parity;
if (cwI[224]==0) responseI[115002]=0; //assymetric
if (responseI[115002] != vnodeI[224]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[224];
parity+=vnodeI[374];
parity+=vnodeI[826];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164154]=parity;
if (cwI[320]==0) responseI[164154]=0; //assymetric
if (responseI[164154] != vnodeI[320]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[224];
parity+=vnodeI[320];
parity+=vnodeI[826];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[191802]=parity;
if (cwI[374]==0) responseI[191802]=0; //assymetric
if (responseI[191802] != vnodeI[374]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[224];
parity+=vnodeI[320];
parity+=vnodeI[374];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[423226]=parity;
if (cwI[826]==0) responseI[423226]=0; //assymetric
if (responseI[423226] != vnodeI[826]) parityerrors++;
parity=0;
parity+=vnodeI[133];
parity+=vnodeI[188];
parity+=vnodeI[350];
parity+=vnodeI[827];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47931]=parity;
if (cwI[93]==0) responseI[47931]=0; //assymetric
if (responseI[47931] != vnodeI[93]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[188];
parity+=vnodeI[350];
parity+=vnodeI[827];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68411]=parity;
if (cwI[133]==0) responseI[68411]=0; //assymetric
if (responseI[68411] != vnodeI[133]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[133];
parity+=vnodeI[350];
parity+=vnodeI[827];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96571]=parity;
if (cwI[188]==0) responseI[96571]=0; //assymetric
if (responseI[96571] != vnodeI[188]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[133];
parity+=vnodeI[188];
parity+=vnodeI[827];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[179515]=parity;
if (cwI[350]==0) responseI[179515]=0; //assymetric
if (responseI[179515] != vnodeI[350]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[133];
parity+=vnodeI[188];
parity+=vnodeI[350];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[423739]=parity;
if (cwI[827]==0) responseI[423739]=0; //assymetric
if (responseI[423739] != vnodeI[827]) parityerrors++;
parity=0;
parity+=vnodeI[225];
parity+=vnodeI[283];
parity+=vnodeI[298];
parity+=vnodeI[828];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77116]=parity;
if (cwI[150]==0) responseI[77116]=0; //assymetric
if (responseI[77116] != vnodeI[150]) parityerrors++;
parity=0;
parity+=vnodeI[150];
parity+=vnodeI[283];
parity+=vnodeI[298];
parity+=vnodeI[828];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115516]=parity;
if (cwI[225]==0) responseI[115516]=0; //assymetric
if (responseI[115516] != vnodeI[225]) parityerrors++;
parity=0;
parity+=vnodeI[150];
parity+=vnodeI[225];
parity+=vnodeI[298];
parity+=vnodeI[828];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145212]=parity;
if (cwI[283]==0) responseI[145212]=0; //assymetric
if (responseI[145212] != vnodeI[283]) parityerrors++;
parity=0;
parity+=vnodeI[150];
parity+=vnodeI[225];
parity+=vnodeI[283];
parity+=vnodeI[828];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152892]=parity;
if (cwI[298]==0) responseI[152892]=0; //assymetric
if (responseI[152892] != vnodeI[298]) parityerrors++;
parity=0;
parity+=vnodeI[150];
parity+=vnodeI[225];
parity+=vnodeI[283];
parity+=vnodeI[298];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[424252]=parity;
if (cwI[828]==0) responseI[424252]=0; //assymetric
if (responseI[424252] != vnodeI[828]) parityerrors++;
parity=0;
parity+=vnodeI[166];
parity+=vnodeI[367];
parity+=vnodeI[451];
parity+=vnodeI[829];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[45885]=parity;
if (cwI[89]==0) responseI[45885]=0; //assymetric
if (responseI[45885] != vnodeI[89]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[367];
parity+=vnodeI[451];
parity+=vnodeI[829];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85309]=parity;
if (cwI[166]==0) responseI[85309]=0; //assymetric
if (responseI[85309] != vnodeI[166]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[166];
parity+=vnodeI[451];
parity+=vnodeI[829];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[188221]=parity;
if (cwI[367]==0) responseI[188221]=0; //assymetric
if (responseI[188221] != vnodeI[367]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[166];
parity+=vnodeI[367];
parity+=vnodeI[829];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231229]=parity;
if (cwI[451]==0) responseI[231229]=0; //assymetric
if (responseI[231229] != vnodeI[451]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[166];
parity+=vnodeI[367];
parity+=vnodeI[451];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[424765]=parity;
if (cwI[829]==0) responseI[424765]=0; //assymetric
if (responseI[424765] != vnodeI[829]) parityerrors++;
parity=0;
parity+=vnodeI[280];
parity+=vnodeI[318];
parity+=vnodeI[458];
parity+=vnodeI[830];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65342]=parity;
if (cwI[127]==0) responseI[65342]=0; //assymetric
if (responseI[65342] != vnodeI[127]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[318];
parity+=vnodeI[458];
parity+=vnodeI[830];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143678]=parity;
if (cwI[280]==0) responseI[143678]=0; //assymetric
if (responseI[143678] != vnodeI[280]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[280];
parity+=vnodeI[458];
parity+=vnodeI[830];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163134]=parity;
if (cwI[318]==0) responseI[163134]=0; //assymetric
if (responseI[163134] != vnodeI[318]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[280];
parity+=vnodeI[318];
parity+=vnodeI[830];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234814]=parity;
if (cwI[458]==0) responseI[234814]=0; //assymetric
if (responseI[234814] != vnodeI[458]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[280];
parity+=vnodeI[318];
parity+=vnodeI[458];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[425278]=parity;
if (cwI[830]==0) responseI[425278]=0; //assymetric
if (responseI[425278] != vnodeI[830]) parityerrors++;
parity=0;
parity+=vnodeI[237];
parity+=vnodeI[297];
parity+=vnodeI[417];
parity+=vnodeI[831];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79167]=parity;
if (cwI[154]==0) responseI[79167]=0; //assymetric
if (responseI[79167] != vnodeI[154]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[297];
parity+=vnodeI[417];
parity+=vnodeI[831];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121663]=parity;
if (cwI[237]==0) responseI[121663]=0; //assymetric
if (responseI[121663] != vnodeI[237]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[237];
parity+=vnodeI[417];
parity+=vnodeI[831];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152383]=parity;
if (cwI[297]==0) responseI[152383]=0; //assymetric
if (responseI[152383] != vnodeI[297]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[237];
parity+=vnodeI[297];
parity+=vnodeI[831];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213823]=parity;
if (cwI[417]==0) responseI[213823]=0; //assymetric
if (responseI[213823] != vnodeI[417]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[237];
parity+=vnodeI[297];
parity+=vnodeI[417];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[425791]=parity;
if (cwI[831]==0) responseI[425791]=0; //assymetric
if (responseI[425791] != vnodeI[831]) parityerrors++;
parity=0;
parity+=vnodeI[221];
parity+=vnodeI[345];
parity+=vnodeI[426];
parity+=vnodeI[832];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64832]=parity;
if (cwI[126]==0) responseI[64832]=0; //assymetric
if (responseI[64832] != vnodeI[126]) parityerrors++;
parity=0;
parity+=vnodeI[126];
parity+=vnodeI[345];
parity+=vnodeI[426];
parity+=vnodeI[832];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113472]=parity;
if (cwI[221]==0) responseI[113472]=0; //assymetric
if (responseI[113472] != vnodeI[221]) parityerrors++;
parity=0;
parity+=vnodeI[126];
parity+=vnodeI[221];
parity+=vnodeI[426];
parity+=vnodeI[832];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176960]=parity;
if (cwI[345]==0) responseI[176960]=0; //assymetric
if (responseI[176960] != vnodeI[345]) parityerrors++;
parity=0;
parity+=vnodeI[126];
parity+=vnodeI[221];
parity+=vnodeI[345];
parity+=vnodeI[832];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218432]=parity;
if (cwI[426]==0) responseI[218432]=0; //assymetric
if (responseI[218432] != vnodeI[426]) parityerrors++;
parity=0;
parity+=vnodeI[126];
parity+=vnodeI[221];
parity+=vnodeI[345];
parity+=vnodeI[426];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[426304]=parity;
if (cwI[832]==0) responseI[426304]=0; //assymetric
if (responseI[426304] != vnodeI[832]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[96];
parity+=vnodeI[240];
parity+=vnodeI[833];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6465]=parity;
if (cwI[12]==0) responseI[6465]=0; //assymetric
if (responseI[6465] != vnodeI[12]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[96];
parity+=vnodeI[240];
parity+=vnodeI[833];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40769]=parity;
if (cwI[79]==0) responseI[40769]=0; //assymetric
if (responseI[40769] != vnodeI[79]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[79];
parity+=vnodeI[240];
parity+=vnodeI[833];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49473]=parity;
if (cwI[96]==0) responseI[49473]=0; //assymetric
if (responseI[49473] != vnodeI[96]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[79];
parity+=vnodeI[96];
parity+=vnodeI[833];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123201]=parity;
if (cwI[240]==0) responseI[123201]=0; //assymetric
if (responseI[123201] != vnodeI[240]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[79];
parity+=vnodeI[96];
parity+=vnodeI[240];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[426817]=parity;
if (cwI[833]==0) responseI[426817]=0; //assymetric
if (responseI[426817] != vnodeI[833]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[227];
parity+=vnodeI[337];
parity+=vnodeI[834];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42818]=parity;
if (cwI[83]==0) responseI[42818]=0; //assymetric
if (responseI[42818] != vnodeI[83]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[227];
parity+=vnodeI[337];
parity+=vnodeI[834];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111426]=parity;
if (cwI[217]==0) responseI[111426]=0; //assymetric
if (responseI[111426] != vnodeI[217]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[217];
parity+=vnodeI[337];
parity+=vnodeI[834];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116546]=parity;
if (cwI[227]==0) responseI[116546]=0; //assymetric
if (responseI[116546] != vnodeI[227]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[217];
parity+=vnodeI[227];
parity+=vnodeI[834];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172866]=parity;
if (cwI[337]==0) responseI[172866]=0; //assymetric
if (responseI[172866] != vnodeI[337]) parityerrors++;
parity=0;
parity+=vnodeI[83];
parity+=vnodeI[217];
parity+=vnodeI[227];
parity+=vnodeI[337];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[427330]=parity;
if (cwI[834]==0) responseI[427330]=0; //assymetric
if (responseI[427330] != vnodeI[834]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[80];
parity+=vnodeI[455];
parity+=vnodeI[835];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8515]=parity;
if (cwI[16]==0) responseI[8515]=0; //assymetric
if (responseI[8515] != vnodeI[16]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[80];
parity+=vnodeI[455];
parity+=vnodeI[835];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13123]=parity;
if (cwI[25]==0) responseI[13123]=0; //assymetric
if (responseI[13123] != vnodeI[25]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[25];
parity+=vnodeI[455];
parity+=vnodeI[835];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[41283]=parity;
if (cwI[80]==0) responseI[41283]=0; //assymetric
if (responseI[41283] != vnodeI[80]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[25];
parity+=vnodeI[80];
parity+=vnodeI[835];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233283]=parity;
if (cwI[455]==0) responseI[233283]=0; //assymetric
if (responseI[233283] != vnodeI[455]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[25];
parity+=vnodeI[80];
parity+=vnodeI[455];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[427843]=parity;
if (cwI[835]==0) responseI[427843]=0; //assymetric
if (responseI[427843] != vnodeI[835]) parityerrors++;
parity=0;
parity+=vnodeI[242];
parity+=vnodeI[407];
parity+=vnodeI[440];
parity+=vnodeI[836];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28484]=parity;
if (cwI[55]==0) responseI[28484]=0; //assymetric
if (responseI[28484] != vnodeI[55]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[407];
parity+=vnodeI[440];
parity+=vnodeI[836];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124228]=parity;
if (cwI[242]==0) responseI[124228]=0; //assymetric
if (responseI[124228] != vnodeI[242]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[242];
parity+=vnodeI[440];
parity+=vnodeI[836];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208708]=parity;
if (cwI[407]==0) responseI[208708]=0; //assymetric
if (responseI[208708] != vnodeI[407]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[242];
parity+=vnodeI[407];
parity+=vnodeI[836];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225604]=parity;
if (cwI[440]==0) responseI[225604]=0; //assymetric
if (responseI[225604] != vnodeI[440]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[242];
parity+=vnodeI[407];
parity+=vnodeI[440];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[428356]=parity;
if (cwI[836]==0) responseI[428356]=0; //assymetric
if (responseI[428356] != vnodeI[836]) parityerrors++;
parity=0;
parity+=vnodeI[333];
parity+=vnodeI[389];
parity+=vnodeI[460];
parity+=vnodeI[837];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20805]=parity;
if (cwI[40]==0) responseI[20805]=0; //assymetric
if (responseI[20805] != vnodeI[40]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[389];
parity+=vnodeI[460];
parity+=vnodeI[837];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170821]=parity;
if (cwI[333]==0) responseI[170821]=0; //assymetric
if (responseI[170821] != vnodeI[333]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[333];
parity+=vnodeI[460];
parity+=vnodeI[837];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[199493]=parity;
if (cwI[389]==0) responseI[199493]=0; //assymetric
if (responseI[199493] != vnodeI[389]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[333];
parity+=vnodeI[389];
parity+=vnodeI[837];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235845]=parity;
if (cwI[460]==0) responseI[235845]=0; //assymetric
if (responseI[235845] != vnodeI[460]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[333];
parity+=vnodeI[389];
parity+=vnodeI[460];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[428869]=parity;
if (cwI[837]==0) responseI[428869]=0; //assymetric
if (responseI[428869] != vnodeI[837]) parityerrors++;
parity=0;
parity+=vnodeI[55];
parity+=vnodeI[72];
parity+=vnodeI[99];
parity+=vnodeI[838];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3398]=parity;
if (cwI[6]==0) responseI[3398]=0; //assymetric
if (responseI[3398] != vnodeI[6]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[72];
parity+=vnodeI[99];
parity+=vnodeI[838];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28486]=parity;
if (cwI[55]==0) responseI[28486]=0; //assymetric
if (responseI[28486] != vnodeI[55]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[55];
parity+=vnodeI[99];
parity+=vnodeI[838];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37190]=parity;
if (cwI[72]==0) responseI[37190]=0; //assymetric
if (responseI[37190] != vnodeI[72]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[55];
parity+=vnodeI[72];
parity+=vnodeI[838];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51014]=parity;
if (cwI[99]==0) responseI[51014]=0; //assymetric
if (responseI[51014] != vnodeI[99]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[55];
parity+=vnodeI[72];
parity+=vnodeI[99];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[429382]=parity;
if (cwI[838]==0) responseI[429382]=0; //assymetric
if (responseI[429382] != vnodeI[838]) parityerrors++;
parity=0;
parity+=vnodeI[157];
parity+=vnodeI[186];
parity+=vnodeI[277];
parity+=vnodeI[839];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15175]=parity;
if (cwI[29]==0) responseI[15175]=0; //assymetric
if (responseI[15175] != vnodeI[29]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[186];
parity+=vnodeI[277];
parity+=vnodeI[839];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80711]=parity;
if (cwI[157]==0) responseI[80711]=0; //assymetric
if (responseI[80711] != vnodeI[157]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[157];
parity+=vnodeI[277];
parity+=vnodeI[839];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[95559]=parity;
if (cwI[186]==0) responseI[95559]=0; //assymetric
if (responseI[95559] != vnodeI[186]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[157];
parity+=vnodeI[186];
parity+=vnodeI[839];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142151]=parity;
if (cwI[277]==0) responseI[142151]=0; //assymetric
if (responseI[142151] != vnodeI[277]) parityerrors++;
parity=0;
parity+=vnodeI[29];
parity+=vnodeI[157];
parity+=vnodeI[186];
parity+=vnodeI[277];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[429895]=parity;
if (cwI[839]==0) responseI[429895]=0; //assymetric
if (responseI[429895] != vnodeI[839]) parityerrors++;
parity=0;
parity+=vnodeI[150];
parity+=vnodeI[163];
parity+=vnodeI[415];
parity+=vnodeI[840];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24392]=parity;
if (cwI[47]==0) responseI[24392]=0; //assymetric
if (responseI[24392] != vnodeI[47]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[163];
parity+=vnodeI[415];
parity+=vnodeI[840];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77128]=parity;
if (cwI[150]==0) responseI[77128]=0; //assymetric
if (responseI[77128] != vnodeI[150]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[150];
parity+=vnodeI[415];
parity+=vnodeI[840];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83784]=parity;
if (cwI[163]==0) responseI[83784]=0; //assymetric
if (responseI[83784] != vnodeI[163]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[150];
parity+=vnodeI[163];
parity+=vnodeI[840];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212808]=parity;
if (cwI[415]==0) responseI[212808]=0; //assymetric
if (responseI[212808] != vnodeI[415]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[150];
parity+=vnodeI[163];
parity+=vnodeI[415];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[430408]=parity;
if (cwI[840]==0) responseI[430408]=0; //assymetric
if (responseI[430408] != vnodeI[840]) parityerrors++;
parity=0;
parity+=vnodeI[201];
parity+=vnodeI[214];
parity+=vnodeI[328];
parity+=vnodeI[841];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34633]=parity;
if (cwI[67]==0) responseI[34633]=0; //assymetric
if (responseI[34633] != vnodeI[67]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[214];
parity+=vnodeI[328];
parity+=vnodeI[841];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103241]=parity;
if (cwI[201]==0) responseI[103241]=0; //assymetric
if (responseI[103241] != vnodeI[201]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[201];
parity+=vnodeI[328];
parity+=vnodeI[841];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109897]=parity;
if (cwI[214]==0) responseI[109897]=0; //assymetric
if (responseI[109897] != vnodeI[214]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[201];
parity+=vnodeI[214];
parity+=vnodeI[841];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168265]=parity;
if (cwI[328]==0) responseI[168265]=0; //assymetric
if (responseI[168265] != vnodeI[328]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[201];
parity+=vnodeI[214];
parity+=vnodeI[328];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[430921]=parity;
if (cwI[841]==0) responseI[430921]=0; //assymetric
if (responseI[430921] != vnodeI[841]) parityerrors++;
parity=0;
parity+=vnodeI[242];
parity+=vnodeI[263];
parity+=vnodeI[364];
parity+=vnodeI[842];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39754]=parity;
if (cwI[77]==0) responseI[39754]=0; //assymetric
if (responseI[39754] != vnodeI[77]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[263];
parity+=vnodeI[364];
parity+=vnodeI[842];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124234]=parity;
if (cwI[242]==0) responseI[124234]=0; //assymetric
if (responseI[124234] != vnodeI[242]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[242];
parity+=vnodeI[364];
parity+=vnodeI[842];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[134986]=parity;
if (cwI[263]==0) responseI[134986]=0; //assymetric
if (responseI[134986] != vnodeI[263]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[242];
parity+=vnodeI[263];
parity+=vnodeI[842];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186698]=parity;
if (cwI[364]==0) responseI[186698]=0; //assymetric
if (responseI[186698] != vnodeI[364]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[242];
parity+=vnodeI[263];
parity+=vnodeI[364];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[431434]=parity;
if (cwI[842]==0) responseI[431434]=0; //assymetric
if (responseI[431434] != vnodeI[842]) parityerrors++;
parity=0;
parity+=vnodeI[225];
parity+=vnodeI[261];
parity+=vnodeI[471];
parity+=vnodeI[843];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88907]=parity;
if (cwI[173]==0) responseI[88907]=0; //assymetric
if (responseI[88907] != vnodeI[173]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[261];
parity+=vnodeI[471];
parity+=vnodeI[843];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115531]=parity;
if (cwI[225]==0) responseI[115531]=0; //assymetric
if (responseI[115531] != vnodeI[225]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[225];
parity+=vnodeI[471];
parity+=vnodeI[843];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133963]=parity;
if (cwI[261]==0) responseI[133963]=0; //assymetric
if (responseI[133963] != vnodeI[261]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[225];
parity+=vnodeI[261];
parity+=vnodeI[843];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241483]=parity;
if (cwI[471]==0) responseI[241483]=0; //assymetric
if (responseI[241483] != vnodeI[471]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[225];
parity+=vnodeI[261];
parity+=vnodeI[471];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[431947]=parity;
if (cwI[843]==0) responseI[431947]=0; //assymetric
if (responseI[431947] != vnodeI[843]) parityerrors++;
parity=0;
parity+=vnodeI[118];
parity+=vnodeI[298];
parity+=vnodeI[389];
parity+=vnodeI[844];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[844]=parity;
if (cwI[1]==0) responseI[844]=0; //assymetric
if (responseI[844] != vnodeI[1]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[298];
parity+=vnodeI[389];
parity+=vnodeI[844];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60748]=parity;
if (cwI[118]==0) responseI[60748]=0; //assymetric
if (responseI[60748] != vnodeI[118]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[118];
parity+=vnodeI[389];
parity+=vnodeI[844];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[152908]=parity;
if (cwI[298]==0) responseI[152908]=0; //assymetric
if (responseI[152908] != vnodeI[298]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[118];
parity+=vnodeI[298];
parity+=vnodeI[844];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[199500]=parity;
if (cwI[389]==0) responseI[199500]=0; //assymetric
if (responseI[199500] != vnodeI[389]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[118];
parity+=vnodeI[298];
parity+=vnodeI[389];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[432460]=parity;
if (cwI[844]==0) responseI[432460]=0; //assymetric
if (responseI[432460] != vnodeI[844]) parityerrors++;
parity=0;
parity+=vnodeI[246];
parity+=vnodeI[275];
parity+=vnodeI[296];
parity+=vnodeI[455];
parity+=vnodeI[845];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25421]=parity;
if (cwI[49]==0) responseI[25421]=0; //assymetric
if (responseI[25421] != vnodeI[49]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[275];
parity+=vnodeI[296];
parity+=vnodeI[455];
parity+=vnodeI[845];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126285]=parity;
if (cwI[246]==0) responseI[126285]=0; //assymetric
if (responseI[126285] != vnodeI[246]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[246];
parity+=vnodeI[296];
parity+=vnodeI[455];
parity+=vnodeI[845];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141133]=parity;
if (cwI[275]==0) responseI[141133]=0; //assymetric
if (responseI[141133] != vnodeI[275]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[246];
parity+=vnodeI[275];
parity+=vnodeI[455];
parity+=vnodeI[845];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151885]=parity;
if (cwI[296]==0) responseI[151885]=0; //assymetric
if (responseI[151885] != vnodeI[296]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[246];
parity+=vnodeI[275];
parity+=vnodeI[296];
parity+=vnodeI[845];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233293]=parity;
if (cwI[455]==0) responseI[233293]=0; //assymetric
if (responseI[233293] != vnodeI[455]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[246];
parity+=vnodeI[275];
parity+=vnodeI[296];
parity+=vnodeI[455];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[432973]=parity;
if (cwI[845]==0) responseI[432973]=0; //assymetric
if (responseI[432973] != vnodeI[845]) parityerrors++;
parity=0;
parity+=vnodeI[158];
parity+=vnodeI[182];
parity+=vnodeI[472];
parity+=vnodeI[846];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68942]=parity;
if (cwI[134]==0) responseI[68942]=0; //assymetric
if (responseI[68942] != vnodeI[134]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[182];
parity+=vnodeI[472];
parity+=vnodeI[846];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81230]=parity;
if (cwI[158]==0) responseI[81230]=0; //assymetric
if (responseI[81230] != vnodeI[158]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[158];
parity+=vnodeI[472];
parity+=vnodeI[846];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93518]=parity;
if (cwI[182]==0) responseI[93518]=0; //assymetric
if (responseI[93518] != vnodeI[182]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[158];
parity+=vnodeI[182];
parity+=vnodeI[846];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241998]=parity;
if (cwI[472]==0) responseI[241998]=0; //assymetric
if (responseI[241998] != vnodeI[472]) parityerrors++;
parity=0;
parity+=vnodeI[134];
parity+=vnodeI[158];
parity+=vnodeI[182];
parity+=vnodeI[472];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[433486]=parity;
if (cwI[846]==0) responseI[433486]=0; //assymetric
if (responseI[433486] != vnodeI[846]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[62];
parity+=vnodeI[120];
parity+=vnodeI[847];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13647]=parity;
if (cwI[26]==0) responseI[13647]=0; //assymetric
if (responseI[13647] != vnodeI[26]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[62];
parity+=vnodeI[120];
parity+=vnodeI[847];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23375]=parity;
if (cwI[45]==0) responseI[23375]=0; //assymetric
if (responseI[23375] != vnodeI[45]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[45];
parity+=vnodeI[120];
parity+=vnodeI[847];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[32079]=parity;
if (cwI[62]==0) responseI[32079]=0; //assymetric
if (responseI[32079] != vnodeI[62]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[45];
parity+=vnodeI[62];
parity+=vnodeI[847];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61775]=parity;
if (cwI[120]==0) responseI[61775]=0; //assymetric
if (responseI[61775] != vnodeI[120]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[45];
parity+=vnodeI[62];
parity+=vnodeI[120];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[433999]=parity;
if (cwI[847]==0) responseI[433999]=0; //assymetric
if (responseI[433999] != vnodeI[847]) parityerrors++;
parity=0;
parity+=vnodeI[109];
parity+=vnodeI[343];
parity+=vnodeI[502];
parity+=vnodeI[848];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40784]=parity;
if (cwI[79]==0) responseI[40784]=0; //assymetric
if (responseI[40784] != vnodeI[79]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[343];
parity+=vnodeI[502];
parity+=vnodeI[848];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[56144]=parity;
if (cwI[109]==0) responseI[56144]=0; //assymetric
if (responseI[56144] != vnodeI[109]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[109];
parity+=vnodeI[502];
parity+=vnodeI[848];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175952]=parity;
if (cwI[343]==0) responseI[175952]=0; //assymetric
if (responseI[175952] != vnodeI[343]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[109];
parity+=vnodeI[343];
parity+=vnodeI[848];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257360]=parity;
if (cwI[502]==0) responseI[257360]=0; //assymetric
if (responseI[257360] != vnodeI[502]) parityerrors++;
parity=0;
parity+=vnodeI[79];
parity+=vnodeI[109];
parity+=vnodeI[343];
parity+=vnodeI[502];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[434512]=parity;
if (cwI[848]==0) responseI[434512]=0; //assymetric
if (responseI[434512] != vnodeI[848]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[227];
parity+=vnodeI[409];
parity+=vnodeI[448];
parity+=vnodeI[849];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8017]=parity;
if (cwI[15]==0) responseI[8017]=0; //assymetric
if (responseI[8017] != vnodeI[15]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[227];
parity+=vnodeI[409];
parity+=vnodeI[448];
parity+=vnodeI[849];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[45905]=parity;
if (cwI[89]==0) responseI[45905]=0; //assymetric
if (responseI[45905] != vnodeI[89]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[89];
parity+=vnodeI[409];
parity+=vnodeI[448];
parity+=vnodeI[849];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116561]=parity;
if (cwI[227]==0) responseI[116561]=0; //assymetric
if (responseI[116561] != vnodeI[227]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[89];
parity+=vnodeI[227];
parity+=vnodeI[448];
parity+=vnodeI[849];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209745]=parity;
if (cwI[409]==0) responseI[209745]=0; //assymetric
if (responseI[209745] != vnodeI[409]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[89];
parity+=vnodeI[227];
parity+=vnodeI[409];
parity+=vnodeI[849];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229713]=parity;
if (cwI[448]==0) responseI[229713]=0; //assymetric
if (responseI[229713] != vnodeI[448]) parityerrors++;
parity=0;
parity+=vnodeI[15];
parity+=vnodeI[89];
parity+=vnodeI[227];
parity+=vnodeI[409];
parity+=vnodeI[448];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[435025]=parity;
if (cwI[849]==0) responseI[435025]=0; //assymetric
if (responseI[435025] != vnodeI[849]) parityerrors++;
parity=0;
parity+=vnodeI[87];
parity+=vnodeI[91];
parity+=vnodeI[222];
parity+=vnodeI[418];
parity+=vnodeI[850];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38738]=parity;
if (cwI[75]==0) responseI[38738]=0; //assymetric
if (responseI[38738] != vnodeI[75]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[91];
parity+=vnodeI[222];
parity+=vnodeI[418];
parity+=vnodeI[850];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44882]=parity;
if (cwI[87]==0) responseI[44882]=0; //assymetric
if (responseI[44882] != vnodeI[87]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[87];
parity+=vnodeI[222];
parity+=vnodeI[418];
parity+=vnodeI[850];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46930]=parity;
if (cwI[91]==0) responseI[46930]=0; //assymetric
if (responseI[46930] != vnodeI[91]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[87];
parity+=vnodeI[91];
parity+=vnodeI[418];
parity+=vnodeI[850];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114002]=parity;
if (cwI[222]==0) responseI[114002]=0; //assymetric
if (responseI[114002] != vnodeI[222]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[87];
parity+=vnodeI[91];
parity+=vnodeI[222];
parity+=vnodeI[850];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214354]=parity;
if (cwI[418]==0) responseI[214354]=0; //assymetric
if (responseI[214354] != vnodeI[418]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[87];
parity+=vnodeI[91];
parity+=vnodeI[222];
parity+=vnodeI[418];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[435538]=parity;
if (cwI[850]==0) responseI[435538]=0; //assymetric
if (responseI[435538] != vnodeI[850]) parityerrors++;
parity=0;
parity+=vnodeI[273];
parity+=vnodeI[350];
parity+=vnodeI[357];
parity+=vnodeI[851];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126803]=parity;
if (cwI[247]==0) responseI[126803]=0; //assymetric
if (responseI[126803] != vnodeI[247]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[350];
parity+=vnodeI[357];
parity+=vnodeI[851];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140115]=parity;
if (cwI[273]==0) responseI[140115]=0; //assymetric
if (responseI[140115] != vnodeI[273]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[273];
parity+=vnodeI[357];
parity+=vnodeI[851];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[179539]=parity;
if (cwI[350]==0) responseI[179539]=0; //assymetric
if (responseI[179539] != vnodeI[350]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[273];
parity+=vnodeI[350];
parity+=vnodeI[851];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183123]=parity;
if (cwI[357]==0) responseI[183123]=0; //assymetric
if (responseI[183123] != vnodeI[357]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[273];
parity+=vnodeI[350];
parity+=vnodeI[357];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[436051]=parity;
if (cwI[851]==0) responseI[436051]=0; //assymetric
if (responseI[436051] != vnodeI[851]) parityerrors++;
parity=0;
parity+=vnodeI[164];
parity+=vnodeI[206];
parity+=vnodeI[474];
parity+=vnodeI[852];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67412]=parity;
if (cwI[131]==0) responseI[67412]=0; //assymetric
if (responseI[67412] != vnodeI[131]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[206];
parity+=vnodeI[474];
parity+=vnodeI[852];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84308]=parity;
if (cwI[164]==0) responseI[84308]=0; //assymetric
if (responseI[84308] != vnodeI[164]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[164];
parity+=vnodeI[474];
parity+=vnodeI[852];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105812]=parity;
if (cwI[206]==0) responseI[105812]=0; //assymetric
if (responseI[105812] != vnodeI[206]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[164];
parity+=vnodeI[206];
parity+=vnodeI[852];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243028]=parity;
if (cwI[474]==0) responseI[243028]=0; //assymetric
if (responseI[243028] != vnodeI[474]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[164];
parity+=vnodeI[206];
parity+=vnodeI[474];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[436564]=parity;
if (cwI[852]==0) responseI[436564]=0; //assymetric
if (responseI[436564] != vnodeI[852]) parityerrors++;
parity=0;
parity+=vnodeI[187];
parity+=vnodeI[248];
parity+=vnodeI[467];
parity+=vnodeI[853];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25941]=parity;
if (cwI[50]==0) responseI[25941]=0; //assymetric
if (responseI[25941] != vnodeI[50]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[248];
parity+=vnodeI[467];
parity+=vnodeI[853];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96085]=parity;
if (cwI[187]==0) responseI[96085]=0; //assymetric
if (responseI[96085] != vnodeI[187]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[187];
parity+=vnodeI[467];
parity+=vnodeI[853];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127317]=parity;
if (cwI[248]==0) responseI[127317]=0; //assymetric
if (responseI[127317] != vnodeI[248]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[187];
parity+=vnodeI[248];
parity+=vnodeI[853];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239445]=parity;
if (cwI[467]==0) responseI[239445]=0; //assymetric
if (responseI[239445] != vnodeI[467]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[187];
parity+=vnodeI[248];
parity+=vnodeI[467];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[437077]=parity;
if (cwI[853]==0) responseI[437077]=0; //assymetric
if (responseI[437077] != vnodeI[853]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[128];
parity+=vnodeI[278];
parity+=vnodeI[854];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19798]=parity;
if (cwI[38]==0) responseI[19798]=0; //assymetric
if (responseI[19798] != vnodeI[38]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[128];
parity+=vnodeI[278];
parity+=vnodeI[854];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46422]=parity;
if (cwI[90]==0) responseI[46422]=0; //assymetric
if (responseI[46422] != vnodeI[90]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[90];
parity+=vnodeI[278];
parity+=vnodeI[854];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65878]=parity;
if (cwI[128]==0) responseI[65878]=0; //assymetric
if (responseI[65878] != vnodeI[128]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[90];
parity+=vnodeI[128];
parity+=vnodeI[854];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142678]=parity;
if (cwI[278]==0) responseI[142678]=0; //assymetric
if (responseI[142678] != vnodeI[278]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[90];
parity+=vnodeI[128];
parity+=vnodeI[278];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[437590]=parity;
if (cwI[854]==0) responseI[437590]=0; //assymetric
if (responseI[437590] != vnodeI[854]) parityerrors++;
parity=0;
parity+=vnodeI[91];
parity+=vnodeI[197];
parity+=vnodeI[278];
parity+=vnodeI[855];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25943]=parity;
if (cwI[50]==0) responseI[25943]=0; //assymetric
if (responseI[25943] != vnodeI[50]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[197];
parity+=vnodeI[278];
parity+=vnodeI[855];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46935]=parity;
if (cwI[91]==0) responseI[46935]=0; //assymetric
if (responseI[46935] != vnodeI[91]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[91];
parity+=vnodeI[278];
parity+=vnodeI[855];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[101207]=parity;
if (cwI[197]==0) responseI[101207]=0; //assymetric
if (responseI[101207] != vnodeI[197]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[91];
parity+=vnodeI[197];
parity+=vnodeI[855];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142679]=parity;
if (cwI[278]==0) responseI[142679]=0; //assymetric
if (responseI[142679] != vnodeI[278]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[91];
parity+=vnodeI[197];
parity+=vnodeI[278];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[438103]=parity;
if (cwI[855]==0) responseI[438103]=0; //assymetric
if (responseI[438103] != vnodeI[855]) parityerrors++;
parity=0;
parity+=vnodeI[336];
parity+=vnodeI[380];
parity+=vnodeI[447];
parity+=vnodeI[856];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140632]=parity;
if (cwI[274]==0) responseI[140632]=0; //assymetric
if (responseI[140632] != vnodeI[274]) parityerrors++;
parity=0;
parity+=vnodeI[274];
parity+=vnodeI[380];
parity+=vnodeI[447];
parity+=vnodeI[856];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[172376]=parity;
if (cwI[336]==0) responseI[172376]=0; //assymetric
if (responseI[172376] != vnodeI[336]) parityerrors++;
parity=0;
parity+=vnodeI[274];
parity+=vnodeI[336];
parity+=vnodeI[447];
parity+=vnodeI[856];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194904]=parity;
if (cwI[380]==0) responseI[194904]=0; //assymetric
if (responseI[194904] != vnodeI[380]) parityerrors++;
parity=0;
parity+=vnodeI[274];
parity+=vnodeI[336];
parity+=vnodeI[380];
parity+=vnodeI[856];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229208]=parity;
if (cwI[447]==0) responseI[229208]=0; //assymetric
if (responseI[229208] != vnodeI[447]) parityerrors++;
parity=0;
parity+=vnodeI[274];
parity+=vnodeI[336];
parity+=vnodeI[380];
parity+=vnodeI[447];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[438616]=parity;
if (cwI[856]==0) responseI[438616]=0; //assymetric
if (responseI[438616] != vnodeI[856]) parityerrors++;
parity=0;
parity+=vnodeI[273];
parity+=vnodeI[277];
parity+=vnodeI[398];
parity+=vnodeI[857];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67929]=parity;
if (cwI[132]==0) responseI[67929]=0; //assymetric
if (responseI[67929] != vnodeI[132]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[277];
parity+=vnodeI[398];
parity+=vnodeI[857];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[140121]=parity;
if (cwI[273]==0) responseI[140121]=0; //assymetric
if (responseI[140121] != vnodeI[273]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[273];
parity+=vnodeI[398];
parity+=vnodeI[857];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[142169]=parity;
if (cwI[277]==0) responseI[142169]=0; //assymetric
if (responseI[142169] != vnodeI[277]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[273];
parity+=vnodeI[277];
parity+=vnodeI[857];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204121]=parity;
if (cwI[398]==0) responseI[204121]=0; //assymetric
if (responseI[204121] != vnodeI[398]) parityerrors++;
parity=0;
parity+=vnodeI[132];
parity+=vnodeI[273];
parity+=vnodeI[277];
parity+=vnodeI[398];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[439129]=parity;
if (cwI[857]==0) responseI[439129]=0; //assymetric
if (responseI[439129] != vnodeI[857]) parityerrors++;
parity=0;
parity+=vnodeI[170];
parity+=vnodeI[328];
parity+=vnodeI[453];
parity+=vnodeI[858];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61274]=parity;
if (cwI[119]==0) responseI[61274]=0; //assymetric
if (responseI[61274] != vnodeI[119]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[328];
parity+=vnodeI[453];
parity+=vnodeI[858];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87386]=parity;
if (cwI[170]==0) responseI[87386]=0; //assymetric
if (responseI[87386] != vnodeI[170]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[170];
parity+=vnodeI[453];
parity+=vnodeI[858];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168282]=parity;
if (cwI[328]==0) responseI[168282]=0; //assymetric
if (responseI[168282] != vnodeI[328]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[170];
parity+=vnodeI[328];
parity+=vnodeI[858];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[232282]=parity;
if (cwI[453]==0) responseI[232282]=0; //assymetric
if (responseI[232282] != vnodeI[453]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[170];
parity+=vnodeI[328];
parity+=vnodeI[453];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[439642]=parity;
if (cwI[858]==0) responseI[439642]=0; //assymetric
if (responseI[439642] != vnodeI[858]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[369];
parity+=vnodeI[481];
parity+=vnodeI[859];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3419]=parity;
if (cwI[6]==0) responseI[3419]=0; //assymetric
if (responseI[3419] != vnodeI[6]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[369];
parity+=vnodeI[481];
parity+=vnodeI[859];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62811]=parity;
if (cwI[122]==0) responseI[62811]=0; //assymetric
if (responseI[62811] != vnodeI[122]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[122];
parity+=vnodeI[481];
parity+=vnodeI[859];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[189275]=parity;
if (cwI[369]==0) responseI[189275]=0; //assymetric
if (responseI[189275] != vnodeI[369]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[122];
parity+=vnodeI[369];
parity+=vnodeI[859];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246619]=parity;
if (cwI[481]==0) responseI[246619]=0; //assymetric
if (responseI[246619] != vnodeI[481]) parityerrors++;
parity=0;
parity+=vnodeI[6];
parity+=vnodeI[122];
parity+=vnodeI[369];
parity+=vnodeI[481];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[440155]=parity;
if (cwI[859]==0) responseI[440155]=0; //assymetric
if (responseI[440155] != vnodeI[859]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[231];
parity+=vnodeI[384];
parity+=vnodeI[860];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[860]=parity;
if (cwI[1]==0) responseI[860]=0; //assymetric
if (responseI[860] != vnodeI[1]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[231];
parity+=vnodeI[384];
parity+=vnodeI[860];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19292]=parity;
if (cwI[37]==0) responseI[19292]=0; //assymetric
if (responseI[19292] != vnodeI[37]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[37];
parity+=vnodeI[384];
parity+=vnodeI[860];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[118620]=parity;
if (cwI[231]==0) responseI[118620]=0; //assymetric
if (responseI[118620] != vnodeI[231]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[37];
parity+=vnodeI[231];
parity+=vnodeI[860];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196956]=parity;
if (cwI[384]==0) responseI[196956]=0; //assymetric
if (responseI[196956] != vnodeI[384]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[37];
parity+=vnodeI[231];
parity+=vnodeI[384];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[440668]=parity;
if (cwI[860]==0) responseI[440668]=0; //assymetric
if (responseI[440668] != vnodeI[860]) parityerrors++;
parity=0;
parity+=vnodeI[331];
parity+=vnodeI[379];
parity+=vnodeI[424];
parity+=vnodeI[861];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26461]=parity;
if (cwI[51]==0) responseI[26461]=0; //assymetric
if (responseI[26461] != vnodeI[51]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[379];
parity+=vnodeI[424];
parity+=vnodeI[861];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169821]=parity;
if (cwI[331]==0) responseI[169821]=0; //assymetric
if (responseI[169821] != vnodeI[331]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[331];
parity+=vnodeI[424];
parity+=vnodeI[861];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194397]=parity;
if (cwI[379]==0) responseI[194397]=0; //assymetric
if (responseI[194397] != vnodeI[379]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[331];
parity+=vnodeI[379];
parity+=vnodeI[861];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[217437]=parity;
if (cwI[424]==0) responseI[217437]=0; //assymetric
if (responseI[217437] != vnodeI[424]) parityerrors++;
parity=0;
parity+=vnodeI[51];
parity+=vnodeI[331];
parity+=vnodeI[379];
parity+=vnodeI[424];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[441181]=parity;
if (cwI[861]==0) responseI[441181]=0; //assymetric
if (responseI[441181] != vnodeI[861]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[210];
parity+=vnodeI[422];
parity+=vnodeI[862];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13150]=parity;
if (cwI[25]==0) responseI[13150]=0; //assymetric
if (responseI[13150] != vnodeI[25]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[210];
parity+=vnodeI[422];
parity+=vnodeI[862];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82782]=parity;
if (cwI[161]==0) responseI[82782]=0; //assymetric
if (responseI[82782] != vnodeI[161]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[161];
parity+=vnodeI[422];
parity+=vnodeI[862];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107870]=parity;
if (cwI[210]==0) responseI[107870]=0; //assymetric
if (responseI[107870] != vnodeI[210]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[161];
parity+=vnodeI[210];
parity+=vnodeI[862];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[216414]=parity;
if (cwI[422]==0) responseI[216414]=0; //assymetric
if (responseI[216414] != vnodeI[422]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[161];
parity+=vnodeI[210];
parity+=vnodeI[422];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[441694]=parity;
if (cwI[862]==0) responseI[441694]=0; //assymetric
if (responseI[441694] != vnodeI[862]) parityerrors++;
parity=0;
parity+=vnodeI[242];
parity+=vnodeI[279];
parity+=vnodeI[350];
parity+=vnodeI[863];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106847]=parity;
if (cwI[208]==0) responseI[106847]=0; //assymetric
if (responseI[106847] != vnodeI[208]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[279];
parity+=vnodeI[350];
parity+=vnodeI[863];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124255]=parity;
if (cwI[242]==0) responseI[124255]=0; //assymetric
if (responseI[124255] != vnodeI[242]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[242];
parity+=vnodeI[350];
parity+=vnodeI[863];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143199]=parity;
if (cwI[279]==0) responseI[143199]=0; //assymetric
if (responseI[143199] != vnodeI[279]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[242];
parity+=vnodeI[279];
parity+=vnodeI[863];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[179551]=parity;
if (cwI[350]==0) responseI[179551]=0; //assymetric
if (responseI[179551] != vnodeI[350]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[242];
parity+=vnodeI[279];
parity+=vnodeI[350];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[442207]=parity;
if (cwI[863]==0) responseI[442207]=0; //assymetric
if (responseI[442207] != vnodeI[863]) parityerrors++;
parity=0;
parity+=vnodeI[149];
parity+=vnodeI[206];
parity+=vnodeI[323];
parity+=vnodeI[864];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38752]=parity;
if (cwI[75]==0) responseI[38752]=0; //assymetric
if (responseI[38752] != vnodeI[75]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[206];
parity+=vnodeI[323];
parity+=vnodeI[864];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[76640]=parity;
if (cwI[149]==0) responseI[76640]=0; //assymetric
if (responseI[76640] != vnodeI[149]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[149];
parity+=vnodeI[323];
parity+=vnodeI[864];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105824]=parity;
if (cwI[206]==0) responseI[105824]=0; //assymetric
if (responseI[105824] != vnodeI[206]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[149];
parity+=vnodeI[206];
parity+=vnodeI[864];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165728]=parity;
if (cwI[323]==0) responseI[165728]=0; //assymetric
if (responseI[165728] != vnodeI[323]) parityerrors++;
parity=0;
parity+=vnodeI[75];
parity+=vnodeI[149];
parity+=vnodeI[206];
parity+=vnodeI[323];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[442720]=parity;
if (cwI[864]==0) responseI[442720]=0; //assymetric
if (responseI[442720] != vnodeI[864]) parityerrors++;
parity=0;
parity+=vnodeI[208];
parity+=vnodeI[259];
parity+=vnodeI[283];
parity+=vnodeI[865];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87905]=parity;
if (cwI[171]==0) responseI[87905]=0; //assymetric
if (responseI[87905] != vnodeI[171]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[259];
parity+=vnodeI[283];
parity+=vnodeI[865];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[106849]=parity;
if (cwI[208]==0) responseI[106849]=0; //assymetric
if (responseI[106849] != vnodeI[208]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[208];
parity+=vnodeI[283];
parity+=vnodeI[865];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132961]=parity;
if (cwI[259]==0) responseI[132961]=0; //assymetric
if (responseI[132961] != vnodeI[259]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[208];
parity+=vnodeI[259];
parity+=vnodeI[865];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145249]=parity;
if (cwI[283]==0) responseI[145249]=0; //assymetric
if (responseI[145249] != vnodeI[283]) parityerrors++;
parity=0;
parity+=vnodeI[171];
parity+=vnodeI[208];
parity+=vnodeI[259];
parity+=vnodeI[283];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[443233]=parity;
if (cwI[865]==0) responseI[443233]=0; //assymetric
if (responseI[443233] != vnodeI[865]) parityerrors++;
parity=0;
parity+=vnodeI[407];
parity+=vnodeI[429];
parity+=vnodeI[439];
parity+=vnodeI[866];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166754]=parity;
if (cwI[325]==0) responseI[166754]=0; //assymetric
if (responseI[166754] != vnodeI[325]) parityerrors++;
parity=0;
parity+=vnodeI[325];
parity+=vnodeI[429];
parity+=vnodeI[439];
parity+=vnodeI[866];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208738]=parity;
if (cwI[407]==0) responseI[208738]=0; //assymetric
if (responseI[208738] != vnodeI[407]) parityerrors++;
parity=0;
parity+=vnodeI[325];
parity+=vnodeI[407];
parity+=vnodeI[439];
parity+=vnodeI[866];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220002]=parity;
if (cwI[429]==0) responseI[220002]=0; //assymetric
if (responseI[220002] != vnodeI[429]) parityerrors++;
parity=0;
parity+=vnodeI[325];
parity+=vnodeI[407];
parity+=vnodeI[429];
parity+=vnodeI[866];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225122]=parity;
if (cwI[439]==0) responseI[225122]=0; //assymetric
if (responseI[225122] != vnodeI[439]) parityerrors++;
parity=0;
parity+=vnodeI[325];
parity+=vnodeI[407];
parity+=vnodeI[429];
parity+=vnodeI[439];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[443746]=parity;
if (cwI[866]==0) responseI[443746]=0; //assymetric
if (responseI[443746] != vnodeI[866]) parityerrors++;
parity=0;
parity+=vnodeI[247];
parity+=vnodeI[293];
parity+=vnodeI[470];
parity+=vnodeI[867];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92515]=parity;
if (cwI[180]==0) responseI[92515]=0; //assymetric
if (responseI[92515] != vnodeI[180]) parityerrors++;
parity=0;
parity+=vnodeI[180];
parity+=vnodeI[293];
parity+=vnodeI[470];
parity+=vnodeI[867];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[126819]=parity;
if (cwI[247]==0) responseI[126819]=0; //assymetric
if (responseI[126819] != vnodeI[247]) parityerrors++;
parity=0;
parity+=vnodeI[180];
parity+=vnodeI[247];
parity+=vnodeI[470];
parity+=vnodeI[867];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150371]=parity;
if (cwI[293]==0) responseI[150371]=0; //assymetric
if (responseI[150371] != vnodeI[293]) parityerrors++;
parity=0;
parity+=vnodeI[180];
parity+=vnodeI[247];
parity+=vnodeI[293];
parity+=vnodeI[867];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240995]=parity;
if (cwI[470]==0) responseI[240995]=0; //assymetric
if (responseI[240995] != vnodeI[470]) parityerrors++;
parity=0;
parity+=vnodeI[180];
parity+=vnodeI[247];
parity+=vnodeI[293];
parity+=vnodeI[470];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[444259]=parity;
if (cwI[867]==0) responseI[444259]=0; //assymetric
if (responseI[444259] != vnodeI[867]) parityerrors++;
parity=0;
parity+=vnodeI[282];
parity+=vnodeI[319];
parity+=vnodeI[354];
parity+=vnodeI[868];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[98148]=parity;
if (cwI[191]==0) responseI[98148]=0; //assymetric
if (responseI[98148] != vnodeI[191]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[319];
parity+=vnodeI[354];
parity+=vnodeI[868];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[144740]=parity;
if (cwI[282]==0) responseI[144740]=0; //assymetric
if (responseI[144740] != vnodeI[282]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[282];
parity+=vnodeI[354];
parity+=vnodeI[868];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163684]=parity;
if (cwI[319]==0) responseI[163684]=0; //assymetric
if (responseI[163684] != vnodeI[319]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[282];
parity+=vnodeI[319];
parity+=vnodeI[868];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181604]=parity;
if (cwI[354]==0) responseI[181604]=0; //assymetric
if (responseI[181604] != vnodeI[354]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[282];
parity+=vnodeI[319];
parity+=vnodeI[354];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[444772]=parity;
if (cwI[868]==0) responseI[444772]=0; //assymetric
if (responseI[444772] != vnodeI[868]) parityerrors++;
parity=0;
parity+=vnodeI[96];
parity+=vnodeI[126];
parity+=vnodeI[428];
parity+=vnodeI[505];
parity+=vnodeI[869];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17765]=parity;
if (cwI[34]==0) responseI[17765]=0; //assymetric
if (responseI[17765] != vnodeI[34]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[126];
parity+=vnodeI[428];
parity+=vnodeI[505];
parity+=vnodeI[869];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[49509]=parity;
if (cwI[96]==0) responseI[49509]=0; //assymetric
if (responseI[49509] != vnodeI[96]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[96];
parity+=vnodeI[428];
parity+=vnodeI[505];
parity+=vnodeI[869];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[64869]=parity;
if (cwI[126]==0) responseI[64869]=0; //assymetric
if (responseI[64869] != vnodeI[126]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[96];
parity+=vnodeI[126];
parity+=vnodeI[505];
parity+=vnodeI[869];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[219493]=parity;
if (cwI[428]==0) responseI[219493]=0; //assymetric
if (responseI[219493] != vnodeI[428]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[96];
parity+=vnodeI[126];
parity+=vnodeI[428];
parity+=vnodeI[869];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[258917]=parity;
if (cwI[505]==0) responseI[258917]=0; //assymetric
if (responseI[258917] != vnodeI[505]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[96];
parity+=vnodeI[126];
parity+=vnodeI[428];
parity+=vnodeI[505];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[445285]=parity;
if (cwI[869]==0) responseI[445285]=0; //assymetric
if (responseI[445285] != vnodeI[869]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[389];
parity+=vnodeI[397];
parity+=vnodeI[870];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82790]=parity;
if (cwI[161]==0) responseI[82790]=0; //assymetric
if (responseI[82790] != vnodeI[161]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[389];
parity+=vnodeI[397];
parity+=vnodeI[870];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103782]=parity;
if (cwI[202]==0) responseI[103782]=0; //assymetric
if (responseI[103782] != vnodeI[202]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[202];
parity+=vnodeI[397];
parity+=vnodeI[870];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[199526]=parity;
if (cwI[389]==0) responseI[199526]=0; //assymetric
if (responseI[199526] != vnodeI[389]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[202];
parity+=vnodeI[389];
parity+=vnodeI[870];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203622]=parity;
if (cwI[397]==0) responseI[203622]=0; //assymetric
if (responseI[203622] != vnodeI[397]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[202];
parity+=vnodeI[389];
parity+=vnodeI[397];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[445798]=parity;
if (cwI[870]==0) responseI[445798]=0; //assymetric
if (responseI[445798] != vnodeI[870]) parityerrors++;
parity=0;
parity+=vnodeI[310];
parity+=vnodeI[395];
parity+=vnodeI[397];
parity+=vnodeI[459];
parity+=vnodeI[871];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44391]=parity;
if (cwI[86]==0) responseI[44391]=0; //assymetric
if (responseI[44391] != vnodeI[86]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[395];
parity+=vnodeI[397];
parity+=vnodeI[459];
parity+=vnodeI[871];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159079]=parity;
if (cwI[310]==0) responseI[159079]=0; //assymetric
if (responseI[159079] != vnodeI[310]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[310];
parity+=vnodeI[397];
parity+=vnodeI[459];
parity+=vnodeI[871];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202599]=parity;
if (cwI[395]==0) responseI[202599]=0; //assymetric
if (responseI[202599] != vnodeI[395]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[310];
parity+=vnodeI[395];
parity+=vnodeI[459];
parity+=vnodeI[871];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203623]=parity;
if (cwI[397]==0) responseI[203623]=0; //assymetric
if (responseI[203623] != vnodeI[397]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[310];
parity+=vnodeI[395];
parity+=vnodeI[397];
parity+=vnodeI[871];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[235367]=parity;
if (cwI[459]==0) responseI[235367]=0; //assymetric
if (responseI[235367] != vnodeI[459]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[310];
parity+=vnodeI[395];
parity+=vnodeI[397];
parity+=vnodeI[459];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[446311]=parity;
if (cwI[871]==0) responseI[446311]=0; //assymetric
if (responseI[446311] != vnodeI[871]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[352];
parity+=vnodeI[507];
parity+=vnodeI[872];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[360]=parity;
if (cwI[0]==0) responseI[360]=0; //assymetric
if (responseI[360] != vnodeI[0]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[352];
parity+=vnodeI[507];
parity+=vnodeI[872];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18792]=parity;
if (cwI[36]==0) responseI[18792]=0; //assymetric
if (responseI[18792] != vnodeI[36]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[36];
parity+=vnodeI[507];
parity+=vnodeI[872];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180584]=parity;
if (cwI[352]==0) responseI[180584]=0; //assymetric
if (responseI[180584] != vnodeI[352]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[36];
parity+=vnodeI[352];
parity+=vnodeI[872];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259944]=parity;
if (cwI[507]==0) responseI[259944]=0; //assymetric
if (responseI[259944] != vnodeI[507]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[36];
parity+=vnodeI[352];
parity+=vnodeI[507];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[446824]=parity;
if (cwI[872]==0) responseI[446824]=0; //assymetric
if (responseI[446824] != vnodeI[872]) parityerrors++;
parity=0;
parity+=vnodeI[123];
parity+=vnodeI[414];
parity+=vnodeI[461];
parity+=vnodeI[873];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[4969]=parity;
if (cwI[9]==0) responseI[4969]=0; //assymetric
if (responseI[4969] != vnodeI[9]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[414];
parity+=vnodeI[461];
parity+=vnodeI[873];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63337]=parity;
if (cwI[123]==0) responseI[63337]=0; //assymetric
if (responseI[63337] != vnodeI[123]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[123];
parity+=vnodeI[461];
parity+=vnodeI[873];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212329]=parity;
if (cwI[414]==0) responseI[212329]=0; //assymetric
if (responseI[212329] != vnodeI[414]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[123];
parity+=vnodeI[414];
parity+=vnodeI[873];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[236393]=parity;
if (cwI[461]==0) responseI[236393]=0; //assymetric
if (responseI[236393] != vnodeI[461]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[123];
parity+=vnodeI[414];
parity+=vnodeI[461];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[447337]=parity;
if (cwI[873]==0) responseI[447337]=0; //assymetric
if (responseI[447337] != vnodeI[873]) parityerrors++;
parity=0;
parity+=vnodeI[205];
parity+=vnodeI[215];
parity+=vnodeI[241];
parity+=vnodeI[874];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102250]=parity;
if (cwI[199]==0) responseI[102250]=0; //assymetric
if (responseI[102250] != vnodeI[199]) parityerrors++;
parity=0;
parity+=vnodeI[199];
parity+=vnodeI[215];
parity+=vnodeI[241];
parity+=vnodeI[874];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105322]=parity;
if (cwI[205]==0) responseI[105322]=0; //assymetric
if (responseI[105322] != vnodeI[205]) parityerrors++;
parity=0;
parity+=vnodeI[199];
parity+=vnodeI[205];
parity+=vnodeI[241];
parity+=vnodeI[874];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110442]=parity;
if (cwI[215]==0) responseI[110442]=0; //assymetric
if (responseI[110442] != vnodeI[215]) parityerrors++;
parity=0;
parity+=vnodeI[199];
parity+=vnodeI[205];
parity+=vnodeI[215];
parity+=vnodeI[874];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123754]=parity;
if (cwI[241]==0) responseI[123754]=0; //assymetric
if (responseI[123754] != vnodeI[241]) parityerrors++;
parity=0;
parity+=vnodeI[199];
parity+=vnodeI[205];
parity+=vnodeI[215];
parity+=vnodeI[241];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[447850]=parity;
if (cwI[874]==0) responseI[447850]=0; //assymetric
if (responseI[447850] != vnodeI[874]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[153];
parity+=vnodeI[875];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[35691]=parity;
if (cwI[69]==0) responseI[35691]=0; //assymetric
if (responseI[35691] != vnodeI[69]) parityerrors++;
parity=0;
parity+=vnodeI[69];
parity+=vnodeI[153];
parity+=vnodeI[875];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36203]=parity;
if (cwI[70]==0) responseI[36203]=0; //assymetric
if (responseI[36203] != vnodeI[70]) parityerrors++;
parity=0;
parity+=vnodeI[69];
parity+=vnodeI[70];
parity+=vnodeI[875];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78699]=parity;
if (cwI[153]==0) responseI[78699]=0; //assymetric
if (responseI[78699] != vnodeI[153]) parityerrors++;
parity=0;
parity+=vnodeI[69];
parity+=vnodeI[70];
parity+=vnodeI[153];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[448363]=parity;
if (cwI[875]==0) responseI[448363]=0; //assymetric
if (responseI[448363] != vnodeI[875]) parityerrors++;
parity=0;
parity+=vnodeI[57];
parity+=vnodeI[146];
parity+=vnodeI[442];
parity+=vnodeI[876];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28012]=parity;
if (cwI[54]==0) responseI[28012]=0; //assymetric
if (responseI[28012] != vnodeI[54]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[146];
parity+=vnodeI[442];
parity+=vnodeI[876];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29548]=parity;
if (cwI[57]==0) responseI[29548]=0; //assymetric
if (responseI[29548] != vnodeI[57]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[57];
parity+=vnodeI[442];
parity+=vnodeI[876];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75116]=parity;
if (cwI[146]==0) responseI[75116]=0; //assymetric
if (responseI[75116] != vnodeI[146]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[57];
parity+=vnodeI[146];
parity+=vnodeI[876];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226668]=parity;
if (cwI[442]==0) responseI[226668]=0; //assymetric
if (responseI[226668] != vnodeI[442]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[57];
parity+=vnodeI[146];
parity+=vnodeI[442];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[448876]=parity;
if (cwI[876]==0) responseI[448876]=0; //assymetric
if (responseI[448876] != vnodeI[876]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[393];
parity+=vnodeI[470];
parity+=vnodeI[877];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88429]=parity;
if (cwI[172]==0) responseI[88429]=0; //assymetric
if (responseI[88429] != vnodeI[172]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[393];
parity+=vnodeI[470];
parity+=vnodeI[877];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97645]=parity;
if (cwI[190]==0) responseI[97645]=0; //assymetric
if (responseI[97645] != vnodeI[190]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[190];
parity+=vnodeI[470];
parity+=vnodeI[877];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201581]=parity;
if (cwI[393]==0) responseI[201581]=0; //assymetric
if (responseI[201581] != vnodeI[393]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[190];
parity+=vnodeI[393];
parity+=vnodeI[877];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241005]=parity;
if (cwI[470]==0) responseI[241005]=0; //assymetric
if (responseI[241005] != vnodeI[470]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[190];
parity+=vnodeI[393];
parity+=vnodeI[470];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[449389]=parity;
if (cwI[877]==0) responseI[449389]=0; //assymetric
if (responseI[449389] != vnodeI[877]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[167];
parity+=vnodeI[259];
parity+=vnodeI[878];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6510]=parity;
if (cwI[12]==0) responseI[6510]=0; //assymetric
if (responseI[6510] != vnodeI[12]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[167];
parity+=vnodeI[259];
parity+=vnodeI[878];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[11118]=parity;
if (cwI[21]==0) responseI[11118]=0; //assymetric
if (responseI[11118] != vnodeI[21]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[21];
parity+=vnodeI[259];
parity+=vnodeI[878];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85870]=parity;
if (cwI[167]==0) responseI[85870]=0; //assymetric
if (responseI[85870] != vnodeI[167]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[21];
parity+=vnodeI[167];
parity+=vnodeI[878];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132974]=parity;
if (cwI[259]==0) responseI[132974]=0; //assymetric
if (responseI[132974] != vnodeI[259]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[21];
parity+=vnodeI[167];
parity+=vnodeI[259];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[449902]=parity;
if (cwI[878]==0) responseI[449902]=0; //assymetric
if (responseI[449902] != vnodeI[878]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[155];
parity+=vnodeI[308];
parity+=vnodeI[879];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33647]=parity;
if (cwI[65]==0) responseI[33647]=0; //assymetric
if (responseI[33647] != vnodeI[65]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[155];
parity+=vnodeI[308];
parity+=vnodeI[879];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36207]=parity;
if (cwI[70]==0) responseI[36207]=0; //assymetric
if (responseI[36207] != vnodeI[70]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[70];
parity+=vnodeI[308];
parity+=vnodeI[879];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79727]=parity;
if (cwI[155]==0) responseI[79727]=0; //assymetric
if (responseI[79727] != vnodeI[155]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[70];
parity+=vnodeI[155];
parity+=vnodeI[879];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158063]=parity;
if (cwI[308]==0) responseI[158063]=0; //assymetric
if (responseI[158063] != vnodeI[308]) parityerrors++;
parity=0;
parity+=vnodeI[65];
parity+=vnodeI[70];
parity+=vnodeI[155];
parity+=vnodeI[308];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[450415]=parity;
if (cwI[879]==0) responseI[450415]=0; //assymetric
if (responseI[450415] != vnodeI[879]) parityerrors++;
parity=0;
parity+=vnodeI[99];
parity+=vnodeI[172];
parity+=vnodeI[265];
parity+=vnodeI[880];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[45936]=parity;
if (cwI[89]==0) responseI[45936]=0; //assymetric
if (responseI[45936] != vnodeI[89]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[172];
parity+=vnodeI[265];
parity+=vnodeI[880];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51056]=parity;
if (cwI[99]==0) responseI[51056]=0; //assymetric
if (responseI[51056] != vnodeI[99]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[99];
parity+=vnodeI[265];
parity+=vnodeI[880];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88432]=parity;
if (cwI[172]==0) responseI[88432]=0; //assymetric
if (responseI[88432] != vnodeI[172]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[99];
parity+=vnodeI[172];
parity+=vnodeI[880];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136048]=parity;
if (cwI[265]==0) responseI[136048]=0; //assymetric
if (responseI[136048] != vnodeI[265]) parityerrors++;
parity=0;
parity+=vnodeI[89];
parity+=vnodeI[99];
parity+=vnodeI[172];
parity+=vnodeI[265];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[450928]=parity;
if (cwI[880]==0) responseI[450928]=0; //assymetric
if (responseI[450928] != vnodeI[880]) parityerrors++;
parity=0;
parity+=vnodeI[239];
parity+=vnodeI[310];
parity+=vnodeI[417];
parity+=vnodeI[469];
parity+=vnodeI[881];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111473]=parity;
if (cwI[217]==0) responseI[111473]=0; //assymetric
if (responseI[111473] != vnodeI[217]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[310];
parity+=vnodeI[417];
parity+=vnodeI[469];
parity+=vnodeI[881];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122737]=parity;
if (cwI[239]==0) responseI[122737]=0; //assymetric
if (responseI[122737] != vnodeI[239]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[239];
parity+=vnodeI[417];
parity+=vnodeI[469];
parity+=vnodeI[881];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[159089]=parity;
if (cwI[310]==0) responseI[159089]=0; //assymetric
if (responseI[159089] != vnodeI[310]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[239];
parity+=vnodeI[310];
parity+=vnodeI[469];
parity+=vnodeI[881];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213873]=parity;
if (cwI[417]==0) responseI[213873]=0; //assymetric
if (responseI[213873] != vnodeI[417]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[239];
parity+=vnodeI[310];
parity+=vnodeI[417];
parity+=vnodeI[881];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240497]=parity;
if (cwI[469]==0) responseI[240497]=0; //assymetric
if (responseI[240497] != vnodeI[469]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[239];
parity+=vnodeI[310];
parity+=vnodeI[417];
parity+=vnodeI[469];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[451441]=parity;
if (cwI[881]==0) responseI[451441]=0; //assymetric
if (responseI[451441] != vnodeI[881]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[288];
parity+=vnodeI[355];
parity+=vnodeI[446];
parity+=vnodeI[882];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1394]=parity;
if (cwI[2]==0) responseI[1394]=0; //assymetric
if (responseI[1394] != vnodeI[2]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[288];
parity+=vnodeI[355];
parity+=vnodeI[446];
parity+=vnodeI[882];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103794]=parity;
if (cwI[202]==0) responseI[103794]=0; //assymetric
if (responseI[103794] != vnodeI[202]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[202];
parity+=vnodeI[355];
parity+=vnodeI[446];
parity+=vnodeI[882];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[147826]=parity;
if (cwI[288]==0) responseI[147826]=0; //assymetric
if (responseI[147826] != vnodeI[288]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[202];
parity+=vnodeI[288];
parity+=vnodeI[446];
parity+=vnodeI[882];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[182130]=parity;
if (cwI[355]==0) responseI[182130]=0; //assymetric
if (responseI[182130] != vnodeI[355]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[202];
parity+=vnodeI[288];
parity+=vnodeI[355];
parity+=vnodeI[882];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[228722]=parity;
if (cwI[446]==0) responseI[228722]=0; //assymetric
if (responseI[228722] != vnodeI[446]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[202];
parity+=vnodeI[288];
parity+=vnodeI[355];
parity+=vnodeI[446];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[451954]=parity;
if (cwI[882]==0) responseI[451954]=0; //assymetric
if (responseI[451954] != vnodeI[882]) parityerrors++;
parity=0;
parity+=vnodeI[176];
parity+=vnodeI[280];
parity+=vnodeI[468];
parity+=vnodeI[883];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52083]=parity;
if (cwI[101]==0) responseI[52083]=0; //assymetric
if (responseI[52083] != vnodeI[101]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[280];
parity+=vnodeI[468];
parity+=vnodeI[883];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90483]=parity;
if (cwI[176]==0) responseI[90483]=0; //assymetric
if (responseI[90483] != vnodeI[176]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[176];
parity+=vnodeI[468];
parity+=vnodeI[883];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143731]=parity;
if (cwI[280]==0) responseI[143731]=0; //assymetric
if (responseI[143731] != vnodeI[280]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[176];
parity+=vnodeI[280];
parity+=vnodeI[883];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[239987]=parity;
if (cwI[468]==0) responseI[239987]=0; //assymetric
if (responseI[239987] != vnodeI[468]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[176];
parity+=vnodeI[280];
parity+=vnodeI[468];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[452467]=parity;
if (cwI[883]==0) responseI[452467]=0; //assymetric
if (responseI[452467] != vnodeI[883]) parityerrors++;
parity=0;
parity+=vnodeI[77];
parity+=vnodeI[395];
parity+=vnodeI[427];
parity+=vnodeI[884];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10100]=parity;
if (cwI[19]==0) responseI[10100]=0; //assymetric
if (responseI[10100] != vnodeI[19]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[395];
parity+=vnodeI[427];
parity+=vnodeI[884];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39796]=parity;
if (cwI[77]==0) responseI[39796]=0; //assymetric
if (responseI[39796] != vnodeI[77]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[77];
parity+=vnodeI[427];
parity+=vnodeI[884];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202612]=parity;
if (cwI[395]==0) responseI[202612]=0; //assymetric
if (responseI[202612] != vnodeI[395]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[77];
parity+=vnodeI[395];
parity+=vnodeI[884];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218996]=parity;
if (cwI[427]==0) responseI[218996]=0; //assymetric
if (responseI[218996] != vnodeI[427]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[77];
parity+=vnodeI[395];
parity+=vnodeI[427];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[452980]=parity;
if (cwI[884]==0) responseI[452980]=0; //assymetric
if (responseI[452980] != vnodeI[884]) parityerrors++;
parity=0;
parity+=vnodeI[67];
parity+=vnodeI[376];
parity+=vnodeI[436];
parity+=vnodeI[885];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19317]=parity;
if (cwI[37]==0) responseI[19317]=0; //assymetric
if (responseI[19317] != vnodeI[37]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[376];
parity+=vnodeI[436];
parity+=vnodeI[885];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34677]=parity;
if (cwI[67]==0) responseI[34677]=0; //assymetric
if (responseI[34677] != vnodeI[67]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[67];
parity+=vnodeI[436];
parity+=vnodeI[885];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192885]=parity;
if (cwI[376]==0) responseI[192885]=0; //assymetric
if (responseI[192885] != vnodeI[376]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[67];
parity+=vnodeI[376];
parity+=vnodeI[885];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223605]=parity;
if (cwI[436]==0) responseI[223605]=0; //assymetric
if (responseI[223605] != vnodeI[436]) parityerrors++;
parity=0;
parity+=vnodeI[37];
parity+=vnodeI[67];
parity+=vnodeI[376];
parity+=vnodeI[436];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[453493]=parity;
if (cwI[885]==0) responseI[453493]=0; //assymetric
if (responseI[453493] != vnodeI[885]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[115];
parity+=vnodeI[494];
parity+=vnodeI[886];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23414]=parity;
if (cwI[45]==0) responseI[23414]=0; //assymetric
if (responseI[23414] != vnodeI[45]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[115];
parity+=vnodeI[494];
parity+=vnodeI[886];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42358]=parity;
if (cwI[82]==0) responseI[42358]=0; //assymetric
if (responseI[42358] != vnodeI[82]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[82];
parity+=vnodeI[494];
parity+=vnodeI[886];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59254]=parity;
if (cwI[115]==0) responseI[59254]=0; //assymetric
if (responseI[59254] != vnodeI[115]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[82];
parity+=vnodeI[115];
parity+=vnodeI[886];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253302]=parity;
if (cwI[494]==0) responseI[253302]=0; //assymetric
if (responseI[253302] != vnodeI[494]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[82];
parity+=vnodeI[115];
parity+=vnodeI[494];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[454006]=parity;
if (cwI[886]==0) responseI[454006]=0; //assymetric
if (responseI[454006] != vnodeI[886]) parityerrors++;
parity=0;
parity+=vnodeI[228];
parity+=vnodeI[251];
parity+=vnodeI[394];
parity+=vnodeI[887];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73079]=parity;
if (cwI[142]==0) responseI[73079]=0; //assymetric
if (responseI[73079] != vnodeI[142]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[251];
parity+=vnodeI[394];
parity+=vnodeI[887];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117111]=parity;
if (cwI[228]==0) responseI[117111]=0; //assymetric
if (responseI[117111] != vnodeI[228]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[228];
parity+=vnodeI[394];
parity+=vnodeI[887];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128887]=parity;
if (cwI[251]==0) responseI[128887]=0; //assymetric
if (responseI[128887] != vnodeI[251]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[228];
parity+=vnodeI[251];
parity+=vnodeI[887];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202103]=parity;
if (cwI[394]==0) responseI[202103]=0; //assymetric
if (responseI[202103] != vnodeI[394]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[228];
parity+=vnodeI[251];
parity+=vnodeI[394];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[454519]=parity;
if (cwI[887]==0) responseI[454519]=0; //assymetric
if (responseI[454519] != vnodeI[887]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[209];
parity+=vnodeI[264];
parity+=vnodeI[888];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[32632]=parity;
if (cwI[63]==0) responseI[32632]=0; //assymetric
if (responseI[32632] != vnodeI[63]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[209];
parity+=vnodeI[264];
parity+=vnodeI[888];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77688]=parity;
if (cwI[151]==0) responseI[77688]=0; //assymetric
if (responseI[77688] != vnodeI[151]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[151];
parity+=vnodeI[264];
parity+=vnodeI[888];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107384]=parity;
if (cwI[209]==0) responseI[107384]=0; //assymetric
if (responseI[107384] != vnodeI[209]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[151];
parity+=vnodeI[209];
parity+=vnodeI[888];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135544]=parity;
if (cwI[264]==0) responseI[135544]=0; //assymetric
if (responseI[135544] != vnodeI[264]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[151];
parity+=vnodeI[209];
parity+=vnodeI[264];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[455032]=parity;
if (cwI[888]==0) responseI[455032]=0; //assymetric
if (responseI[455032] != vnodeI[888]) parityerrors++;
parity=0;
parity+=vnodeI[396];
parity+=vnodeI[470];
parity+=vnodeI[485];
parity+=vnodeI[889];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157049]=parity;
if (cwI[306]==0) responseI[157049]=0; //assymetric
if (responseI[157049] != vnodeI[306]) parityerrors++;
parity=0;
parity+=vnodeI[306];
parity+=vnodeI[470];
parity+=vnodeI[485];
parity+=vnodeI[889];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[203129]=parity;
if (cwI[396]==0) responseI[203129]=0; //assymetric
if (responseI[203129] != vnodeI[396]) parityerrors++;
parity=0;
parity+=vnodeI[306];
parity+=vnodeI[396];
parity+=vnodeI[485];
parity+=vnodeI[889];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[241017]=parity;
if (cwI[470]==0) responseI[241017]=0; //assymetric
if (responseI[241017] != vnodeI[470]) parityerrors++;
parity=0;
parity+=vnodeI[306];
parity+=vnodeI[396];
parity+=vnodeI[470];
parity+=vnodeI[889];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248697]=parity;
if (cwI[485]==0) responseI[248697]=0; //assymetric
if (responseI[248697] != vnodeI[485]) parityerrors++;
parity=0;
parity+=vnodeI[306];
parity+=vnodeI[396];
parity+=vnodeI[470];
parity+=vnodeI[485];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[455545]=parity;
if (cwI[889]==0) responseI[455545]=0; //assymetric
if (responseI[455545] != vnodeI[889]) parityerrors++;
parity=0;
parity+=vnodeI[7];
parity+=vnodeI[13];
parity+=vnodeI[497];
parity+=vnodeI[890];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1402]=parity;
if (cwI[2]==0) responseI[1402]=0; //assymetric
if (responseI[1402] != vnodeI[2]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[13];
parity+=vnodeI[497];
parity+=vnodeI[890];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[3962]=parity;
if (cwI[7]==0) responseI[3962]=0; //assymetric
if (responseI[3962] != vnodeI[7]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[7];
parity+=vnodeI[497];
parity+=vnodeI[890];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7034]=parity;
if (cwI[13]==0) responseI[7034]=0; //assymetric
if (responseI[7034] != vnodeI[13]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[7];
parity+=vnodeI[13];
parity+=vnodeI[890];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[254842]=parity;
if (cwI[497]==0) responseI[254842]=0; //assymetric
if (responseI[254842] != vnodeI[497]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[7];
parity+=vnodeI[13];
parity+=vnodeI[497];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[456058]=parity;
if (cwI[890]==0) responseI[456058]=0; //assymetric
if (responseI[456058] != vnodeI[890]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[87];
parity+=vnodeI[138];
parity+=vnodeI[891];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12155]=parity;
if (cwI[23]==0) responseI[12155]=0; //assymetric
if (responseI[12155] != vnodeI[23]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[87];
parity+=vnodeI[138];
parity+=vnodeI[891];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24955]=parity;
if (cwI[48]==0) responseI[24955]=0; //assymetric
if (responseI[24955] != vnodeI[48]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[48];
parity+=vnodeI[138];
parity+=vnodeI[891];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44923]=parity;
if (cwI[87]==0) responseI[44923]=0; //assymetric
if (responseI[44923] != vnodeI[87]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[48];
parity+=vnodeI[87];
parity+=vnodeI[891];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71035]=parity;
if (cwI[138]==0) responseI[71035]=0; //assymetric
if (responseI[71035] != vnodeI[138]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[48];
parity+=vnodeI[87];
parity+=vnodeI[138];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[456571]=parity;
if (cwI[891]==0) responseI[456571]=0; //assymetric
if (responseI[456571] != vnodeI[891]) parityerrors++;
parity=0;
parity+=vnodeI[178];
parity+=vnodeI[189];
parity+=vnodeI[378];
parity+=vnodeI[892];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[8572]=parity;
if (cwI[16]==0) responseI[8572]=0; //assymetric
if (responseI[8572] != vnodeI[16]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[189];
parity+=vnodeI[378];
parity+=vnodeI[892];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91516]=parity;
if (cwI[178]==0) responseI[91516]=0; //assymetric
if (responseI[91516] != vnodeI[178]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[178];
parity+=vnodeI[378];
parity+=vnodeI[892];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97148]=parity;
if (cwI[189]==0) responseI[97148]=0; //assymetric
if (responseI[97148] != vnodeI[189]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[178];
parity+=vnodeI[189];
parity+=vnodeI[892];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[193916]=parity;
if (cwI[378]==0) responseI[193916]=0; //assymetric
if (responseI[193916] != vnodeI[378]) parityerrors++;
parity=0;
parity+=vnodeI[16];
parity+=vnodeI[178];
parity+=vnodeI[189];
parity+=vnodeI[378];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[457084]=parity;
if (cwI[892]==0) responseI[457084]=0; //assymetric
if (responseI[457084] != vnodeI[892]) parityerrors++;
parity=0;
parity+=vnodeI[72];
parity+=vnodeI[185];
parity+=vnodeI[189];
parity+=vnodeI[893];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21373]=parity;
if (cwI[41]==0) responseI[21373]=0; //assymetric
if (responseI[21373] != vnodeI[41]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[185];
parity+=vnodeI[189];
parity+=vnodeI[893];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37245]=parity;
if (cwI[72]==0) responseI[37245]=0; //assymetric
if (responseI[37245] != vnodeI[72]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[72];
parity+=vnodeI[189];
parity+=vnodeI[893];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[95101]=parity;
if (cwI[185]==0) responseI[95101]=0; //assymetric
if (responseI[95101] != vnodeI[185]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[72];
parity+=vnodeI[185];
parity+=vnodeI[893];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97149]=parity;
if (cwI[189]==0) responseI[97149]=0; //assymetric
if (responseI[97149] != vnodeI[189]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[72];
parity+=vnodeI[185];
parity+=vnodeI[189];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[457597]=parity;
if (cwI[893]==0) responseI[457597]=0; //assymetric
if (responseI[457597] != vnodeI[893]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[447];
parity+=vnodeI[490];
parity+=vnodeI[894];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75134]=parity;
if (cwI[146]==0) responseI[75134]=0; //assymetric
if (responseI[75134] != vnodeI[146]) parityerrors++;
parity=0;
parity+=vnodeI[146];
parity+=vnodeI[447];
parity+=vnodeI[490];
parity+=vnodeI[894];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123774]=parity;
if (cwI[241]==0) responseI[123774]=0; //assymetric
if (responseI[123774] != vnodeI[241]) parityerrors++;
parity=0;
parity+=vnodeI[146];
parity+=vnodeI[241];
parity+=vnodeI[490];
parity+=vnodeI[894];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[229246]=parity;
if (cwI[447]==0) responseI[229246]=0; //assymetric
if (responseI[229246] != vnodeI[447]) parityerrors++;
parity=0;
parity+=vnodeI[146];
parity+=vnodeI[241];
parity+=vnodeI[447];
parity+=vnodeI[894];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[251262]=parity;
if (cwI[490]==0) responseI[251262]=0; //assymetric
if (responseI[251262] != vnodeI[490]) parityerrors++;
parity=0;
parity+=vnodeI[146];
parity+=vnodeI[241];
parity+=vnodeI[447];
parity+=vnodeI[490];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[458110]=parity;
if (cwI[894]==0) responseI[458110]=0; //assymetric
if (responseI[458110] != vnodeI[894]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[143];
parity+=vnodeI[380];
parity+=vnodeI[895];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25471]=parity;
if (cwI[49]==0) responseI[25471]=0; //assymetric
if (responseI[25471] != vnodeI[49]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[143];
parity+=vnodeI[380];
parity+=vnodeI[895];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[32639]=parity;
if (cwI[63]==0) responseI[32639]=0; //assymetric
if (responseI[32639] != vnodeI[63]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[63];
parity+=vnodeI[380];
parity+=vnodeI[895];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73599]=parity;
if (cwI[143]==0) responseI[73599]=0; //assymetric
if (responseI[73599] != vnodeI[143]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[63];
parity+=vnodeI[143];
parity+=vnodeI[895];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194943]=parity;
if (cwI[380]==0) responseI[194943]=0; //assymetric
if (responseI[194943] != vnodeI[380]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[63];
parity+=vnodeI[143];
parity+=vnodeI[380];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[458623]=parity;
if (cwI[895]==0) responseI[458623]=0; //assymetric
if (responseI[458623] != vnodeI[895]) parityerrors++;
parity=0;
parity+=vnodeI[181];
parity+=vnodeI[320];
parity+=vnodeI[466];
parity+=vnodeI[896];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31104]=parity;
if (cwI[60]==0) responseI[31104]=0; //assymetric
if (responseI[31104] != vnodeI[60]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[320];
parity+=vnodeI[466];
parity+=vnodeI[896];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93056]=parity;
if (cwI[181]==0) responseI[93056]=0; //assymetric
if (responseI[93056] != vnodeI[181]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[181];
parity+=vnodeI[466];
parity+=vnodeI[896];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164224]=parity;
if (cwI[320]==0) responseI[164224]=0; //assymetric
if (responseI[164224] != vnodeI[320]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[181];
parity+=vnodeI[320];
parity+=vnodeI[896];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238976]=parity;
if (cwI[466]==0) responseI[238976]=0; //assymetric
if (responseI[238976] != vnodeI[466]) parityerrors++;
parity=0;
parity+=vnodeI[60];
parity+=vnodeI[181];
parity+=vnodeI[320];
parity+=vnodeI[466];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[459136]=parity;
if (cwI[896]==0) responseI[459136]=0; //assymetric
if (responseI[459136] != vnodeI[896]) parityerrors++;
parity=0;
parity+=vnodeI[280];
parity+=vnodeI[300];
parity+=vnodeI[441];
parity+=vnodeI[897];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7553]=parity;
if (cwI[14]==0) responseI[7553]=0; //assymetric
if (responseI[7553] != vnodeI[14]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[300];
parity+=vnodeI[441];
parity+=vnodeI[897];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143745]=parity;
if (cwI[280]==0) responseI[143745]=0; //assymetric
if (responseI[143745] != vnodeI[280]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[280];
parity+=vnodeI[441];
parity+=vnodeI[897];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153985]=parity;
if (cwI[300]==0) responseI[153985]=0; //assymetric
if (responseI[153985] != vnodeI[300]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[280];
parity+=vnodeI[300];
parity+=vnodeI[897];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226177]=parity;
if (cwI[441]==0) responseI[226177]=0; //assymetric
if (responseI[226177] != vnodeI[441]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[280];
parity+=vnodeI[300];
parity+=vnodeI[441];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[459649]=parity;
if (cwI[897]==0) responseI[459649]=0; //assymetric
if (responseI[459649] != vnodeI[897]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[113];
parity+=vnodeI[199];
parity+=vnodeI[275];
parity+=vnodeI[898];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12674]=parity;
if (cwI[24]==0) responseI[12674]=0; //assymetric
if (responseI[12674] != vnodeI[24]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[113];
parity+=vnodeI[199];
parity+=vnodeI[275];
parity+=vnodeI[898];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16770]=parity;
if (cwI[32]==0) responseI[16770]=0; //assymetric
if (responseI[16770] != vnodeI[32]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[32];
parity+=vnodeI[199];
parity+=vnodeI[275];
parity+=vnodeI[898];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58242]=parity;
if (cwI[113]==0) responseI[58242]=0; //assymetric
if (responseI[58242] != vnodeI[113]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[32];
parity+=vnodeI[113];
parity+=vnodeI[275];
parity+=vnodeI[898];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102274]=parity;
if (cwI[199]==0) responseI[102274]=0; //assymetric
if (responseI[102274] != vnodeI[199]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[32];
parity+=vnodeI[113];
parity+=vnodeI[199];
parity+=vnodeI[898];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[141186]=parity;
if (cwI[275]==0) responseI[141186]=0; //assymetric
if (responseI[141186] != vnodeI[275]) parityerrors++;
parity=0;
parity+=vnodeI[24];
parity+=vnodeI[32];
parity+=vnodeI[113];
parity+=vnodeI[199];
parity+=vnodeI[275];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[460162]=parity;
if (cwI[898]==0) responseI[460162]=0; //assymetric
if (responseI[460162] != vnodeI[898]) parityerrors++;
parity=0;
parity+=vnodeI[139];
parity+=vnodeI[170];
parity+=vnodeI[492];
parity+=vnodeI[899];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25475]=parity;
if (cwI[49]==0) responseI[25475]=0; //assymetric
if (responseI[25475] != vnodeI[49]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[170];
parity+=vnodeI[492];
parity+=vnodeI[899];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[71555]=parity;
if (cwI[139]==0) responseI[71555]=0; //assymetric
if (responseI[71555] != vnodeI[139]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[139];
parity+=vnodeI[492];
parity+=vnodeI[899];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87427]=parity;
if (cwI[170]==0) responseI[87427]=0; //assymetric
if (responseI[87427] != vnodeI[170]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[139];
parity+=vnodeI[170];
parity+=vnodeI[899];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252291]=parity;
if (cwI[492]==0) responseI[252291]=0; //assymetric
if (responseI[252291] != vnodeI[492]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[139];
parity+=vnodeI[170];
parity+=vnodeI[492];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[460675]=parity;
if (cwI[899]==0) responseI[460675]=0; //assymetric
if (responseI[460675] != vnodeI[899]) parityerrors++;
parity=0;
parity+=vnodeI[213];
parity+=vnodeI[244];
parity+=vnodeI[282];
parity+=vnodeI[329];
parity+=vnodeI[900];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[11652]=parity;
if (cwI[22]==0) responseI[11652]=0; //assymetric
if (responseI[11652] != vnodeI[22]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[244];
parity+=vnodeI[282];
parity+=vnodeI[329];
parity+=vnodeI[900];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109444]=parity;
if (cwI[213]==0) responseI[109444]=0; //assymetric
if (responseI[109444] != vnodeI[213]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[213];
parity+=vnodeI[282];
parity+=vnodeI[329];
parity+=vnodeI[900];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125316]=parity;
if (cwI[244]==0) responseI[125316]=0; //assymetric
if (responseI[125316] != vnodeI[244]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[213];
parity+=vnodeI[244];
parity+=vnodeI[329];
parity+=vnodeI[900];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[144772]=parity;
if (cwI[282]==0) responseI[144772]=0; //assymetric
if (responseI[144772] != vnodeI[282]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[213];
parity+=vnodeI[244];
parity+=vnodeI[282];
parity+=vnodeI[900];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168836]=parity;
if (cwI[329]==0) responseI[168836]=0; //assymetric
if (responseI[168836] != vnodeI[329]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[213];
parity+=vnodeI[244];
parity+=vnodeI[282];
parity+=vnodeI[329];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[461188]=parity;
if (cwI[900]==0) responseI[461188]=0; //assymetric
if (responseI[461188] != vnodeI[900]) parityerrors++;
parity=0;
parity+=vnodeI[288];
parity+=vnodeI[303];
parity+=vnodeI[401];
parity+=vnodeI[901];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39301]=parity;
if (cwI[76]==0) responseI[39301]=0; //assymetric
if (responseI[39301] != vnodeI[76]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[303];
parity+=vnodeI[401];
parity+=vnodeI[901];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[147845]=parity;
if (cwI[288]==0) responseI[147845]=0; //assymetric
if (responseI[147845] != vnodeI[288]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[288];
parity+=vnodeI[401];
parity+=vnodeI[901];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[155525]=parity;
if (cwI[303]==0) responseI[155525]=0; //assymetric
if (responseI[155525] != vnodeI[303]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[288];
parity+=vnodeI[303];
parity+=vnodeI[901];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[205701]=parity;
if (cwI[401]==0) responseI[205701]=0; //assymetric
if (responseI[205701] != vnodeI[401]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[288];
parity+=vnodeI[303];
parity+=vnodeI[401];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[461701]=parity;
if (cwI[901]==0) responseI[461701]=0; //assymetric
if (responseI[461701] != vnodeI[901]) parityerrors++;
parity=0;
parity+=vnodeI[174];
parity+=vnodeI[392];
parity+=vnodeI[494];
parity+=vnodeI[902];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66438]=parity;
if (cwI[129]==0) responseI[66438]=0; //assymetric
if (responseI[66438] != vnodeI[129]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[392];
parity+=vnodeI[494];
parity+=vnodeI[902];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89478]=parity;
if (cwI[174]==0) responseI[89478]=0; //assymetric
if (responseI[89478] != vnodeI[174]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[174];
parity+=vnodeI[494];
parity+=vnodeI[902];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201094]=parity;
if (cwI[392]==0) responseI[201094]=0; //assymetric
if (responseI[201094] != vnodeI[392]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[174];
parity+=vnodeI[392];
parity+=vnodeI[902];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[253318]=parity;
if (cwI[494]==0) responseI[253318]=0; //assymetric
if (responseI[253318] != vnodeI[494]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[174];
parity+=vnodeI[392];
parity+=vnodeI[494];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[462214]=parity;
if (cwI[902]==0) responseI[462214]=0; //assymetric
if (responseI[462214] != vnodeI[902]) parityerrors++;
parity=0;
parity+=vnodeI[44];
parity+=vnodeI[133];
parity+=vnodeI[500];
parity+=vnodeI[903];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[9607]=parity;
if (cwI[18]==0) responseI[9607]=0; //assymetric
if (responseI[9607] != vnodeI[18]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[133];
parity+=vnodeI[500];
parity+=vnodeI[903];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22919]=parity;
if (cwI[44]==0) responseI[22919]=0; //assymetric
if (responseI[22919] != vnodeI[44]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[44];
parity+=vnodeI[500];
parity+=vnodeI[903];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68487]=parity;
if (cwI[133]==0) responseI[68487]=0; //assymetric
if (responseI[68487] != vnodeI[133]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[44];
parity+=vnodeI[133];
parity+=vnodeI[903];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256391]=parity;
if (cwI[500]==0) responseI[256391]=0; //assymetric
if (responseI[256391] != vnodeI[500]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[44];
parity+=vnodeI[133];
parity+=vnodeI[500];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[462727]=parity;
if (cwI[903]==0) responseI[462727]=0; //assymetric
if (responseI[462727] != vnodeI[903]) parityerrors++;
parity=0;
parity+=vnodeI[216];
parity+=vnodeI[231];
parity+=vnodeI[476];
parity+=vnodeI[904];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70024]=parity;
if (cwI[136]==0) responseI[70024]=0; //assymetric
if (responseI[70024] != vnodeI[136]) parityerrors++;
parity=0;
parity+=vnodeI[136];
parity+=vnodeI[231];
parity+=vnodeI[476];
parity+=vnodeI[904];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110984]=parity;
if (cwI[216]==0) responseI[110984]=0; //assymetric
if (responseI[110984] != vnodeI[216]) parityerrors++;
parity=0;
parity+=vnodeI[136];
parity+=vnodeI[216];
parity+=vnodeI[476];
parity+=vnodeI[904];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[118664]=parity;
if (cwI[231]==0) responseI[118664]=0; //assymetric
if (responseI[118664] != vnodeI[231]) parityerrors++;
parity=0;
parity+=vnodeI[136];
parity+=vnodeI[216];
parity+=vnodeI[231];
parity+=vnodeI[904];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[244104]=parity;
if (cwI[476]==0) responseI[244104]=0; //assymetric
if (responseI[244104] != vnodeI[476]) parityerrors++;
parity=0;
parity+=vnodeI[136];
parity+=vnodeI[216];
parity+=vnodeI[231];
parity+=vnodeI[476];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[463240]=parity;
if (cwI[904]==0) responseI[463240]=0; //assymetric
if (responseI[463240] != vnodeI[904]) parityerrors++;
parity=0;
parity+=vnodeI[332];
parity+=vnodeI[392];
parity+=vnodeI[905];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88457]=parity;
if (cwI[172]==0) responseI[88457]=0; //assymetric
if (responseI[88457] != vnodeI[172]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[392];
parity+=vnodeI[905];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170377]=parity;
if (cwI[332]==0) responseI[170377]=0; //assymetric
if (responseI[170377] != vnodeI[332]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[332];
parity+=vnodeI[905];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201097]=parity;
if (cwI[392]==0) responseI[201097]=0; //assymetric
if (responseI[201097] != vnodeI[392]) parityerrors++;
parity=0;
parity+=vnodeI[172];
parity+=vnodeI[332];
parity+=vnodeI[392];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[463753]=parity;
if (cwI[905]==0) responseI[463753]=0; //assymetric
if (responseI[463753] != vnodeI[905]) parityerrors++;
parity=0;
parity+=vnodeI[243];
parity+=vnodeI[254];
parity+=vnodeI[440];
parity+=vnodeI[906];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81802]=parity;
if (cwI[159]==0) responseI[81802]=0; //assymetric
if (responseI[81802] != vnodeI[159]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[254];
parity+=vnodeI[440];
parity+=vnodeI[906];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124810]=parity;
if (cwI[243]==0) responseI[124810]=0; //assymetric
if (responseI[124810] != vnodeI[243]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[243];
parity+=vnodeI[440];
parity+=vnodeI[906];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130442]=parity;
if (cwI[254]==0) responseI[130442]=0; //assymetric
if (responseI[130442] != vnodeI[254]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[243];
parity+=vnodeI[254];
parity+=vnodeI[906];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225674]=parity;
if (cwI[440]==0) responseI[225674]=0; //assymetric
if (responseI[225674] != vnodeI[440]) parityerrors++;
parity=0;
parity+=vnodeI[159];
parity+=vnodeI[243];
parity+=vnodeI[254];
parity+=vnodeI[440];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[464266]=parity;
if (cwI[906]==0) responseI[464266]=0; //assymetric
if (responseI[464266] != vnodeI[906]) parityerrors++;
parity=0;
parity+=vnodeI[198];
parity+=vnodeI[250];
parity+=vnodeI[395];
parity+=vnodeI[907];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7563]=parity;
if (cwI[14]==0) responseI[7563]=0; //assymetric
if (responseI[7563] != vnodeI[14]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[250];
parity+=vnodeI[395];
parity+=vnodeI[907];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[101771]=parity;
if (cwI[198]==0) responseI[101771]=0; //assymetric
if (responseI[101771] != vnodeI[198]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[198];
parity+=vnodeI[395];
parity+=vnodeI[907];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128395]=parity;
if (cwI[250]==0) responseI[128395]=0; //assymetric
if (responseI[128395] != vnodeI[250]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[198];
parity+=vnodeI[250];
parity+=vnodeI[907];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202635]=parity;
if (cwI[395]==0) responseI[202635]=0; //assymetric
if (responseI[202635] != vnodeI[395]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[198];
parity+=vnodeI[250];
parity+=vnodeI[395];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[464779]=parity;
if (cwI[907]==0) responseI[464779]=0; //assymetric
if (responseI[464779] != vnodeI[907]) parityerrors++;
parity=0;
parity+=vnodeI[168];
parity+=vnodeI[295];
parity+=vnodeI[365];
parity+=vnodeI[908];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46476]=parity;
if (cwI[90]==0) responseI[46476]=0; //assymetric
if (responseI[46476] != vnodeI[90]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[295];
parity+=vnodeI[365];
parity+=vnodeI[908];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[86412]=parity;
if (cwI[168]==0) responseI[86412]=0; //assymetric
if (responseI[86412] != vnodeI[168]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[168];
parity+=vnodeI[365];
parity+=vnodeI[908];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[151436]=parity;
if (cwI[295]==0) responseI[151436]=0; //assymetric
if (responseI[151436] != vnodeI[295]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[168];
parity+=vnodeI[295];
parity+=vnodeI[908];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[187276]=parity;
if (cwI[365]==0) responseI[187276]=0; //assymetric
if (responseI[187276] != vnodeI[365]) parityerrors++;
parity=0;
parity+=vnodeI[90];
parity+=vnodeI[168];
parity+=vnodeI[295];
parity+=vnodeI[365];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[465292]=parity;
if (cwI[908]==0) responseI[465292]=0; //assymetric
if (responseI[465292] != vnodeI[908]) parityerrors++;
parity=0;
parity+=vnodeI[110];
parity+=vnodeI[180];
parity+=vnodeI[474];
parity+=vnodeI[909];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[909]=parity;
if (cwI[1]==0) responseI[909]=0; //assymetric
if (responseI[909] != vnodeI[1]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[180];
parity+=vnodeI[474];
parity+=vnodeI[909];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[56717]=parity;
if (cwI[110]==0) responseI[56717]=0; //assymetric
if (responseI[56717] != vnodeI[110]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[110];
parity+=vnodeI[474];
parity+=vnodeI[909];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92557]=parity;
if (cwI[180]==0) responseI[92557]=0; //assymetric
if (responseI[92557] != vnodeI[180]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[110];
parity+=vnodeI[180];
parity+=vnodeI[909];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243085]=parity;
if (cwI[474]==0) responseI[243085]=0; //assymetric
if (responseI[243085] != vnodeI[474]) parityerrors++;
parity=0;
parity+=vnodeI[1];
parity+=vnodeI[110];
parity+=vnodeI[180];
parity+=vnodeI[474];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[465805]=parity;
if (cwI[909]==0) responseI[465805]=0; //assymetric
if (responseI[465805] != vnodeI[909]) parityerrors++;
parity=0;
parity+=vnodeI[59];
parity+=vnodeI[136];
parity+=vnodeI[305];
parity+=vnodeI[910];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17294]=parity;
if (cwI[33]==0) responseI[17294]=0; //assymetric
if (responseI[17294] != vnodeI[33]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[136];
parity+=vnodeI[305];
parity+=vnodeI[910];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[30606]=parity;
if (cwI[59]==0) responseI[30606]=0; //assymetric
if (responseI[30606] != vnodeI[59]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[59];
parity+=vnodeI[305];
parity+=vnodeI[910];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70030]=parity;
if (cwI[136]==0) responseI[70030]=0; //assymetric
if (responseI[70030] != vnodeI[136]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[59];
parity+=vnodeI[136];
parity+=vnodeI[910];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156558]=parity;
if (cwI[305]==0) responseI[156558]=0; //assymetric
if (responseI[156558] != vnodeI[305]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[59];
parity+=vnodeI[136];
parity+=vnodeI[305];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[466318]=parity;
if (cwI[910]==0) responseI[466318]=0; //assymetric
if (responseI[466318] != vnodeI[910]) parityerrors++;
parity=0;
parity+=vnodeI[229];
parity+=vnodeI[363];
parity+=vnodeI[444];
parity+=vnodeI[911];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[9615]=parity;
if (cwI[18]==0) responseI[9615]=0; //assymetric
if (responseI[9615] != vnodeI[18]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[363];
parity+=vnodeI[444];
parity+=vnodeI[911];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117647]=parity;
if (cwI[229]==0) responseI[117647]=0; //assymetric
if (responseI[117647] != vnodeI[229]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[229];
parity+=vnodeI[444];
parity+=vnodeI[911];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186255]=parity;
if (cwI[363]==0) responseI[186255]=0; //assymetric
if (responseI[186255] != vnodeI[363]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[229];
parity+=vnodeI[363];
parity+=vnodeI[911];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[227727]=parity;
if (cwI[444]==0) responseI[227727]=0; //assymetric
if (responseI[227727] != vnodeI[444]) parityerrors++;
parity=0;
parity+=vnodeI[18];
parity+=vnodeI[229];
parity+=vnodeI[363];
parity+=vnodeI[444];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[466831]=parity;
if (cwI[911]==0) responseI[466831]=0; //assymetric
if (responseI[466831] != vnodeI[911]) parityerrors++;
parity=0;
parity+=vnodeI[193];
parity+=vnodeI[252];
parity+=vnodeI[335];
parity+=vnodeI[912];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97680]=parity;
if (cwI[190]==0) responseI[97680]=0; //assymetric
if (responseI[97680] != vnodeI[190]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[252];
parity+=vnodeI[335];
parity+=vnodeI[912];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99216]=parity;
if (cwI[193]==0) responseI[99216]=0; //assymetric
if (responseI[99216] != vnodeI[193]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[193];
parity+=vnodeI[335];
parity+=vnodeI[912];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[129424]=parity;
if (cwI[252]==0) responseI[129424]=0; //assymetric
if (responseI[129424] != vnodeI[252]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[193];
parity+=vnodeI[252];
parity+=vnodeI[912];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171920]=parity;
if (cwI[335]==0) responseI[171920]=0; //assymetric
if (responseI[171920] != vnodeI[335]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[193];
parity+=vnodeI[252];
parity+=vnodeI[335];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[467344]=parity;
if (cwI[912]==0) responseI[467344]=0; //assymetric
if (responseI[467344] != vnodeI[912]) parityerrors++;
parity=0;
parity+=vnodeI[162];
parity+=vnodeI[183];
parity+=vnodeI[269];
parity+=vnodeI[913];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79249]=parity;
if (cwI[154]==0) responseI[79249]=0; //assymetric
if (responseI[79249] != vnodeI[154]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[183];
parity+=vnodeI[269];
parity+=vnodeI[913];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83345]=parity;
if (cwI[162]==0) responseI[83345]=0; //assymetric
if (responseI[83345] != vnodeI[162]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[162];
parity+=vnodeI[269];
parity+=vnodeI[913];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94097]=parity;
if (cwI[183]==0) responseI[94097]=0; //assymetric
if (responseI[94097] != vnodeI[183]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[162];
parity+=vnodeI[183];
parity+=vnodeI[913];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138129]=parity;
if (cwI[269]==0) responseI[138129]=0; //assymetric
if (responseI[138129] != vnodeI[269]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[162];
parity+=vnodeI[183];
parity+=vnodeI[269];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[467857]=parity;
if (cwI[913]==0) responseI[467857]=0; //assymetric
if (responseI[467857] != vnodeI[913]) parityerrors++;
parity=0;
parity+=vnodeI[209];
parity+=vnodeI[488];
parity+=vnodeI[503];
parity+=vnodeI[914];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[72594]=parity;
if (cwI[141]==0) responseI[72594]=0; //assymetric
if (responseI[72594] != vnodeI[141]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[488];
parity+=vnodeI[503];
parity+=vnodeI[914];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107410]=parity;
if (cwI[209]==0) responseI[107410]=0; //assymetric
if (responseI[107410] != vnodeI[209]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[209];
parity+=vnodeI[503];
parity+=vnodeI[914];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250258]=parity;
if (cwI[488]==0) responseI[250258]=0; //assymetric
if (responseI[250258] != vnodeI[488]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[209];
parity+=vnodeI[488];
parity+=vnodeI[914];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257938]=parity;
if (cwI[503]==0) responseI[257938]=0; //assymetric
if (responseI[257938] != vnodeI[503]) parityerrors++;
parity=0;
parity+=vnodeI[141];
parity+=vnodeI[209];
parity+=vnodeI[488];
parity+=vnodeI[503];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[468370]=parity;
if (cwI[914]==0) responseI[468370]=0; //assymetric
if (responseI[468370] != vnodeI[914]) parityerrors++;
parity=0;
parity+=vnodeI[317];
parity+=vnodeI[379];
parity+=vnodeI[915];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100243]=parity;
if (cwI[195]==0) responseI[100243]=0; //assymetric
if (responseI[100243] != vnodeI[195]) parityerrors++;
parity=0;
parity+=vnodeI[195];
parity+=vnodeI[379];
parity+=vnodeI[915];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162707]=parity;
if (cwI[317]==0) responseI[162707]=0; //assymetric
if (responseI[162707] != vnodeI[317]) parityerrors++;
parity=0;
parity+=vnodeI[195];
parity+=vnodeI[317];
parity+=vnodeI[915];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194451]=parity;
if (cwI[379]==0) responseI[194451]=0; //assymetric
if (responseI[194451] != vnodeI[379]) parityerrors++;
parity=0;
parity+=vnodeI[195];
parity+=vnodeI[317];
parity+=vnodeI[379];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[468883]=parity;
if (cwI[915]==0) responseI[468883]=0; //assymetric
if (responseI[468883] != vnodeI[915]) parityerrors++;
parity=0;
parity+=vnodeI[259];
parity+=vnodeI[301];
parity+=vnodeI[340];
parity+=vnodeI[916];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121236]=parity;
if (cwI[236]==0) responseI[121236]=0; //assymetric
if (responseI[121236] != vnodeI[236]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[301];
parity+=vnodeI[340];
parity+=vnodeI[916];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133012]=parity;
if (cwI[259]==0) responseI[133012]=0; //assymetric
if (responseI[133012] != vnodeI[259]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[259];
parity+=vnodeI[340];
parity+=vnodeI[916];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154516]=parity;
if (cwI[301]==0) responseI[154516]=0; //assymetric
if (responseI[154516] != vnodeI[301]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[259];
parity+=vnodeI[301];
parity+=vnodeI[916];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[174484]=parity;
if (cwI[340]==0) responseI[174484]=0; //assymetric
if (responseI[174484] != vnodeI[340]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[259];
parity+=vnodeI[301];
parity+=vnodeI[340];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[469396]=parity;
if (cwI[916]==0) responseI[469396]=0; //assymetric
if (responseI[469396] != vnodeI[916]) parityerrors++;
parity=0;
parity+=vnodeI[223];
parity+=vnodeI[354];
parity+=vnodeI[436];
parity+=vnodeI[917];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48021]=parity;
if (cwI[93]==0) responseI[48021]=0; //assymetric
if (responseI[48021] != vnodeI[93]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[354];
parity+=vnodeI[436];
parity+=vnodeI[917];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114581]=parity;
if (cwI[223]==0) responseI[114581]=0; //assymetric
if (responseI[114581] != vnodeI[223]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[223];
parity+=vnodeI[436];
parity+=vnodeI[917];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[181653]=parity;
if (cwI[354]==0) responseI[181653]=0; //assymetric
if (responseI[181653] != vnodeI[354]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[223];
parity+=vnodeI[354];
parity+=vnodeI[917];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223637]=parity;
if (cwI[436]==0) responseI[223637]=0; //assymetric
if (responseI[223637] != vnodeI[436]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[223];
parity+=vnodeI[354];
parity+=vnodeI[436];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[469909]=parity;
if (cwI[917]==0) responseI[469909]=0; //assymetric
if (responseI[469909] != vnodeI[917]) parityerrors++;
parity=0;
parity+=vnodeI[108];
parity+=vnodeI[165];
parity+=vnodeI[331];
parity+=vnodeI[918];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23958]=parity;
if (cwI[46]==0) responseI[23958]=0; //assymetric
if (responseI[23958] != vnodeI[46]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[165];
parity+=vnodeI[331];
parity+=vnodeI[918];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55702]=parity;
if (cwI[108]==0) responseI[55702]=0; //assymetric
if (responseI[55702] != vnodeI[108]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[108];
parity+=vnodeI[331];
parity+=vnodeI[918];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84886]=parity;
if (cwI[165]==0) responseI[84886]=0; //assymetric
if (responseI[84886] != vnodeI[165]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[108];
parity+=vnodeI[165];
parity+=vnodeI[918];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169878]=parity;
if (cwI[331]==0) responseI[169878]=0; //assymetric
if (responseI[169878] != vnodeI[331]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[108];
parity+=vnodeI[165];
parity+=vnodeI[331];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[470422]=parity;
if (cwI[918]==0) responseI[470422]=0; //assymetric
if (responseI[470422] != vnodeI[918]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[254];
parity+=vnodeI[322];
parity+=vnodeI[919];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39319]=parity;
if (cwI[76]==0) responseI[39319]=0; //assymetric
if (responseI[39319] != vnodeI[76]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[254];
parity+=vnodeI[322];
parity+=vnodeI[919];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43415]=parity;
if (cwI[84]==0) responseI[43415]=0; //assymetric
if (responseI[43415] != vnodeI[84]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[84];
parity+=vnodeI[322];
parity+=vnodeI[919];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130455]=parity;
if (cwI[254]==0) responseI[130455]=0; //assymetric
if (responseI[130455] != vnodeI[254]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[84];
parity+=vnodeI[254];
parity+=vnodeI[919];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165271]=parity;
if (cwI[322]==0) responseI[165271]=0; //assymetric
if (responseI[165271] != vnodeI[322]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[84];
parity+=vnodeI[254];
parity+=vnodeI[322];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[470935]=parity;
if (cwI[919]==0) responseI[470935]=0; //assymetric
if (responseI[470935] != vnodeI[919]) parityerrors++;
parity=0;
parity+=vnodeI[400];
parity+=vnodeI[412];
parity+=vnodeI[421];
parity+=vnodeI[920];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18328]=parity;
if (cwI[35]==0) responseI[18328]=0; //assymetric
if (responseI[18328] != vnodeI[35]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[412];
parity+=vnodeI[421];
parity+=vnodeI[920];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[205208]=parity;
if (cwI[400]==0) responseI[205208]=0; //assymetric
if (responseI[205208] != vnodeI[400]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[400];
parity+=vnodeI[421];
parity+=vnodeI[920];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[211352]=parity;
if (cwI[412]==0) responseI[211352]=0; //assymetric
if (responseI[211352] != vnodeI[412]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[400];
parity+=vnodeI[412];
parity+=vnodeI[920];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215960]=parity;
if (cwI[421]==0) responseI[215960]=0; //assymetric
if (responseI[215960] != vnodeI[421]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[400];
parity+=vnodeI[412];
parity+=vnodeI[421];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[471448]=parity;
if (cwI[920]==0) responseI[471448]=0; //assymetric
if (responseI[471448] != vnodeI[920]) parityerrors++;
parity=0;
parity+=vnodeI[358];
parity+=vnodeI[474];
parity+=vnodeI[921];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[31641]=parity;
if (cwI[61]==0) responseI[31641]=0; //assymetric
if (responseI[31641] != vnodeI[61]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[474];
parity+=vnodeI[921];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[183705]=parity;
if (cwI[358]==0) responseI[183705]=0; //assymetric
if (responseI[183705] != vnodeI[358]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[358];
parity+=vnodeI[921];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243097]=parity;
if (cwI[474]==0) responseI[243097]=0; //assymetric
if (responseI[243097] != vnodeI[474]) parityerrors++;
parity=0;
parity+=vnodeI[61];
parity+=vnodeI[358];
parity+=vnodeI[474];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[471961]=parity;
if (cwI[921]==0) responseI[471961]=0; //assymetric
if (responseI[471961] != vnodeI[921]) parityerrors++;
parity=0;
parity+=vnodeI[281];
parity+=vnodeI[430];
parity+=vnodeI[452];
parity+=vnodeI[922];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23962]=parity;
if (cwI[46]==0) responseI[23962]=0; //assymetric
if (responseI[23962] != vnodeI[46]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[430];
parity+=vnodeI[452];
parity+=vnodeI[922];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[144282]=parity;
if (cwI[281]==0) responseI[144282]=0; //assymetric
if (responseI[144282] != vnodeI[281]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[281];
parity+=vnodeI[452];
parity+=vnodeI[922];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220570]=parity;
if (cwI[430]==0) responseI[220570]=0; //assymetric
if (responseI[220570] != vnodeI[430]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[281];
parity+=vnodeI[430];
parity+=vnodeI[922];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231834]=parity;
if (cwI[452]==0) responseI[231834]=0; //assymetric
if (responseI[231834] != vnodeI[452]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[281];
parity+=vnodeI[430];
parity+=vnodeI[452];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[472474]=parity;
if (cwI[922]==0) responseI[472474]=0; //assymetric
if (responseI[472474] != vnodeI[922]) parityerrors++;
parity=0;
parity+=vnodeI[84];
parity+=vnodeI[181];
parity+=vnodeI[288];
parity+=vnodeI[923];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7579]=parity;
if (cwI[14]==0) responseI[7579]=0; //assymetric
if (responseI[7579] != vnodeI[14]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[181];
parity+=vnodeI[288];
parity+=vnodeI[923];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43419]=parity;
if (cwI[84]==0) responseI[43419]=0; //assymetric
if (responseI[43419] != vnodeI[84]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[84];
parity+=vnodeI[288];
parity+=vnodeI[923];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93083]=parity;
if (cwI[181]==0) responseI[93083]=0; //assymetric
if (responseI[93083] != vnodeI[181]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[84];
parity+=vnodeI[181];
parity+=vnodeI[923];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[147867]=parity;
if (cwI[288]==0) responseI[147867]=0; //assymetric
if (responseI[147867] != vnodeI[288]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[84];
parity+=vnodeI[181];
parity+=vnodeI[288];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[472987]=parity;
if (cwI[923]==0) responseI[472987]=0; //assymetric
if (responseI[472987] != vnodeI[923]) parityerrors++;
parity=0;
parity+=vnodeI[378];
parity+=vnodeI[480];
parity+=vnodeI[484];
parity+=vnodeI[924];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78748]=parity;
if (cwI[153]==0) responseI[78748]=0; //assymetric
if (responseI[78748] != vnodeI[153]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[480];
parity+=vnodeI[484];
parity+=vnodeI[924];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[193948]=parity;
if (cwI[378]==0) responseI[193948]=0; //assymetric
if (responseI[193948] != vnodeI[378]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[378];
parity+=vnodeI[484];
parity+=vnodeI[924];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[246172]=parity;
if (cwI[480]==0) responseI[246172]=0; //assymetric
if (responseI[246172] != vnodeI[480]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[378];
parity+=vnodeI[480];
parity+=vnodeI[924];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[248220]=parity;
if (cwI[484]==0) responseI[248220]=0; //assymetric
if (responseI[248220] != vnodeI[484]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[378];
parity+=vnodeI[480];
parity+=vnodeI[484];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[473500]=parity;
if (cwI[924]==0) responseI[473500]=0; //assymetric
if (responseI[473500] != vnodeI[924]) parityerrors++;
parity=0;
parity+=vnodeI[135];
parity+=vnodeI[260];
parity+=vnodeI[390];
parity+=vnodeI[925];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60829]=parity;
if (cwI[118]==0) responseI[60829]=0; //assymetric
if (responseI[60829] != vnodeI[118]) parityerrors++;
parity=0;
parity+=vnodeI[118];
parity+=vnodeI[260];
parity+=vnodeI[390];
parity+=vnodeI[925];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[69533]=parity;
if (cwI[135]==0) responseI[69533]=0; //assymetric
if (responseI[69533] != vnodeI[135]) parityerrors++;
parity=0;
parity+=vnodeI[118];
parity+=vnodeI[135];
parity+=vnodeI[390];
parity+=vnodeI[925];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133533]=parity;
if (cwI[260]==0) responseI[133533]=0; //assymetric
if (responseI[133533] != vnodeI[260]) parityerrors++;
parity=0;
parity+=vnodeI[118];
parity+=vnodeI[135];
parity+=vnodeI[260];
parity+=vnodeI[925];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200093]=parity;
if (cwI[390]==0) responseI[200093]=0; //assymetric
if (responseI[200093] != vnodeI[390]) parityerrors++;
parity=0;
parity+=vnodeI[118];
parity+=vnodeI[135];
parity+=vnodeI[260];
parity+=vnodeI[390];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[474013]=parity;
if (cwI[925]==0) responseI[474013]=0; //assymetric
if (responseI[474013] != vnodeI[925]) parityerrors++;
parity=0;
parity+=vnodeI[170];
parity+=vnodeI[323];
parity+=vnodeI[441];
parity+=vnodeI[926];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39326]=parity;
if (cwI[76]==0) responseI[39326]=0; //assymetric
if (responseI[39326] != vnodeI[76]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[323];
parity+=vnodeI[441];
parity+=vnodeI[926];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87454]=parity;
if (cwI[170]==0) responseI[87454]=0; //assymetric
if (responseI[87454] != vnodeI[170]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[170];
parity+=vnodeI[441];
parity+=vnodeI[926];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[165790]=parity;
if (cwI[323]==0) responseI[165790]=0; //assymetric
if (responseI[165790] != vnodeI[323]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[170];
parity+=vnodeI[323];
parity+=vnodeI[926];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226206]=parity;
if (cwI[441]==0) responseI[226206]=0; //assymetric
if (responseI[226206] != vnodeI[441]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[170];
parity+=vnodeI[323];
parity+=vnodeI[441];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[474526]=parity;
if (cwI[926]==0) responseI[474526]=0; //assymetric
if (responseI[474526] != vnodeI[926]) parityerrors++;
parity=0;
parity+=vnodeI[248];
parity+=vnodeI[321];
parity+=vnodeI[414];
parity+=vnodeI[927];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73631]=parity;
if (cwI[143]==0) responseI[73631]=0; //assymetric
if (responseI[73631] != vnodeI[143]) parityerrors++;
parity=0;
parity+=vnodeI[143];
parity+=vnodeI[321];
parity+=vnodeI[414];
parity+=vnodeI[927];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127391]=parity;
if (cwI[248]==0) responseI[127391]=0; //assymetric
if (responseI[127391] != vnodeI[248]) parityerrors++;
parity=0;
parity+=vnodeI[143];
parity+=vnodeI[248];
parity+=vnodeI[414];
parity+=vnodeI[927];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164767]=parity;
if (cwI[321]==0) responseI[164767]=0; //assymetric
if (responseI[164767] != vnodeI[321]) parityerrors++;
parity=0;
parity+=vnodeI[143];
parity+=vnodeI[248];
parity+=vnodeI[321];
parity+=vnodeI[927];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212383]=parity;
if (cwI[414]==0) responseI[212383]=0; //assymetric
if (responseI[212383] != vnodeI[414]) parityerrors++;
parity=0;
parity+=vnodeI[143];
parity+=vnodeI[248];
parity+=vnodeI[321];
parity+=vnodeI[414];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[475039]=parity;
if (cwI[927]==0) responseI[475039]=0; //assymetric
if (responseI[475039] != vnodeI[927]) parityerrors++;
parity=0;
parity+=vnodeI[85];
parity+=vnodeI[213];
parity+=vnodeI[294];
parity+=vnodeI[928];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23968]=parity;
if (cwI[46]==0) responseI[23968]=0; //assymetric
if (responseI[23968] != vnodeI[46]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[213];
parity+=vnodeI[294];
parity+=vnodeI[928];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43936]=parity;
if (cwI[85]==0) responseI[43936]=0; //assymetric
if (responseI[43936] != vnodeI[85]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[85];
parity+=vnodeI[294];
parity+=vnodeI[928];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[109472]=parity;
if (cwI[213]==0) responseI[109472]=0; //assymetric
if (responseI[109472] != vnodeI[213]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[85];
parity+=vnodeI[213];
parity+=vnodeI[928];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150944]=parity;
if (cwI[294]==0) responseI[150944]=0; //assymetric
if (responseI[150944] != vnodeI[294]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[85];
parity+=vnodeI[213];
parity+=vnodeI[294];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[475552]=parity;
if (cwI[928]==0) responseI[475552]=0; //assymetric
if (responseI[475552] != vnodeI[928]) parityerrors++;
parity=0;
parity+=vnodeI[324];
parity+=vnodeI[349];
parity+=vnodeI[402];
parity+=vnodeI[929];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105889]=parity;
if (cwI[206]==0) responseI[105889]=0; //assymetric
if (responseI[105889] != vnodeI[206]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[349];
parity+=vnodeI[402];
parity+=vnodeI[929];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166305]=parity;
if (cwI[324]==0) responseI[166305]=0; //assymetric
if (responseI[166305] != vnodeI[324]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[324];
parity+=vnodeI[402];
parity+=vnodeI[929];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[179105]=parity;
if (cwI[349]==0) responseI[179105]=0; //assymetric
if (responseI[179105] != vnodeI[349]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[324];
parity+=vnodeI[349];
parity+=vnodeI[929];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206241]=parity;
if (cwI[402]==0) responseI[206241]=0; //assymetric
if (responseI[206241] != vnodeI[402]) parityerrors++;
parity=0;
parity+=vnodeI[206];
parity+=vnodeI[324];
parity+=vnodeI[349];
parity+=vnodeI[402];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[476065]=parity;
if (cwI[929]==0) responseI[476065]=0; //assymetric
if (responseI[476065] != vnodeI[929]) parityerrors++;
parity=0;
parity+=vnodeI[120];
parity+=vnodeI[239];
parity+=vnodeI[399];
parity+=vnodeI[930];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25506]=parity;
if (cwI[49]==0) responseI[25506]=0; //assymetric
if (responseI[25506] != vnodeI[49]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[239];
parity+=vnodeI[399];
parity+=vnodeI[930];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61858]=parity;
if (cwI[120]==0) responseI[61858]=0; //assymetric
if (responseI[61858] != vnodeI[120]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[120];
parity+=vnodeI[399];
parity+=vnodeI[930];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122786]=parity;
if (cwI[239]==0) responseI[122786]=0; //assymetric
if (responseI[122786] != vnodeI[239]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[120];
parity+=vnodeI[239];
parity+=vnodeI[930];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204706]=parity;
if (cwI[399]==0) responseI[204706]=0; //assymetric
if (responseI[204706] != vnodeI[399]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[120];
parity+=vnodeI[239];
parity+=vnodeI[399];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[476578]=parity;
if (cwI[930]==0) responseI[476578]=0; //assymetric
if (responseI[476578] != vnodeI[930]) parityerrors++;
parity=0;
parity+=vnodeI[435];
parity+=vnodeI[463];
parity+=vnodeI[501];
parity+=vnodeI[931];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48547]=parity;
if (cwI[94]==0) responseI[48547]=0; //assymetric
if (responseI[48547] != vnodeI[94]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[463];
parity+=vnodeI[501];
parity+=vnodeI[931];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[223139]=parity;
if (cwI[435]==0) responseI[223139]=0; //assymetric
if (responseI[223139] != vnodeI[435]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[435];
parity+=vnodeI[501];
parity+=vnodeI[931];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[237475]=parity;
if (cwI[463]==0) responseI[237475]=0; //assymetric
if (responseI[237475] != vnodeI[463]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[435];
parity+=vnodeI[463];
parity+=vnodeI[931];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[256931]=parity;
if (cwI[501]==0) responseI[256931]=0; //assymetric
if (responseI[256931] != vnodeI[501]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[435];
parity+=vnodeI[463];
parity+=vnodeI[501];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[477091]=parity;
if (cwI[931]==0) responseI[477091]=0; //assymetric
if (responseI[477091] != vnodeI[931]) parityerrors++;
parity=0;
parity+=vnodeI[388];
parity+=vnodeI[394];
parity+=vnodeI[468];
parity+=vnodeI[932];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[420]=parity;
if (cwI[0]==0) responseI[420]=0; //assymetric
if (responseI[420] != vnodeI[0]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[394];
parity+=vnodeI[468];
parity+=vnodeI[932];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[199076]=parity;
if (cwI[388]==0) responseI[199076]=0; //assymetric
if (responseI[199076] != vnodeI[388]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[388];
parity+=vnodeI[468];
parity+=vnodeI[932];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[202148]=parity;
if (cwI[394]==0) responseI[202148]=0; //assymetric
if (responseI[202148] != vnodeI[394]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[388];
parity+=vnodeI[394];
parity+=vnodeI[932];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240036]=parity;
if (cwI[468]==0) responseI[240036]=0; //assymetric
if (responseI[240036] != vnodeI[468]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[388];
parity+=vnodeI[394];
parity+=vnodeI[468];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[477604]=parity;
if (cwI[932]==0) responseI[477604]=0; //assymetric
if (responseI[477604] != vnodeI[932]) parityerrors++;
parity=0;
parity+=vnodeI[267];
parity+=vnodeI[306];
parity+=vnodeI[475];
parity+=vnodeI[933];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[11173]=parity;
if (cwI[21]==0) responseI[11173]=0; //assymetric
if (responseI[11173] != vnodeI[21]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[306];
parity+=vnodeI[475];
parity+=vnodeI[933];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[137125]=parity;
if (cwI[267]==0) responseI[137125]=0; //assymetric
if (responseI[137125] != vnodeI[267]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[267];
parity+=vnodeI[475];
parity+=vnodeI[933];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[157093]=parity;
if (cwI[306]==0) responseI[157093]=0; //assymetric
if (responseI[157093] != vnodeI[306]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[267];
parity+=vnodeI[306];
parity+=vnodeI[933];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243621]=parity;
if (cwI[475]==0) responseI[243621]=0; //assymetric
if (responseI[243621] != vnodeI[475]) parityerrors++;
parity=0;
parity+=vnodeI[21];
parity+=vnodeI[267];
parity+=vnodeI[306];
parity+=vnodeI[475];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[478117]=parity;
if (cwI[933]==0) responseI[478117]=0; //assymetric
if (responseI[478117] != vnodeI[933]) parityerrors++;
parity=0;
parity+=vnodeI[145];
parity+=vnodeI[172];
parity+=vnodeI[406];
parity+=vnodeI[934];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18342]=parity;
if (cwI[35]==0) responseI[18342]=0; //assymetric
if (responseI[18342] != vnodeI[35]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[172];
parity+=vnodeI[406];
parity+=vnodeI[934];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[74662]=parity;
if (cwI[145]==0) responseI[74662]=0; //assymetric
if (responseI[74662] != vnodeI[145]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[145];
parity+=vnodeI[406];
parity+=vnodeI[934];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88486]=parity;
if (cwI[172]==0) responseI[88486]=0; //assymetric
if (responseI[88486] != vnodeI[172]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[145];
parity+=vnodeI[172];
parity+=vnodeI[934];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208294]=parity;
if (cwI[406]==0) responseI[208294]=0; //assymetric
if (responseI[208294] != vnodeI[406]) parityerrors++;
parity=0;
parity+=vnodeI[35];
parity+=vnodeI[145];
parity+=vnodeI[172];
parity+=vnodeI[406];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[478630]=parity;
if (cwI[934]==0) responseI[478630]=0; //assymetric
if (responseI[478630] != vnodeI[934]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[351];
parity+=vnodeI[503];
parity+=vnodeI[935];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2471]=parity;
if (cwI[4]==0) responseI[2471]=0; //assymetric
if (responseI[2471] != vnodeI[4]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[351];
parity+=vnodeI[503];
parity+=vnodeI[935];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10151]=parity;
if (cwI[19]==0) responseI[10151]=0; //assymetric
if (responseI[10151] != vnodeI[19]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[19];
parity+=vnodeI[503];
parity+=vnodeI[935];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180135]=parity;
if (cwI[351]==0) responseI[180135]=0; //assymetric
if (responseI[180135] != vnodeI[351]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[19];
parity+=vnodeI[351];
parity+=vnodeI[935];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257959]=parity;
if (cwI[503]==0) responseI[257959]=0; //assymetric
if (responseI[257959] != vnodeI[503]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[19];
parity+=vnodeI[351];
parity+=vnodeI[503];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[479143]=parity;
if (cwI[935]==0) responseI[479143]=0; //assymetric
if (responseI[479143] != vnodeI[935]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[232];
parity+=vnodeI[441];
parity+=vnodeI[936];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36264]=parity;
if (cwI[70]==0) responseI[36264]=0; //assymetric
if (responseI[36264] != vnodeI[70]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[232];
parity+=vnodeI[441];
parity+=vnodeI[936];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63912]=parity;
if (cwI[124]==0) responseI[63912]=0; //assymetric
if (responseI[63912] != vnodeI[124]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[124];
parity+=vnodeI[441];
parity+=vnodeI[936];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119208]=parity;
if (cwI[232]==0) responseI[119208]=0; //assymetric
if (responseI[119208] != vnodeI[232]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[124];
parity+=vnodeI[232];
parity+=vnodeI[936];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226216]=parity;
if (cwI[441]==0) responseI[226216]=0; //assymetric
if (responseI[226216] != vnodeI[441]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[124];
parity+=vnodeI[232];
parity+=vnodeI[441];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[479656]=parity;
if (cwI[936]==0) responseI[479656]=0; //assymetric
if (responseI[479656] != vnodeI[936]) parityerrors++;
parity=0;
parity+=vnodeI[71];
parity+=vnodeI[180];
parity+=vnodeI[192];
parity+=vnodeI[452];
parity+=vnodeI[937];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19881]=parity;
if (cwI[38]==0) responseI[19881]=0; //assymetric
if (responseI[19881] != vnodeI[38]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[180];
parity+=vnodeI[192];
parity+=vnodeI[452];
parity+=vnodeI[937];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36777]=parity;
if (cwI[71]==0) responseI[36777]=0; //assymetric
if (responseI[36777] != vnodeI[71]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[71];
parity+=vnodeI[192];
parity+=vnodeI[452];
parity+=vnodeI[937];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92585]=parity;
if (cwI[180]==0) responseI[92585]=0; //assymetric
if (responseI[92585] != vnodeI[180]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[71];
parity+=vnodeI[180];
parity+=vnodeI[452];
parity+=vnodeI[937];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[98729]=parity;
if (cwI[192]==0) responseI[98729]=0; //assymetric
if (responseI[98729] != vnodeI[192]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[71];
parity+=vnodeI[180];
parity+=vnodeI[192];
parity+=vnodeI[937];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231849]=parity;
if (cwI[452]==0) responseI[231849]=0; //assymetric
if (responseI[231849] != vnodeI[452]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[71];
parity+=vnodeI[180];
parity+=vnodeI[192];
parity+=vnodeI[452];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[480169]=parity;
if (cwI[937]==0) responseI[480169]=0; //assymetric
if (responseI[480169] != vnodeI[937]) parityerrors++;
parity=0;
parity+=vnodeI[211];
parity+=vnodeI[227];
parity+=vnodeI[452];
parity+=vnodeI[938];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33194]=parity;
if (cwI[64]==0) responseI[33194]=0; //assymetric
if (responseI[33194] != vnodeI[64]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[227];
parity+=vnodeI[452];
parity+=vnodeI[938];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[108458]=parity;
if (cwI[211]==0) responseI[108458]=0; //assymetric
if (responseI[108458] != vnodeI[211]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[211];
parity+=vnodeI[452];
parity+=vnodeI[938];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[116650]=parity;
if (cwI[227]==0) responseI[116650]=0; //assymetric
if (responseI[116650] != vnodeI[227]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[211];
parity+=vnodeI[227];
parity+=vnodeI[938];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231850]=parity;
if (cwI[452]==0) responseI[231850]=0; //assymetric
if (responseI[231850] != vnodeI[452]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[211];
parity+=vnodeI[227];
parity+=vnodeI[452];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[480682]=parity;
if (cwI[938]==0) responseI[480682]=0; //assymetric
if (responseI[480682] != vnodeI[938]) parityerrors++;
parity=0;
parity+=vnodeI[76];
parity+=vnodeI[317];
parity+=vnodeI[482];
parity+=vnodeI[939];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5035]=parity;
if (cwI[9]==0) responseI[5035]=0; //assymetric
if (responseI[5035] != vnodeI[9]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[317];
parity+=vnodeI[482];
parity+=vnodeI[939];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[39339]=parity;
if (cwI[76]==0) responseI[39339]=0; //assymetric
if (responseI[39339] != vnodeI[76]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[76];
parity+=vnodeI[482];
parity+=vnodeI[939];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162731]=parity;
if (cwI[317]==0) responseI[162731]=0; //assymetric
if (responseI[162731] != vnodeI[317]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[76];
parity+=vnodeI[317];
parity+=vnodeI[939];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247211]=parity;
if (cwI[482]==0) responseI[247211]=0; //assymetric
if (responseI[247211] != vnodeI[482]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[76];
parity+=vnodeI[317];
parity+=vnodeI[482];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[481195]=parity;
if (cwI[939]==0) responseI[481195]=0; //assymetric
if (responseI[481195] != vnodeI[939]) parityerrors++;
parity=0;
parity+=vnodeI[40];
parity+=vnodeI[73];
parity+=vnodeI[254];
parity+=vnodeI[940];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1964]=parity;
if (cwI[3]==0) responseI[1964]=0; //assymetric
if (responseI[1964] != vnodeI[3]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[73];
parity+=vnodeI[254];
parity+=vnodeI[940];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[20908]=parity;
if (cwI[40]==0) responseI[20908]=0; //assymetric
if (responseI[20908] != vnodeI[40]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[40];
parity+=vnodeI[254];
parity+=vnodeI[940];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37804]=parity;
if (cwI[73]==0) responseI[37804]=0; //assymetric
if (responseI[37804] != vnodeI[73]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[40];
parity+=vnodeI[73];
parity+=vnodeI[940];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[130476]=parity;
if (cwI[254]==0) responseI[130476]=0; //assymetric
if (responseI[130476] != vnodeI[254]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[40];
parity+=vnodeI[73];
parity+=vnodeI[254];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[481708]=parity;
if (cwI[940]==0) responseI[481708]=0; //assymetric
if (responseI[481708] != vnodeI[940]) parityerrors++;
parity=0;
parity+=vnodeI[69];
parity+=vnodeI[193];
parity+=vnodeI[199];
parity+=vnodeI[941];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17837]=parity;
if (cwI[34]==0) responseI[17837]=0; //assymetric
if (responseI[17837] != vnodeI[34]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[193];
parity+=vnodeI[199];
parity+=vnodeI[941];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[35757]=parity;
if (cwI[69]==0) responseI[35757]=0; //assymetric
if (responseI[35757] != vnodeI[69]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[69];
parity+=vnodeI[199];
parity+=vnodeI[941];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99245]=parity;
if (cwI[193]==0) responseI[99245]=0; //assymetric
if (responseI[99245] != vnodeI[193]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[69];
parity+=vnodeI[193];
parity+=vnodeI[941];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102317]=parity;
if (cwI[199]==0) responseI[102317]=0; //assymetric
if (responseI[102317] != vnodeI[199]) parityerrors++;
parity=0;
parity+=vnodeI[34];
parity+=vnodeI[69];
parity+=vnodeI[193];
parity+=vnodeI[199];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[482221]=parity;
if (cwI[941]==0) responseI[482221]=0; //assymetric
if (responseI[482221] != vnodeI[941]) parityerrors++;
parity=0;
parity+=vnodeI[180];
parity+=vnodeI[193];
parity+=vnodeI[503];
parity+=vnodeI[942];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6574]=parity;
if (cwI[12]==0) responseI[6574]=0; //assymetric
if (responseI[6574] != vnodeI[12]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[193];
parity+=vnodeI[503];
parity+=vnodeI[942];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92590]=parity;
if (cwI[180]==0) responseI[92590]=0; //assymetric
if (responseI[92590] != vnodeI[180]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[180];
parity+=vnodeI[503];
parity+=vnodeI[942];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99246]=parity;
if (cwI[193]==0) responseI[99246]=0; //assymetric
if (responseI[99246] != vnodeI[193]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[180];
parity+=vnodeI[193];
parity+=vnodeI[942];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[257966]=parity;
if (cwI[503]==0) responseI[257966]=0; //assymetric
if (responseI[257966] != vnodeI[503]) parityerrors++;
parity=0;
parity+=vnodeI[12];
parity+=vnodeI[180];
parity+=vnodeI[193];
parity+=vnodeI[503];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[482734]=parity;
if (cwI[942]==0) responseI[482734]=0; //assymetric
if (responseI[482734] != vnodeI[942]) parityerrors++;
parity=0;
parity+=vnodeI[108];
parity+=vnodeI[225];
parity+=vnodeI[312];
parity+=vnodeI[442];
parity+=vnodeI[943];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2479]=parity;
if (cwI[4]==0) responseI[2479]=0; //assymetric
if (responseI[2479] != vnodeI[4]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[225];
parity+=vnodeI[312];
parity+=vnodeI[442];
parity+=vnodeI[943];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[55727]=parity;
if (cwI[108]==0) responseI[55727]=0; //assymetric
if (responseI[55727] != vnodeI[108]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[108];
parity+=vnodeI[312];
parity+=vnodeI[442];
parity+=vnodeI[943];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115631]=parity;
if (cwI[225]==0) responseI[115631]=0; //assymetric
if (responseI[115631] != vnodeI[225]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[108];
parity+=vnodeI[225];
parity+=vnodeI[442];
parity+=vnodeI[943];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[160175]=parity;
if (cwI[312]==0) responseI[160175]=0; //assymetric
if (responseI[160175] != vnodeI[312]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[108];
parity+=vnodeI[225];
parity+=vnodeI[312];
parity+=vnodeI[943];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[226735]=parity;
if (cwI[442]==0) responseI[226735]=0; //assymetric
if (responseI[226735] != vnodeI[442]) parityerrors++;
parity=0;
parity+=vnodeI[4];
parity+=vnodeI[108];
parity+=vnodeI[225];
parity+=vnodeI[312];
parity+=vnodeI[442];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[483247]=parity;
if (cwI[943]==0) responseI[483247]=0; //assymetric
if (responseI[483247] != vnodeI[943]) parityerrors++;
parity=0;
parity+=vnodeI[72];
parity+=vnodeI[85];
parity+=vnodeI[944];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[17328]=parity;
if (cwI[33]==0) responseI[17328]=0; //assymetric
if (responseI[17328] != vnodeI[33]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[85];
parity+=vnodeI[944];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[37296]=parity;
if (cwI[72]==0) responseI[37296]=0; //assymetric
if (responseI[37296] != vnodeI[72]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[72];
parity+=vnodeI[944];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[43952]=parity;
if (cwI[85]==0) responseI[43952]=0; //assymetric
if (responseI[43952] != vnodeI[85]) parityerrors++;
parity=0;
parity+=vnodeI[33];
parity+=vnodeI[72];
parity+=vnodeI[85];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[483760]=parity;
if (cwI[944]==0) responseI[483760]=0; //assymetric
if (responseI[483760] != vnodeI[944]) parityerrors++;
parity=0;
parity+=vnodeI[52];
parity+=vnodeI[129];
parity+=vnodeI[240];
parity+=vnodeI[945];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14257]=parity;
if (cwI[27]==0) responseI[14257]=0; //assymetric
if (responseI[14257] != vnodeI[27]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[129];
parity+=vnodeI[240];
parity+=vnodeI[945];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[27057]=parity;
if (cwI[52]==0) responseI[27057]=0; //assymetric
if (responseI[27057] != vnodeI[52]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[52];
parity+=vnodeI[240];
parity+=vnodeI[945];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66481]=parity;
if (cwI[129]==0) responseI[66481]=0; //assymetric
if (responseI[66481] != vnodeI[129]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[52];
parity+=vnodeI[129];
parity+=vnodeI[945];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123313]=parity;
if (cwI[240]==0) responseI[123313]=0; //assymetric
if (responseI[123313] != vnodeI[240]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[52];
parity+=vnodeI[129];
parity+=vnodeI[240];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[484273]=parity;
if (cwI[945]==0) responseI[484273]=0; //assymetric
if (responseI[484273] != vnodeI[945]) parityerrors++;
parity=0;
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[266];
parity+=vnodeI[946];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5042]=parity;
if (cwI[9]==0) responseI[5042]=0; //assymetric
if (responseI[5042] != vnodeI[9]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[183];
parity+=vnodeI[266];
parity+=vnodeI[946];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[60338]=parity;
if (cwI[117]==0) responseI[60338]=0; //assymetric
if (responseI[60338] != vnodeI[117]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[117];
parity+=vnodeI[266];
parity+=vnodeI[946];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[94130]=parity;
if (cwI[183]==0) responseI[94130]=0; //assymetric
if (responseI[94130] != vnodeI[183]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[946];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136626]=parity;
if (cwI[266]==0) responseI[136626]=0; //assymetric
if (responseI[136626] != vnodeI[266]) parityerrors++;
parity=0;
parity+=vnodeI[9];
parity+=vnodeI[117];
parity+=vnodeI[183];
parity+=vnodeI[266];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[484786]=parity;
if (cwI[946]==0) responseI[484786]=0; //assymetric
if (responseI[484786] != vnodeI[946]) parityerrors++;
parity=0;
parity+=vnodeI[391];
parity+=vnodeI[451];
parity+=vnodeI[475];
parity+=vnodeI[947];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196019]=parity;
if (cwI[382]==0) responseI[196019]=0; //assymetric
if (responseI[196019] != vnodeI[382]) parityerrors++;
parity=0;
parity+=vnodeI[382];
parity+=vnodeI[451];
parity+=vnodeI[475];
parity+=vnodeI[947];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200627]=parity;
if (cwI[391]==0) responseI[200627]=0; //assymetric
if (responseI[200627] != vnodeI[391]) parityerrors++;
parity=0;
parity+=vnodeI[382];
parity+=vnodeI[391];
parity+=vnodeI[475];
parity+=vnodeI[947];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231347]=parity;
if (cwI[451]==0) responseI[231347]=0; //assymetric
if (responseI[231347] != vnodeI[451]) parityerrors++;
parity=0;
parity+=vnodeI[382];
parity+=vnodeI[391];
parity+=vnodeI[451];
parity+=vnodeI[947];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243635]=parity;
if (cwI[475]==0) responseI[243635]=0; //assymetric
if (responseI[243635] != vnodeI[475]) parityerrors++;
parity=0;
parity+=vnodeI[382];
parity+=vnodeI[391];
parity+=vnodeI[451];
parity+=vnodeI[475];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[485299]=parity;
if (cwI[947]==0) responseI[485299]=0; //assymetric
if (responseI[485299] != vnodeI[947]) parityerrors++;
parity=0;
parity+=vnodeI[114];
parity+=vnodeI[158];
parity+=vnodeI[326];
parity+=vnodeI[948];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[33204]=parity;
if (cwI[64]==0) responseI[33204]=0; //assymetric
if (responseI[33204] != vnodeI[64]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[158];
parity+=vnodeI[326];
parity+=vnodeI[948];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58804]=parity;
if (cwI[114]==0) responseI[58804]=0; //assymetric
if (responseI[58804] != vnodeI[114]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[114];
parity+=vnodeI[326];
parity+=vnodeI[948];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81332]=parity;
if (cwI[158]==0) responseI[81332]=0; //assymetric
if (responseI[81332] != vnodeI[158]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[114];
parity+=vnodeI[158];
parity+=vnodeI[948];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167348]=parity;
if (cwI[326]==0) responseI[167348]=0; //assymetric
if (responseI[167348] != vnodeI[326]) parityerrors++;
parity=0;
parity+=vnodeI[64];
parity+=vnodeI[114];
parity+=vnodeI[158];
parity+=vnodeI[326];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[485812]=parity;
if (cwI[948]==0) responseI[485812]=0; //assymetric
if (responseI[485812] != vnodeI[948]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[155];
parity+=vnodeI[256];
parity+=vnodeI[318];
parity+=vnodeI[949];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[9141]=parity;
if (cwI[17]==0) responseI[9141]=0; //assymetric
if (responseI[9141] != vnodeI[17]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[155];
parity+=vnodeI[256];
parity+=vnodeI[318];
parity+=vnodeI[949];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70581]=parity;
if (cwI[137]==0) responseI[70581]=0; //assymetric
if (responseI[70581] != vnodeI[137]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[137];
parity+=vnodeI[256];
parity+=vnodeI[318];
parity+=vnodeI[949];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79797]=parity;
if (cwI[155]==0) responseI[79797]=0; //assymetric
if (responseI[79797] != vnodeI[155]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[137];
parity+=vnodeI[155];
parity+=vnodeI[318];
parity+=vnodeI[949];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131509]=parity;
if (cwI[256]==0) responseI[131509]=0; //assymetric
if (responseI[131509] != vnodeI[256]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[137];
parity+=vnodeI[155];
parity+=vnodeI[256];
parity+=vnodeI[949];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[163253]=parity;
if (cwI[318]==0) responseI[163253]=0; //assymetric
if (responseI[163253] != vnodeI[318]) parityerrors++;
parity=0;
parity+=vnodeI[17];
parity+=vnodeI[137];
parity+=vnodeI[155];
parity+=vnodeI[256];
parity+=vnodeI[318];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[486325]=parity;
if (cwI[949]==0) responseI[486325]=0; //assymetric
if (responseI[486325] != vnodeI[949]) parityerrors++;
parity=0;
parity+=vnodeI[317];
parity+=vnodeI[387];
parity+=vnodeI[437];
parity+=vnodeI[950];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77750]=parity;
if (cwI[151]==0) responseI[77750]=0; //assymetric
if (responseI[77750] != vnodeI[151]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[387];
parity+=vnodeI[437];
parity+=vnodeI[950];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162742]=parity;
if (cwI[317]==0) responseI[162742]=0; //assymetric
if (responseI[162742] != vnodeI[317]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[317];
parity+=vnodeI[437];
parity+=vnodeI[950];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198582]=parity;
if (cwI[387]==0) responseI[198582]=0; //assymetric
if (responseI[198582] != vnodeI[387]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[317];
parity+=vnodeI[387];
parity+=vnodeI[950];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[224182]=parity;
if (cwI[437]==0) responseI[224182]=0; //assymetric
if (responseI[224182] != vnodeI[437]) parityerrors++;
parity=0;
parity+=vnodeI[151];
parity+=vnodeI[317];
parity+=vnodeI[387];
parity+=vnodeI[437];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[486838]=parity;
if (cwI[950]==0) responseI[486838]=0; //assymetric
if (responseI[486838] != vnodeI[950]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[279];
parity+=vnodeI[383];
parity+=vnodeI[951];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[18871]=parity;
if (cwI[36]==0) responseI[18871]=0; //assymetric
if (responseI[18871] != vnodeI[36]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[279];
parity+=vnodeI[383];
parity+=vnodeI[951];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66487]=parity;
if (cwI[129]==0) responseI[66487]=0; //assymetric
if (responseI[66487] != vnodeI[129]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[129];
parity+=vnodeI[383];
parity+=vnodeI[951];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143287]=parity;
if (cwI[279]==0) responseI[143287]=0; //assymetric
if (responseI[143287] != vnodeI[279]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[129];
parity+=vnodeI[279];
parity+=vnodeI[951];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196535]=parity;
if (cwI[383]==0) responseI[196535]=0; //assymetric
if (responseI[196535] != vnodeI[383]) parityerrors++;
parity=0;
parity+=vnodeI[36];
parity+=vnodeI[129];
parity+=vnodeI[279];
parity+=vnodeI[383];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[487351]=parity;
if (cwI[951]==0) responseI[487351]=0; //assymetric
if (responseI[487351] != vnodeI[951]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[270];
parity+=vnodeI[309];
parity+=vnodeI[952];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1464]=parity;
if (cwI[2]==0) responseI[1464]=0; //assymetric
if (responseI[1464] != vnodeI[2]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[270];
parity+=vnodeI[309];
parity+=vnodeI[952];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65464]=parity;
if (cwI[127]==0) responseI[65464]=0; //assymetric
if (responseI[65464] != vnodeI[127]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[127];
parity+=vnodeI[309];
parity+=vnodeI[952];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[138680]=parity;
if (cwI[270]==0) responseI[138680]=0; //assymetric
if (responseI[138680] != vnodeI[270]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[127];
parity+=vnodeI[270];
parity+=vnodeI[952];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[158648]=parity;
if (cwI[309]==0) responseI[158648]=0; //assymetric
if (responseI[158648] != vnodeI[309]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[127];
parity+=vnodeI[270];
parity+=vnodeI[309];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[487864]=parity;
if (cwI[952]==0) responseI[487864]=0; //assymetric
if (responseI[487864] != vnodeI[952]) parityerrors++;
parity=0;
parity+=vnodeI[122];
parity+=vnodeI[266];
parity+=vnodeI[315];
parity+=vnodeI[953];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42425]=parity;
if (cwI[82]==0) responseI[42425]=0; //assymetric
if (responseI[42425] != vnodeI[82]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[266];
parity+=vnodeI[315];
parity+=vnodeI[953];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[62905]=parity;
if (cwI[122]==0) responseI[62905]=0; //assymetric
if (responseI[62905] != vnodeI[122]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[122];
parity+=vnodeI[315];
parity+=vnodeI[953];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[136633]=parity;
if (cwI[266]==0) responseI[136633]=0; //assymetric
if (responseI[136633] != vnodeI[266]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[122];
parity+=vnodeI[266];
parity+=vnodeI[953];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161721]=parity;
if (cwI[315]==0) responseI[161721]=0; //assymetric
if (responseI[161721] != vnodeI[315]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[122];
parity+=vnodeI[266];
parity+=vnodeI[315];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[488377]=parity;
if (cwI[953]==0) responseI[488377]=0; //assymetric
if (responseI[488377] != vnodeI[953]) parityerrors++;
parity=0;
parity+=vnodeI[144];
parity+=vnodeI[159];
parity+=vnodeI[451];
parity+=vnodeI[954];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25530]=parity;
if (cwI[49]==0) responseI[25530]=0; //assymetric
if (responseI[25530] != vnodeI[49]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[159];
parity+=vnodeI[451];
parity+=vnodeI[954];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[74170]=parity;
if (cwI[144]==0) responseI[74170]=0; //assymetric
if (responseI[74170] != vnodeI[144]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[144];
parity+=vnodeI[451];
parity+=vnodeI[954];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81850]=parity;
if (cwI[159]==0) responseI[81850]=0; //assymetric
if (responseI[81850] != vnodeI[159]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[144];
parity+=vnodeI[159];
parity+=vnodeI[954];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[231354]=parity;
if (cwI[451]==0) responseI[231354]=0; //assymetric
if (responseI[231354] != vnodeI[451]) parityerrors++;
parity=0;
parity+=vnodeI[49];
parity+=vnodeI[144];
parity+=vnodeI[159];
parity+=vnodeI[451];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[488890]=parity;
if (cwI[954]==0) responseI[488890]=0; //assymetric
if (responseI[488890] != vnodeI[954]) parityerrors++;
parity=0;
parity+=vnodeI[191];
parity+=vnodeI[416];
parity+=vnodeI[420];
parity+=vnodeI[955];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[50619]=parity;
if (cwI[98]==0) responseI[50619]=0; //assymetric
if (responseI[50619] != vnodeI[98]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[416];
parity+=vnodeI[420];
parity+=vnodeI[955];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[98235]=parity;
if (cwI[191]==0) responseI[98235]=0; //assymetric
if (responseI[98235] != vnodeI[191]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[191];
parity+=vnodeI[420];
parity+=vnodeI[955];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213435]=parity;
if (cwI[416]==0) responseI[213435]=0; //assymetric
if (responseI[213435] != vnodeI[416]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[191];
parity+=vnodeI[416];
parity+=vnodeI[955];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215483]=parity;
if (cwI[420]==0) responseI[215483]=0; //assymetric
if (responseI[215483] != vnodeI[420]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[191];
parity+=vnodeI[416];
parity+=vnodeI[420];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[489403]=parity;
if (cwI[955]==0) responseI[489403]=0; //assymetric
if (responseI[489403] != vnodeI[955]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[287];
parity+=vnodeI[330];
parity+=vnodeI[956];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97724]=parity;
if (cwI[190]==0) responseI[97724]=0; //assymetric
if (responseI[97724] != vnodeI[190]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[287];
parity+=vnodeI[330];
parity+=vnodeI[956];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119228]=parity;
if (cwI[232]==0) responseI[119228]=0; //assymetric
if (responseI[119228] != vnodeI[232]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[232];
parity+=vnodeI[330];
parity+=vnodeI[956];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[147388]=parity;
if (cwI[287]==0) responseI[147388]=0; //assymetric
if (responseI[147388] != vnodeI[287]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[232];
parity+=vnodeI[287];
parity+=vnodeI[956];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169404]=parity;
if (cwI[330]==0) responseI[169404]=0; //assymetric
if (responseI[169404] != vnodeI[330]) parityerrors++;
parity=0;
parity+=vnodeI[190];
parity+=vnodeI[232];
parity+=vnodeI[287];
parity+=vnodeI[330];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[489916]=parity;
if (cwI[956]==0) responseI[489916]=0; //assymetric
if (responseI[489916] != vnodeI[956]) parityerrors++;
parity=0;
parity+=vnodeI[86];
parity+=vnodeI[219];
parity+=vnodeI[493];
parity+=vnodeI[957];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38333]=parity;
if (cwI[74]==0) responseI[38333]=0; //assymetric
if (responseI[38333] != vnodeI[74]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[219];
parity+=vnodeI[493];
parity+=vnodeI[957];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44477]=parity;
if (cwI[86]==0) responseI[44477]=0; //assymetric
if (responseI[44477] != vnodeI[86]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[86];
parity+=vnodeI[493];
parity+=vnodeI[957];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112573]=parity;
if (cwI[219]==0) responseI[112573]=0; //assymetric
if (responseI[112573] != vnodeI[219]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[86];
parity+=vnodeI[219];
parity+=vnodeI[957];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252861]=parity;
if (cwI[493]==0) responseI[252861]=0; //assymetric
if (responseI[252861] != vnodeI[493]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[86];
parity+=vnodeI[219];
parity+=vnodeI[493];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[490429]=parity;
if (cwI[957]==0) responseI[490429]=0; //assymetric
if (responseI[490429] != vnodeI[957]) parityerrors++;
parity=0;
parity+=vnodeI[166];
parity+=vnodeI[186];
parity+=vnodeI[343];
parity+=vnodeI[958];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14782]=parity;
if (cwI[28]==0) responseI[14782]=0; //assymetric
if (responseI[14782] != vnodeI[28]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[186];
parity+=vnodeI[343];
parity+=vnodeI[958];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[85438]=parity;
if (cwI[166]==0) responseI[85438]=0; //assymetric
if (responseI[85438] != vnodeI[166]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[166];
parity+=vnodeI[343];
parity+=vnodeI[958];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[95678]=parity;
if (cwI[186]==0) responseI[95678]=0; //assymetric
if (responseI[95678] != vnodeI[186]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[166];
parity+=vnodeI[186];
parity+=vnodeI[958];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[176062]=parity;
if (cwI[343]==0) responseI[176062]=0; //assymetric
if (responseI[176062] != vnodeI[343]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[166];
parity+=vnodeI[186];
parity+=vnodeI[343];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[490942]=parity;
if (cwI[958]==0) responseI[490942]=0; //assymetric
if (responseI[490942] != vnodeI[958]) parityerrors++;
parity=0;
parity+=vnodeI[106];
parity+=vnodeI[188];
parity+=vnodeI[216];
parity+=vnodeI[959];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21439]=parity;
if (cwI[41]==0) responseI[21439]=0; //assymetric
if (responseI[21439] != vnodeI[41]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[188];
parity+=vnodeI[216];
parity+=vnodeI[959];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[54719]=parity;
if (cwI[106]==0) responseI[54719]=0; //assymetric
if (responseI[54719] != vnodeI[106]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[106];
parity+=vnodeI[216];
parity+=vnodeI[959];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96703]=parity;
if (cwI[188]==0) responseI[96703]=0; //assymetric
if (responseI[96703] != vnodeI[188]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[106];
parity+=vnodeI[188];
parity+=vnodeI[959];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111039]=parity;
if (cwI[216]==0) responseI[111039]=0; //assymetric
if (responseI[111039] != vnodeI[216]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[106];
parity+=vnodeI[188];
parity+=vnodeI[216];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[491455]=parity;
if (cwI[959]==0) responseI[491455]=0; //assymetric
if (responseI[491455] != vnodeI[959]) parityerrors++;
parity=0;
parity+=vnodeI[97];
parity+=vnodeI[361];
parity+=vnodeI[464];
parity+=vnodeI[960];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[42432]=parity;
if (cwI[82]==0) responseI[42432]=0; //assymetric
if (responseI[42432] != vnodeI[82]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[361];
parity+=vnodeI[464];
parity+=vnodeI[960];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[50112]=parity;
if (cwI[97]==0) responseI[50112]=0; //assymetric
if (responseI[50112] != vnodeI[97]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[97];
parity+=vnodeI[464];
parity+=vnodeI[960];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185280]=parity;
if (cwI[361]==0) responseI[185280]=0; //assymetric
if (responseI[185280] != vnodeI[361]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[97];
parity+=vnodeI[361];
parity+=vnodeI[960];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238016]=parity;
if (cwI[464]==0) responseI[238016]=0; //assymetric
if (responseI[238016] != vnodeI[464]) parityerrors++;
parity=0;
parity+=vnodeI[82];
parity+=vnodeI[97];
parity+=vnodeI[361];
parity+=vnodeI[464];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[491968]=parity;
if (cwI[960]==0) responseI[491968]=0; //assymetric
if (responseI[491968] != vnodeI[960]) parityerrors++;
parity=0;
parity+=vnodeI[314];
parity+=vnodeI[315];
parity+=vnodeI[456];
parity+=vnodeI[961];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[139201]=parity;
if (cwI[271]==0) responseI[139201]=0; //assymetric
if (responseI[139201] != vnodeI[271]) parityerrors++;
parity=0;
parity+=vnodeI[271];
parity+=vnodeI[315];
parity+=vnodeI[456];
parity+=vnodeI[961];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161217]=parity;
if (cwI[314]==0) responseI[161217]=0; //assymetric
if (responseI[161217] != vnodeI[314]) parityerrors++;
parity=0;
parity+=vnodeI[271];
parity+=vnodeI[314];
parity+=vnodeI[456];
parity+=vnodeI[961];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161729]=parity;
if (cwI[315]==0) responseI[161729]=0; //assymetric
if (responseI[161729] != vnodeI[315]) parityerrors++;
parity=0;
parity+=vnodeI[271];
parity+=vnodeI[314];
parity+=vnodeI[315];
parity+=vnodeI[961];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233921]=parity;
if (cwI[456]==0) responseI[233921]=0; //assymetric
if (responseI[233921] != vnodeI[456]) parityerrors++;
parity=0;
parity+=vnodeI[271];
parity+=vnodeI[314];
parity+=vnodeI[315];
parity+=vnodeI[456];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[492481]=parity;
if (cwI[961]==0) responseI[492481]=0; //assymetric
if (responseI[492481] != vnodeI[961]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[159];
parity+=vnodeI[433];
parity+=vnodeI[962];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53186]=parity;
if (cwI[103]==0) responseI[53186]=0; //assymetric
if (responseI[53186] != vnodeI[103]) parityerrors++;
parity=0;
parity+=vnodeI[103];
parity+=vnodeI[159];
parity+=vnodeI[433];
parity+=vnodeI[962];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70594]=parity;
if (cwI[137]==0) responseI[70594]=0; //assymetric
if (responseI[70594] != vnodeI[137]) parityerrors++;
parity=0;
parity+=vnodeI[103];
parity+=vnodeI[137];
parity+=vnodeI[433];
parity+=vnodeI[962];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81858]=parity;
if (cwI[159]==0) responseI[81858]=0; //assymetric
if (responseI[81858] != vnodeI[159]) parityerrors++;
parity=0;
parity+=vnodeI[103];
parity+=vnodeI[137];
parity+=vnodeI[159];
parity+=vnodeI[962];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222146]=parity;
if (cwI[433]==0) responseI[222146]=0; //assymetric
if (responseI[222146] != vnodeI[433]) parityerrors++;
parity=0;
parity+=vnodeI[103];
parity+=vnodeI[137];
parity+=vnodeI[159];
parity+=vnodeI[433];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[492994]=parity;
if (cwI[962]==0) responseI[492994]=0; //assymetric
if (responseI[492994] != vnodeI[962]) parityerrors++;
parity=0;
parity+=vnodeI[194];
parity+=vnodeI[364];
parity+=vnodeI[489];
parity+=vnodeI[963];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59331]=parity;
if (cwI[115]==0) responseI[59331]=0; //assymetric
if (responseI[59331] != vnodeI[115]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[364];
parity+=vnodeI[489];
parity+=vnodeI[963];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99779]=parity;
if (cwI[194]==0) responseI[99779]=0; //assymetric
if (responseI[99779] != vnodeI[194]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[194];
parity+=vnodeI[489];
parity+=vnodeI[963];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186819]=parity;
if (cwI[364]==0) responseI[186819]=0; //assymetric
if (responseI[186819] != vnodeI[364]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[194];
parity+=vnodeI[364];
parity+=vnodeI[963];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[250819]=parity;
if (cwI[489]==0) responseI[250819]=0; //assymetric
if (responseI[250819] != vnodeI[489]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[194];
parity+=vnodeI[364];
parity+=vnodeI[489];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[493507]=parity;
if (cwI[963]==0) responseI[493507]=0; //assymetric
if (responseI[493507] != vnodeI[963]) parityerrors++;
parity=0;
parity+=vnodeI[241];
parity+=vnodeI[280];
parity+=vnodeI[324];
parity+=vnodeI[364];
parity+=vnodeI[964];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[25028]=parity;
if (cwI[48]==0) responseI[25028]=0; //assymetric
if (responseI[25028] != vnodeI[48]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[280];
parity+=vnodeI[324];
parity+=vnodeI[364];
parity+=vnodeI[964];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[123844]=parity;
if (cwI[241]==0) responseI[123844]=0; //assymetric
if (responseI[123844] != vnodeI[241]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[241];
parity+=vnodeI[324];
parity+=vnodeI[364];
parity+=vnodeI[964];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143812]=parity;
if (cwI[280]==0) responseI[143812]=0; //assymetric
if (responseI[143812] != vnodeI[280]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[241];
parity+=vnodeI[280];
parity+=vnodeI[364];
parity+=vnodeI[964];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166340]=parity;
if (cwI[324]==0) responseI[166340]=0; //assymetric
if (responseI[166340] != vnodeI[324]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[241];
parity+=vnodeI[280];
parity+=vnodeI[324];
parity+=vnodeI[964];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186820]=parity;
if (cwI[364]==0) responseI[186820]=0; //assymetric
if (responseI[186820] != vnodeI[364]) parityerrors++;
parity=0;
parity+=vnodeI[48];
parity+=vnodeI[241];
parity+=vnodeI[280];
parity+=vnodeI[324];
parity+=vnodeI[364];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[494020]=parity;
if (cwI[964]==0) responseI[494020]=0; //assymetric
if (responseI[494020] != vnodeI[964]) parityerrors++;
parity=0;
parity+=vnodeI[111];
parity+=vnodeI[187];
parity+=vnodeI[248];
parity+=vnodeI[965];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21957]=parity;
if (cwI[42]==0) responseI[21957]=0; //assymetric
if (responseI[21957] != vnodeI[42]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[187];
parity+=vnodeI[248];
parity+=vnodeI[965];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57285]=parity;
if (cwI[111]==0) responseI[57285]=0; //assymetric
if (responseI[57285] != vnodeI[111]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[111];
parity+=vnodeI[248];
parity+=vnodeI[965];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96197]=parity;
if (cwI[187]==0) responseI[96197]=0; //assymetric
if (responseI[96197] != vnodeI[187]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[111];
parity+=vnodeI[187];
parity+=vnodeI[965];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[127429]=parity;
if (cwI[248]==0) responseI[127429]=0; //assymetric
if (responseI[127429] != vnodeI[248]) parityerrors++;
parity=0;
parity+=vnodeI[42];
parity+=vnodeI[111];
parity+=vnodeI[187];
parity+=vnodeI[248];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[494533]=parity;
if (cwI[965]==0) responseI[494533]=0; //assymetric
if (responseI[494533] != vnodeI[965]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[234];
parity+=vnodeI[300];
parity+=vnodeI[966];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24006]=parity;
if (cwI[46]==0) responseI[24006]=0; //assymetric
if (responseI[24006] != vnodeI[46]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[234];
parity+=vnodeI[300];
parity+=vnodeI[966];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111558]=parity;
if (cwI[217]==0) responseI[111558]=0; //assymetric
if (responseI[111558] != vnodeI[217]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[217];
parity+=vnodeI[300];
parity+=vnodeI[966];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120262]=parity;
if (cwI[234]==0) responseI[120262]=0; //assymetric
if (responseI[120262] != vnodeI[234]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[217];
parity+=vnodeI[234];
parity+=vnodeI[966];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[154054]=parity;
if (cwI[300]==0) responseI[154054]=0; //assymetric
if (responseI[154054] != vnodeI[300]) parityerrors++;
parity=0;
parity+=vnodeI[46];
parity+=vnodeI[217];
parity+=vnodeI[234];
parity+=vnodeI[300];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[495046]=parity;
if (cwI[966]==0) responseI[495046]=0; //assymetric
if (responseI[495046] != vnodeI[966]) parityerrors++;
parity=0;
parity+=vnodeI[235];
parity+=vnodeI[335];
parity+=vnodeI[456];
parity+=vnodeI[967];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89031]=parity;
if (cwI[173]==0) responseI[89031]=0; //assymetric
if (responseI[89031] != vnodeI[173]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[335];
parity+=vnodeI[456];
parity+=vnodeI[967];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120775]=parity;
if (cwI[235]==0) responseI[120775]=0; //assymetric
if (responseI[120775] != vnodeI[235]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[235];
parity+=vnodeI[456];
parity+=vnodeI[967];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171975]=parity;
if (cwI[335]==0) responseI[171975]=0; //assymetric
if (responseI[171975] != vnodeI[335]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[235];
parity+=vnodeI[335];
parity+=vnodeI[967];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[233927]=parity;
if (cwI[456]==0) responseI[233927]=0; //assymetric
if (responseI[233927] != vnodeI[456]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[235];
parity+=vnodeI[335];
parity+=vnodeI[456];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[495559]=parity;
if (cwI[967]==0) responseI[495559]=0; //assymetric
if (responseI[495559] != vnodeI[967]) parityerrors++;
parity=0;
parity+=vnodeI[111];
parity+=vnodeI[220];
parity+=vnodeI[317];
parity+=vnodeI[968];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[7624]=parity;
if (cwI[14]==0) responseI[7624]=0; //assymetric
if (responseI[7624] != vnodeI[14]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[220];
parity+=vnodeI[317];
parity+=vnodeI[968];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57288]=parity;
if (cwI[111]==0) responseI[57288]=0; //assymetric
if (responseI[57288] != vnodeI[111]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[111];
parity+=vnodeI[317];
parity+=vnodeI[968];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113096]=parity;
if (cwI[220]==0) responseI[113096]=0; //assymetric
if (responseI[113096] != vnodeI[220]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[111];
parity+=vnodeI[220];
parity+=vnodeI[968];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162760]=parity;
if (cwI[317]==0) responseI[162760]=0; //assymetric
if (responseI[162760] != vnodeI[317]) parityerrors++;
parity=0;
parity+=vnodeI[14];
parity+=vnodeI[111];
parity+=vnodeI[220];
parity+=vnodeI[317];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[496072]=parity;
if (cwI[968]==0) responseI[496072]=0; //assymetric
if (responseI[496072] != vnodeI[968]) parityerrors++;
parity=0;
parity+=vnodeI[244];
parity+=vnodeI[331];
parity+=vnodeI[334];
parity+=vnodeI[969];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[24521]=parity;
if (cwI[47]==0) responseI[24521]=0; //assymetric
if (responseI[24521] != vnodeI[47]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[331];
parity+=vnodeI[334];
parity+=vnodeI[969];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[125385]=parity;
if (cwI[244]==0) responseI[125385]=0; //assymetric
if (responseI[125385] != vnodeI[244]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[244];
parity+=vnodeI[334];
parity+=vnodeI[969];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[169929]=parity;
if (cwI[331]==0) responseI[169929]=0; //assymetric
if (responseI[169929] != vnodeI[331]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[244];
parity+=vnodeI[331];
parity+=vnodeI[969];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171465]=parity;
if (cwI[334]==0) responseI[171465]=0; //assymetric
if (responseI[171465] != vnodeI[334]) parityerrors++;
parity=0;
parity+=vnodeI[47];
parity+=vnodeI[244];
parity+=vnodeI[331];
parity+=vnodeI[334];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[496585]=parity;
if (cwI[969]==0) responseI[496585]=0; //assymetric
if (responseI[496585] != vnodeI[969]) parityerrors++;
parity=0;
parity+=vnodeI[304];
parity+=vnodeI[369];
parity+=vnodeI[458];
parity+=vnodeI[493];
parity+=vnodeI[970];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[110026]=parity;
if (cwI[214]==0) responseI[110026]=0; //assymetric
if (responseI[110026] != vnodeI[214]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[369];
parity+=vnodeI[458];
parity+=vnodeI[493];
parity+=vnodeI[970];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156106]=parity;
if (cwI[304]==0) responseI[156106]=0; //assymetric
if (responseI[156106] != vnodeI[304]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[304];
parity+=vnodeI[458];
parity+=vnodeI[493];
parity+=vnodeI[970];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[189386]=parity;
if (cwI[369]==0) responseI[189386]=0; //assymetric
if (responseI[189386] != vnodeI[369]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[304];
parity+=vnodeI[369];
parity+=vnodeI[493];
parity+=vnodeI[970];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234954]=parity;
if (cwI[458]==0) responseI[234954]=0; //assymetric
if (responseI[234954] != vnodeI[458]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[304];
parity+=vnodeI[369];
parity+=vnodeI[458];
parity+=vnodeI[970];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[252874]=parity;
if (cwI[493]==0) responseI[252874]=0; //assymetric
if (responseI[252874] != vnodeI[493]) parityerrors++;
parity=0;
parity+=vnodeI[214];
parity+=vnodeI[304];
parity+=vnodeI[369];
parity+=vnodeI[458];
parity+=vnodeI[493];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[497098]=parity;
if (cwI[970]==0) responseI[497098]=0; //assymetric
if (responseI[497098] != vnodeI[970]) parityerrors++;
parity=0;
parity+=vnodeI[19];
parity+=vnodeI[88];
parity+=vnodeI[294];
parity+=vnodeI[971];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[6091]=parity;
if (cwI[11]==0) responseI[6091]=0; //assymetric
if (responseI[6091] != vnodeI[11]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[88];
parity+=vnodeI[294];
parity+=vnodeI[971];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[10187]=parity;
if (cwI[19]==0) responseI[10187]=0; //assymetric
if (responseI[10187] != vnodeI[19]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[19];
parity+=vnodeI[294];
parity+=vnodeI[971];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[45515]=parity;
if (cwI[88]==0) responseI[45515]=0; //assymetric
if (responseI[45515] != vnodeI[88]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[19];
parity+=vnodeI[88];
parity+=vnodeI[971];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[150987]=parity;
if (cwI[294]==0) responseI[150987]=0; //assymetric
if (responseI[150987] != vnodeI[294]) parityerrors++;
parity=0;
parity+=vnodeI[11];
parity+=vnodeI[19];
parity+=vnodeI[88];
parity+=vnodeI[294];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[497611]=parity;
if (cwI[971]==0) responseI[497611]=0; //assymetric
if (responseI[497611] != vnodeI[971]) parityerrors++;
parity=0;
parity+=vnodeI[174];
parity+=vnodeI[204];
parity+=vnodeI[426];
parity+=vnodeI[972];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66508]=parity;
if (cwI[129]==0) responseI[66508]=0; //assymetric
if (responseI[66508] != vnodeI[129]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[204];
parity+=vnodeI[426];
parity+=vnodeI[972];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89548]=parity;
if (cwI[174]==0) responseI[89548]=0; //assymetric
if (responseI[89548] != vnodeI[174]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[174];
parity+=vnodeI[426];
parity+=vnodeI[972];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[104908]=parity;
if (cwI[204]==0) responseI[104908]=0; //assymetric
if (responseI[104908] != vnodeI[204]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[174];
parity+=vnodeI[204];
parity+=vnodeI[972];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218572]=parity;
if (cwI[426]==0) responseI[218572]=0; //assymetric
if (responseI[218572] != vnodeI[426]) parityerrors++;
parity=0;
parity+=vnodeI[129];
parity+=vnodeI[174];
parity+=vnodeI[204];
parity+=vnodeI[426];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[498124]=parity;
if (cwI[972]==0) responseI[498124]=0; //assymetric
if (responseI[498124] != vnodeI[972]) parityerrors++;
parity=0;
parity+=vnodeI[251];
parity+=vnodeI[450];
parity+=vnodeI[505];
parity+=vnodeI[973];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67533]=parity;
if (cwI[131]==0) responseI[67533]=0; //assymetric
if (responseI[67533] != vnodeI[131]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[450];
parity+=vnodeI[505];
parity+=vnodeI[973];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[128973]=parity;
if (cwI[251]==0) responseI[128973]=0; //assymetric
if (responseI[128973] != vnodeI[251]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[251];
parity+=vnodeI[505];
parity+=vnodeI[973];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230861]=parity;
if (cwI[450]==0) responseI[230861]=0; //assymetric
if (responseI[230861] != vnodeI[450]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[251];
parity+=vnodeI[450];
parity+=vnodeI[973];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[259021]=parity;
if (cwI[505]==0) responseI[259021]=0; //assymetric
if (responseI[259021] != vnodeI[505]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[251];
parity+=vnodeI[450];
parity+=vnodeI[505];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[498637]=parity;
if (cwI[973]==0) responseI[498637]=0; //assymetric
if (responseI[498637] != vnodeI[973]) parityerrors++;
parity=0;
parity+=vnodeI[154];
parity+=vnodeI[384];
parity+=vnodeI[390];
parity+=vnodeI[974];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[36302]=parity;
if (cwI[70]==0) responseI[36302]=0; //assymetric
if (responseI[36302] != vnodeI[70]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[384];
parity+=vnodeI[390];
parity+=vnodeI[974];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79310]=parity;
if (cwI[154]==0) responseI[79310]=0; //assymetric
if (responseI[79310] != vnodeI[154]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[154];
parity+=vnodeI[390];
parity+=vnodeI[974];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197070]=parity;
if (cwI[384]==0) responseI[197070]=0; //assymetric
if (responseI[197070] != vnodeI[384]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[154];
parity+=vnodeI[384];
parity+=vnodeI[974];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200142]=parity;
if (cwI[390]==0) responseI[200142]=0; //assymetric
if (responseI[200142] != vnodeI[390]) parityerrors++;
parity=0;
parity+=vnodeI[70];
parity+=vnodeI[154];
parity+=vnodeI[384];
parity+=vnodeI[390];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[499150]=parity;
if (cwI[974]==0) responseI[499150]=0; //assymetric
if (responseI[499150] != vnodeI[974]) parityerrors++;
parity=0;
parity+=vnodeI[328];
parity+=vnodeI[335];
parity+=vnodeI[351];
parity+=vnodeI[975];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[51663]=parity;
if (cwI[100]==0) responseI[51663]=0; //assymetric
if (responseI[51663] != vnodeI[100]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[335];
parity+=vnodeI[351];
parity+=vnodeI[975];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[168399]=parity;
if (cwI[328]==0) responseI[168399]=0; //assymetric
if (responseI[168399] != vnodeI[328]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[328];
parity+=vnodeI[351];
parity+=vnodeI[975];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[171983]=parity;
if (cwI[335]==0) responseI[171983]=0; //assymetric
if (responseI[171983] != vnodeI[335]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[328];
parity+=vnodeI[335];
parity+=vnodeI[975];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180175]=parity;
if (cwI[351]==0) responseI[180175]=0; //assymetric
if (responseI[180175] != vnodeI[351]) parityerrors++;
parity=0;
parity+=vnodeI[100];
parity+=vnodeI[328];
parity+=vnodeI[335];
parity+=vnodeI[351];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[499663]=parity;
if (cwI[975]==0) responseI[499663]=0; //assymetric
if (responseI[499663] != vnodeI[975]) parityerrors++;
parity=0;
parity+=vnodeI[113];
parity+=vnodeI[171];
parity+=vnodeI[312];
parity+=vnodeI[976];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47568]=parity;
if (cwI[92]==0) responseI[47568]=0; //assymetric
if (responseI[47568] != vnodeI[92]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[171];
parity+=vnodeI[312];
parity+=vnodeI[976];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58320]=parity;
if (cwI[113]==0) responseI[58320]=0; //assymetric
if (responseI[58320] != vnodeI[113]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[113];
parity+=vnodeI[312];
parity+=vnodeI[976];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[88016]=parity;
if (cwI[171]==0) responseI[88016]=0; //assymetric
if (responseI[88016] != vnodeI[171]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[113];
parity+=vnodeI[171];
parity+=vnodeI[976];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[160208]=parity;
if (cwI[312]==0) responseI[160208]=0; //assymetric
if (responseI[160208] != vnodeI[312]) parityerrors++;
parity=0;
parity+=vnodeI[92];
parity+=vnodeI[113];
parity+=vnodeI[171];
parity+=vnodeI[312];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[500176]=parity;
if (cwI[976]==0) responseI[500176]=0; //assymetric
if (responseI[500176] != vnodeI[976]) parityerrors++;
parity=0;
parity+=vnodeI[178];
parity+=vnodeI[305];
parity+=vnodeI[375];
parity+=vnodeI[382];
parity+=vnodeI[977];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89041]=parity;
if (cwI[173]==0) responseI[89041]=0; //assymetric
if (responseI[89041] != vnodeI[173]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[305];
parity+=vnodeI[375];
parity+=vnodeI[382];
parity+=vnodeI[977];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[91601]=parity;
if (cwI[178]==0) responseI[91601]=0; //assymetric
if (responseI[91601] != vnodeI[178]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[178];
parity+=vnodeI[375];
parity+=vnodeI[382];
parity+=vnodeI[977];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[156625]=parity;
if (cwI[305]==0) responseI[156625]=0; //assymetric
if (responseI[156625] != vnodeI[305]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[178];
parity+=vnodeI[305];
parity+=vnodeI[382];
parity+=vnodeI[977];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192465]=parity;
if (cwI[375]==0) responseI[192465]=0; //assymetric
if (responseI[192465] != vnodeI[375]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[178];
parity+=vnodeI[305];
parity+=vnodeI[375];
parity+=vnodeI[977];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196049]=parity;
if (cwI[382]==0) responseI[196049]=0; //assymetric
if (responseI[196049] != vnodeI[382]) parityerrors++;
parity=0;
parity+=vnodeI[173];
parity+=vnodeI[178];
parity+=vnodeI[305];
parity+=vnodeI[375];
parity+=vnodeI[382];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[500689]=parity;
if (cwI[977]==0) responseI[500689]=0; //assymetric
if (responseI[500689] != vnodeI[977]) parityerrors++;
parity=0;
parity+=vnodeI[137];
parity+=vnodeI[187];
parity+=vnodeI[272];
parity+=vnodeI[978];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[67538]=parity;
if (cwI[131]==0) responseI[67538]=0; //assymetric
if (responseI[67538] != vnodeI[131]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[187];
parity+=vnodeI[272];
parity+=vnodeI[978];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70610]=parity;
if (cwI[137]==0) responseI[70610]=0; //assymetric
if (responseI[70610] != vnodeI[137]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[137];
parity+=vnodeI[272];
parity+=vnodeI[978];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96210]=parity;
if (cwI[187]==0) responseI[96210]=0; //assymetric
if (responseI[96210] != vnodeI[187]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[137];
parity+=vnodeI[187];
parity+=vnodeI[978];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[139730]=parity;
if (cwI[272]==0) responseI[139730]=0; //assymetric
if (responseI[139730] != vnodeI[272]) parityerrors++;
parity=0;
parity+=vnodeI[131];
parity+=vnodeI[137];
parity+=vnodeI[187];
parity+=vnodeI[272];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[501202]=parity;
if (cwI[978]==0) responseI[501202]=0; //assymetric
if (responseI[501202] != vnodeI[978]) parityerrors++;
parity=0;
parity+=vnodeI[174];
parity+=vnodeI[200];
parity+=vnodeI[508];
parity+=vnodeI[979];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[16851]=parity;
if (cwI[32]==0) responseI[16851]=0; //assymetric
if (responseI[16851] != vnodeI[32]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[200];
parity+=vnodeI[508];
parity+=vnodeI[979];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[89555]=parity;
if (cwI[174]==0) responseI[89555]=0; //assymetric
if (responseI[89555] != vnodeI[174]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[174];
parity+=vnodeI[508];
parity+=vnodeI[979];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[102867]=parity;
if (cwI[200]==0) responseI[102867]=0; //assymetric
if (responseI[102867] != vnodeI[200]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[174];
parity+=vnodeI[200];
parity+=vnodeI[979];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[260563]=parity;
if (cwI[508]==0) responseI[260563]=0; //assymetric
if (responseI[260563] != vnodeI[508]) parityerrors++;
parity=0;
parity+=vnodeI[32];
parity+=vnodeI[174];
parity+=vnodeI[200];
parity+=vnodeI[508];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[501715]=parity;
if (cwI[979]==0) responseI[501715]=0; //assymetric
if (responseI[501715] != vnodeI[979]) parityerrors++;
parity=0;
parity+=vnodeI[223];
parity+=vnodeI[272];
parity+=vnodeI[429];
parity+=vnodeI[980];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59348]=parity;
if (cwI[115]==0) responseI[59348]=0; //assymetric
if (responseI[59348] != vnodeI[115]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[272];
parity+=vnodeI[429];
parity+=vnodeI[980];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[114644]=parity;
if (cwI[223]==0) responseI[114644]=0; //assymetric
if (responseI[114644] != vnodeI[223]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[223];
parity+=vnodeI[429];
parity+=vnodeI[980];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[139732]=parity;
if (cwI[272]==0) responseI[139732]=0; //assymetric
if (responseI[139732] != vnodeI[272]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[223];
parity+=vnodeI[272];
parity+=vnodeI[980];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[220116]=parity;
if (cwI[429]==0) responseI[220116]=0; //assymetric
if (responseI[220116] != vnodeI[429]) parityerrors++;
parity=0;
parity+=vnodeI[115];
parity+=vnodeI[223];
parity+=vnodeI[272];
parity+=vnodeI[429];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[502228]=parity;
if (cwI[980]==0) responseI[502228]=0; //assymetric
if (responseI[502228] != vnodeI[980]) parityerrors++;
parity=0;
parity+=vnodeI[279];
parity+=vnodeI[341];
parity+=vnodeI[385];
parity+=vnodeI[981];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[96725]=parity;
if (cwI[188]==0) responseI[96725]=0; //assymetric
if (responseI[96725] != vnodeI[188]) parityerrors++;
parity=0;
parity+=vnodeI[188];
parity+=vnodeI[341];
parity+=vnodeI[385];
parity+=vnodeI[981];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[143317]=parity;
if (cwI[279]==0) responseI[143317]=0; //assymetric
if (responseI[143317] != vnodeI[279]) parityerrors++;
parity=0;
parity+=vnodeI[188];
parity+=vnodeI[279];
parity+=vnodeI[385];
parity+=vnodeI[981];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[175061]=parity;
if (cwI[341]==0) responseI[175061]=0; //assymetric
if (responseI[175061] != vnodeI[341]) parityerrors++;
parity=0;
parity+=vnodeI[188];
parity+=vnodeI[279];
parity+=vnodeI[341];
parity+=vnodeI[981];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197589]=parity;
if (cwI[385]==0) responseI[197589]=0; //assymetric
if (responseI[197589] != vnodeI[385]) parityerrors++;
parity=0;
parity+=vnodeI[188];
parity+=vnodeI[279];
parity+=vnodeI[341];
parity+=vnodeI[385];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[502741]=parity;
if (cwI[981]==0) responseI[502741]=0; //assymetric
if (responseI[502741] != vnodeI[981]) parityerrors++;
parity=0;
parity+=vnodeI[157];
parity+=vnodeI[162];
parity+=vnodeI[439];
parity+=vnodeI[982];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[61398]=parity;
if (cwI[119]==0) responseI[61398]=0; //assymetric
if (responseI[61398] != vnodeI[119]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[162];
parity+=vnodeI[439];
parity+=vnodeI[982];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80854]=parity;
if (cwI[157]==0) responseI[80854]=0; //assymetric
if (responseI[80854] != vnodeI[157]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[157];
parity+=vnodeI[439];
parity+=vnodeI[982];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83414]=parity;
if (cwI[162]==0) responseI[83414]=0; //assymetric
if (responseI[83414] != vnodeI[162]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[157];
parity+=vnodeI[162];
parity+=vnodeI[982];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[225238]=parity;
if (cwI[439]==0) responseI[225238]=0; //assymetric
if (responseI[225238] != vnodeI[439]) parityerrors++;
parity=0;
parity+=vnodeI[119];
parity+=vnodeI[157];
parity+=vnodeI[162];
parity+=vnodeI[439];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[503254]=parity;
if (cwI[982]==0) responseI[503254]=0; //assymetric
if (responseI[503254] != vnodeI[982]) parityerrors++;
parity=0;
parity+=vnodeI[292];
parity+=vnodeI[410];
parity+=vnodeI[463];
parity+=vnodeI[983];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121303]=parity;
if (cwI[236]==0) responseI[121303]=0; //assymetric
if (responseI[121303] != vnodeI[236]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[410];
parity+=vnodeI[463];
parity+=vnodeI[983];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149975]=parity;
if (cwI[292]==0) responseI[149975]=0; //assymetric
if (responseI[149975] != vnodeI[292]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[292];
parity+=vnodeI[463];
parity+=vnodeI[983];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210391]=parity;
if (cwI[410]==0) responseI[210391]=0; //assymetric
if (responseI[210391] != vnodeI[410]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[292];
parity+=vnodeI[410];
parity+=vnodeI[983];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[237527]=parity;
if (cwI[463]==0) responseI[237527]=0; //assymetric
if (responseI[237527] != vnodeI[463]) parityerrors++;
parity=0;
parity+=vnodeI[236];
parity+=vnodeI[292];
parity+=vnodeI[410];
parity+=vnodeI[463];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[503767]=parity;
if (cwI[983]==0) responseI[503767]=0; //assymetric
if (responseI[503767] != vnodeI[983]) parityerrors++;
parity=0;
parity+=vnodeI[91];
parity+=vnodeI[150];
parity+=vnodeI[299];
parity+=vnodeI[984];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[11736]=parity;
if (cwI[22]==0) responseI[11736]=0; //assymetric
if (responseI[11736] != vnodeI[22]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[150];
parity+=vnodeI[299];
parity+=vnodeI[984];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[47064]=parity;
if (cwI[91]==0) responseI[47064]=0; //assymetric
if (responseI[47064] != vnodeI[91]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[91];
parity+=vnodeI[299];
parity+=vnodeI[984];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[77272]=parity;
if (cwI[150]==0) responseI[77272]=0; //assymetric
if (responseI[77272] != vnodeI[150]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[91];
parity+=vnodeI[150];
parity+=vnodeI[984];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[153560]=parity;
if (cwI[299]==0) responseI[153560]=0; //assymetric
if (responseI[153560] != vnodeI[299]) parityerrors++;
parity=0;
parity+=vnodeI[22];
parity+=vnodeI[91];
parity+=vnodeI[150];
parity+=vnodeI[299];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[504280]=parity;
if (cwI[984]==0) responseI[504280]=0; //assymetric
if (responseI[504280] != vnodeI[984]) parityerrors++;
parity=0;
parity+=vnodeI[136];
parity+=vnodeI[287];
parity+=vnodeI[333];
parity+=vnodeI[985];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48089]=parity;
if (cwI[93]==0) responseI[48089]=0; //assymetric
if (responseI[48089] != vnodeI[93]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[287];
parity+=vnodeI[333];
parity+=vnodeI[985];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[70105]=parity;
if (cwI[136]==0) responseI[70105]=0; //assymetric
if (responseI[70105] != vnodeI[136]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[136];
parity+=vnodeI[333];
parity+=vnodeI[985];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[147417]=parity;
if (cwI[287]==0) responseI[147417]=0; //assymetric
if (responseI[147417] != vnodeI[287]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[136];
parity+=vnodeI[287];
parity+=vnodeI[985];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170969]=parity;
if (cwI[333]==0) responseI[170969]=0; //assymetric
if (responseI[170969] != vnodeI[333]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[136];
parity+=vnodeI[287];
parity+=vnodeI[333];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[504793]=parity;
if (cwI[985]==0) responseI[504793]=0; //assymetric
if (responseI[504793] != vnodeI[985]) parityerrors++;
parity=0;
parity+=vnodeI[237];
parity+=vnodeI[404];
parity+=vnodeI[414];
parity+=vnodeI[986];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[26074]=parity;
if (cwI[50]==0) responseI[26074]=0; //assymetric
if (responseI[26074] != vnodeI[50]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[404];
parity+=vnodeI[414];
parity+=vnodeI[986];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[121818]=parity;
if (cwI[237]==0) responseI[121818]=0; //assymetric
if (responseI[121818] != vnodeI[237]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[237];
parity+=vnodeI[414];
parity+=vnodeI[986];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[207322]=parity;
if (cwI[404]==0) responseI[207322]=0; //assymetric
if (responseI[207322] != vnodeI[404]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[237];
parity+=vnodeI[404];
parity+=vnodeI[986];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212442]=parity;
if (cwI[414]==0) responseI[212442]=0; //assymetric
if (responseI[212442] != vnodeI[414]) parityerrors++;
parity=0;
parity+=vnodeI[50];
parity+=vnodeI[237];
parity+=vnodeI[404];
parity+=vnodeI[414];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[505306]=parity;
if (cwI[986]==0) responseI[505306]=0; //assymetric
if (responseI[505306] != vnodeI[986]) parityerrors++;
parity=0;
parity+=vnodeI[326];
parity+=vnodeI[426];
parity+=vnodeI[457];
parity+=vnodeI[987];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145371]=parity;
if (cwI[283]==0) responseI[145371]=0; //assymetric
if (responseI[145371] != vnodeI[283]) parityerrors++;
parity=0;
parity+=vnodeI[283];
parity+=vnodeI[426];
parity+=vnodeI[457];
parity+=vnodeI[987];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167387]=parity;
if (cwI[326]==0) responseI[167387]=0; //assymetric
if (responseI[167387] != vnodeI[326]) parityerrors++;
parity=0;
parity+=vnodeI[283];
parity+=vnodeI[326];
parity+=vnodeI[457];
parity+=vnodeI[987];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218587]=parity;
if (cwI[426]==0) responseI[218587]=0; //assymetric
if (responseI[218587] != vnodeI[426]) parityerrors++;
parity=0;
parity+=vnodeI[283];
parity+=vnodeI[326];
parity+=vnodeI[426];
parity+=vnodeI[987];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234459]=parity;
if (cwI[457]==0) responseI[234459]=0; //assymetric
if (responseI[234459] != vnodeI[457]) parityerrors++;
parity=0;
parity+=vnodeI[283];
parity+=vnodeI[326];
parity+=vnodeI[426];
parity+=vnodeI[457];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[505819]=parity;
if (cwI[987]==0) responseI[505819]=0; //assymetric
if (responseI[505819] != vnodeI[987]) parityerrors++;
parity=0;
parity+=vnodeI[238];
parity+=vnodeI[321];
parity+=vnodeI[325];
parity+=vnodeI[364];
parity+=vnodeI[988];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119260]=parity;
if (cwI[232]==0) responseI[119260]=0; //assymetric
if (responseI[119260] != vnodeI[232]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[321];
parity+=vnodeI[325];
parity+=vnodeI[364];
parity+=vnodeI[988];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[122332]=parity;
if (cwI[238]==0) responseI[122332]=0; //assymetric
if (responseI[122332] != vnodeI[238]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[238];
parity+=vnodeI[325];
parity+=vnodeI[364];
parity+=vnodeI[988];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164828]=parity;
if (cwI[321]==0) responseI[164828]=0; //assymetric
if (responseI[164828] != vnodeI[321]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[238];
parity+=vnodeI[321];
parity+=vnodeI[364];
parity+=vnodeI[988];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[166876]=parity;
if (cwI[325]==0) responseI[166876]=0; //assymetric
if (responseI[166876] != vnodeI[325]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[238];
parity+=vnodeI[321];
parity+=vnodeI[325];
parity+=vnodeI[988];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[186844]=parity;
if (cwI[364]==0) responseI[186844]=0; //assymetric
if (responseI[186844] != vnodeI[364]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[238];
parity+=vnodeI[321];
parity+=vnodeI[325];
parity+=vnodeI[364];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[506332]=parity;
if (cwI[988]==0) responseI[506332]=0; //assymetric
if (responseI[506332] != vnodeI[988]) parityerrors++;
parity=0;
parity+=vnodeI[217];
parity+=vnodeI[225];
parity+=vnodeI[259];
parity+=vnodeI[989];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[50653]=parity;
if (cwI[98]==0) responseI[50653]=0; //assymetric
if (responseI[50653] != vnodeI[98]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[225];
parity+=vnodeI[259];
parity+=vnodeI[989];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111581]=parity;
if (cwI[217]==0) responseI[111581]=0; //assymetric
if (responseI[111581] != vnodeI[217]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[217];
parity+=vnodeI[259];
parity+=vnodeI[989];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[115677]=parity;
if (cwI[225]==0) responseI[115677]=0; //assymetric
if (responseI[115677] != vnodeI[225]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[217];
parity+=vnodeI[225];
parity+=vnodeI[989];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[133085]=parity;
if (cwI[259]==0) responseI[133085]=0; //assymetric
if (responseI[133085] != vnodeI[259]) parityerrors++;
parity=0;
parity+=vnodeI[98];
parity+=vnodeI[217];
parity+=vnodeI[225];
parity+=vnodeI[259];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[506845]=parity;
if (cwI[989]==0) responseI[506845]=0; //assymetric
if (responseI[506845] != vnodeI[989]) parityerrors++;
parity=0;
parity+=vnodeI[362];
parity+=vnodeI[388];
parity+=vnodeI[498];
parity+=vnodeI[990];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68574]=parity;
if (cwI[133]==0) responseI[68574]=0; //assymetric
if (responseI[68574] != vnodeI[133]) parityerrors++;
parity=0;
parity+=vnodeI[133];
parity+=vnodeI[388];
parity+=vnodeI[498];
parity+=vnodeI[990];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185822]=parity;
if (cwI[362]==0) responseI[185822]=0; //assymetric
if (responseI[185822] != vnodeI[362]) parityerrors++;
parity=0;
parity+=vnodeI[133];
parity+=vnodeI[362];
parity+=vnodeI[498];
parity+=vnodeI[990];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[199134]=parity;
if (cwI[388]==0) responseI[199134]=0; //assymetric
if (responseI[199134] != vnodeI[388]) parityerrors++;
parity=0;
parity+=vnodeI[133];
parity+=vnodeI[362];
parity+=vnodeI[388];
parity+=vnodeI[990];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[255454]=parity;
if (cwI[498]==0) responseI[255454]=0; //assymetric
if (responseI[255454] != vnodeI[498]) parityerrors++;
parity=0;
parity+=vnodeI[133];
parity+=vnodeI[362];
parity+=vnodeI[388];
parity+=vnodeI[498];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[507358]=parity;
if (cwI[990]==0) responseI[507358]=0; //assymetric
if (responseI[507358] != vnodeI[990]) parityerrors++;
parity=0;
parity+=vnodeI[112];
parity+=vnodeI[320];
parity+=vnodeI[401];
parity+=vnodeI[497];
parity+=vnodeI[991];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21471]=parity;
if (cwI[41]==0) responseI[21471]=0; //assymetric
if (responseI[21471] != vnodeI[41]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[320];
parity+=vnodeI[401];
parity+=vnodeI[497];
parity+=vnodeI[991];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[57823]=parity;
if (cwI[112]==0) responseI[57823]=0; //assymetric
if (responseI[57823] != vnodeI[112]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[112];
parity+=vnodeI[401];
parity+=vnodeI[497];
parity+=vnodeI[991];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[164319]=parity;
if (cwI[320]==0) responseI[164319]=0; //assymetric
if (responseI[164319] != vnodeI[320]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[112];
parity+=vnodeI[320];
parity+=vnodeI[497];
parity+=vnodeI[991];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[205791]=parity;
if (cwI[401]==0) responseI[205791]=0; //assymetric
if (responseI[205791] != vnodeI[401]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[112];
parity+=vnodeI[320];
parity+=vnodeI[401];
parity+=vnodeI[991];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[254943]=parity;
if (cwI[497]==0) responseI[254943]=0; //assymetric
if (responseI[254943] != vnodeI[497]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[112];
parity+=vnodeI[320];
parity+=vnodeI[401];
parity+=vnodeI[497];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[507871]=parity;
if (cwI[991]==0) responseI[507871]=0; //assymetric
if (responseI[507871] != vnodeI[991]) parityerrors++;
parity=0;
parity+=vnodeI[378];
parity+=vnodeI[479];
parity+=vnodeI[487];
parity+=vnodeI[992];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132576]=parity;
if (cwI[258]==0) responseI[132576]=0; //assymetric
if (responseI[132576] != vnodeI[258]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[479];
parity+=vnodeI[487];
parity+=vnodeI[992];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194016]=parity;
if (cwI[378]==0) responseI[194016]=0; //assymetric
if (responseI[194016] != vnodeI[378]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[378];
parity+=vnodeI[487];
parity+=vnodeI[992];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[245728]=parity;
if (cwI[479]==0) responseI[245728]=0; //assymetric
if (responseI[245728] != vnodeI[479]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[378];
parity+=vnodeI[479];
parity+=vnodeI[992];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[249824]=parity;
if (cwI[487]==0) responseI[249824]=0; //assymetric
if (responseI[249824] != vnodeI[487]) parityerrors++;
parity=0;
parity+=vnodeI[258];
parity+=vnodeI[378];
parity+=vnodeI[479];
parity+=vnodeI[487];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[508384]=parity;
if (cwI[992]==0) responseI[508384]=0; //assymetric
if (responseI[508384] != vnodeI[992]) parityerrors++;
parity=0;
parity+=vnodeI[195];
parity+=vnodeI[235];
parity+=vnodeI[356];
parity+=vnodeI[993];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[87009]=parity;
if (cwI[169]==0) responseI[87009]=0; //assymetric
if (responseI[87009] != vnodeI[169]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[235];
parity+=vnodeI[356];
parity+=vnodeI[993];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[100321]=parity;
if (cwI[195]==0) responseI[100321]=0; //assymetric
if (responseI[100321] != vnodeI[195]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[195];
parity+=vnodeI[356];
parity+=vnodeI[993];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120801]=parity;
if (cwI[235]==0) responseI[120801]=0; //assymetric
if (responseI[120801] != vnodeI[235]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[195];
parity+=vnodeI[235];
parity+=vnodeI[993];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[182753]=parity;
if (cwI[356]==0) responseI[182753]=0; //assymetric
if (responseI[182753] != vnodeI[356]) parityerrors++;
parity=0;
parity+=vnodeI[169];
parity+=vnodeI[195];
parity+=vnodeI[235];
parity+=vnodeI[356];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[508897]=parity;
if (cwI[993]==0) responseI[508897]=0; //assymetric
if (responseI[508897] != vnodeI[993]) parityerrors++;
parity=0;
parity+=vnodeI[30];
parity+=vnodeI[156];
parity+=vnodeI[193];
parity+=vnodeI[994];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14818]=parity;
if (cwI[28]==0) responseI[14818]=0; //assymetric
if (responseI[14818] != vnodeI[28]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[156];
parity+=vnodeI[193];
parity+=vnodeI[994];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[15842]=parity;
if (cwI[30]==0) responseI[15842]=0; //assymetric
if (responseI[15842] != vnodeI[30]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[30];
parity+=vnodeI[193];
parity+=vnodeI[994];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[80354]=parity;
if (cwI[156]==0) responseI[80354]=0; //assymetric
if (responseI[80354] != vnodeI[156]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[30];
parity+=vnodeI[156];
parity+=vnodeI[994];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[99298]=parity;
if (cwI[193]==0) responseI[99298]=0; //assymetric
if (responseI[99298] != vnodeI[193]) parityerrors++;
parity=0;
parity+=vnodeI[28];
parity+=vnodeI[30];
parity+=vnodeI[156];
parity+=vnodeI[193];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[509410]=parity;
if (cwI[994]==0) responseI[509410]=0; //assymetric
if (responseI[509410] != vnodeI[994]) parityerrors++;
parity=0;
parity+=vnodeI[128];
parity+=vnodeI[289];
parity+=vnodeI[458];
parity+=vnodeI[995];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48611]=parity;
if (cwI[94]==0) responseI[48611]=0; //assymetric
if (responseI[48611] != vnodeI[94]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[289];
parity+=vnodeI[458];
parity+=vnodeI[995];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[66019]=parity;
if (cwI[128]==0) responseI[66019]=0; //assymetric
if (responseI[66019] != vnodeI[128]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[128];
parity+=vnodeI[458];
parity+=vnodeI[995];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148451]=parity;
if (cwI[289]==0) responseI[148451]=0; //assymetric
if (responseI[148451] != vnodeI[289]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[128];
parity+=vnodeI[289];
parity+=vnodeI[995];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[234979]=parity;
if (cwI[458]==0) responseI[234979]=0; //assymetric
if (responseI[234979] != vnodeI[458]) parityerrors++;
parity=0;
parity+=vnodeI[94];
parity+=vnodeI[128];
parity+=vnodeI[289];
parity+=vnodeI[458];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[509923]=parity;
if (cwI[995]==0) responseI[509923]=0; //assymetric
if (responseI[509923] != vnodeI[995]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[289];
parity+=vnodeI[402];
parity+=vnodeI[996];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[21476]=parity;
if (cwI[41]==0) responseI[21476]=0; //assymetric
if (responseI[21476] != vnodeI[41]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[289];
parity+=vnodeI[402];
parity+=vnodeI[996];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63972]=parity;
if (cwI[124]==0) responseI[63972]=0; //assymetric
if (responseI[63972] != vnodeI[124]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[124];
parity+=vnodeI[402];
parity+=vnodeI[996];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[148452]=parity;
if (cwI[289]==0) responseI[148452]=0; //assymetric
if (responseI[148452] != vnodeI[289]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[124];
parity+=vnodeI[289];
parity+=vnodeI[996];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206308]=parity;
if (cwI[402]==0) responseI[206308]=0; //assymetric
if (responseI[206308] != vnodeI[402]) parityerrors++;
parity=0;
parity+=vnodeI[41];
parity+=vnodeI[124];
parity+=vnodeI[289];
parity+=vnodeI[402];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[510436]=parity;
if (cwI[996]==0) responseI[510436]=0; //assymetric
if (responseI[510436] != vnodeI[996]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[175];
parity+=vnodeI[474];
parity+=vnodeI[997];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[2021]=parity;
if (cwI[3]==0) responseI[2021]=0; //assymetric
if (responseI[2021] != vnodeI[3]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[175];
parity+=vnodeI[474];
parity+=vnodeI[997];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12261]=parity;
if (cwI[23]==0) responseI[12261]=0; //assymetric
if (responseI[12261] != vnodeI[23]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[23];
parity+=vnodeI[474];
parity+=vnodeI[997];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[90085]=parity;
if (cwI[175]==0) responseI[90085]=0; //assymetric
if (responseI[90085] != vnodeI[175]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[23];
parity+=vnodeI[175];
parity+=vnodeI[997];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243173]=parity;
if (cwI[474]==0) responseI[243173]=0; //assymetric
if (responseI[243173] != vnodeI[474]) parityerrors++;
parity=0;
parity+=vnodeI[3];
parity+=vnodeI[23];
parity+=vnodeI[175];
parity+=vnodeI[474];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[510949]=parity;
if (cwI[997]==0) responseI[510949]=0; //assymetric
if (responseI[510949] != vnodeI[997]) parityerrors++;
parity=0;
parity+=vnodeI[162];
parity+=vnodeI[284];
parity+=vnodeI[292];
parity+=vnodeI[998];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[14310]=parity;
if (cwI[27]==0) responseI[14310]=0; //assymetric
if (responseI[14310] != vnodeI[27]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[284];
parity+=vnodeI[292];
parity+=vnodeI[998];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[83430]=parity;
if (cwI[162]==0) responseI[83430]=0; //assymetric
if (responseI[83430] != vnodeI[162]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[162];
parity+=vnodeI[292];
parity+=vnodeI[998];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[145894]=parity;
if (cwI[284]==0) responseI[145894]=0; //assymetric
if (responseI[145894] != vnodeI[284]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[162];
parity+=vnodeI[284];
parity+=vnodeI[998];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[149990]=parity;
if (cwI[292]==0) responseI[149990]=0; //assymetric
if (responseI[149990] != vnodeI[292]) parityerrors++;
parity=0;
parity+=vnodeI[27];
parity+=vnodeI[162];
parity+=vnodeI[284];
parity+=vnodeI[292];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[511462]=parity;
if (cwI[998]==0) responseI[511462]=0; //assymetric
if (responseI[511462] != vnodeI[998]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[89];
parity+=vnodeI[496];
parity+=vnodeI[999];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38375]=parity;
if (cwI[74]==0) responseI[38375]=0; //assymetric
if (responseI[38375] != vnodeI[74]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[89];
parity+=vnodeI[496];
parity+=vnodeI[999];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40423]=parity;
if (cwI[78]==0) responseI[40423]=0; //assymetric
if (responseI[40423] != vnodeI[78]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[78];
parity+=vnodeI[496];
parity+=vnodeI[999];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[46055]=parity;
if (cwI[89]==0) responseI[46055]=0; //assymetric
if (responseI[46055] != vnodeI[89]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[78];
parity+=vnodeI[89];
parity+=vnodeI[999];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[254439]=parity;
if (cwI[496]==0) responseI[254439]=0; //assymetric
if (responseI[254439] != vnodeI[496]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[78];
parity+=vnodeI[89];
parity+=vnodeI[496];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[511975]=parity;
if (cwI[999]==0) responseI[511975]=0; //assymetric
if (responseI[511975] != vnodeI[999]) parityerrors++;
parity=0;
parity+=vnodeI[146];
parity+=vnodeI[351];
parity+=vnodeI[419];
parity+=vnodeI[1000];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[29160]=parity;
if (cwI[56]==0) responseI[29160]=0; //assymetric
if (responseI[29160] != vnodeI[56]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[351];
parity+=vnodeI[419];
parity+=vnodeI[1000];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75240]=parity;
if (cwI[146]==0) responseI[75240]=0; //assymetric
if (responseI[75240] != vnodeI[146]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[146];
parity+=vnodeI[419];
parity+=vnodeI[1000];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[180200]=parity;
if (cwI[351]==0) responseI[180200]=0; //assymetric
if (responseI[180200] != vnodeI[351]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[146];
parity+=vnodeI[351];
parity+=vnodeI[1000];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[215016]=parity;
if (cwI[419]==0) responseI[215016]=0; //assymetric
if (responseI[215016] != vnodeI[419]) parityerrors++;
parity=0;
parity+=vnodeI[56];
parity+=vnodeI[146];
parity+=vnodeI[351];
parity+=vnodeI[419];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[512488]=parity;
if (cwI[1000]==0) responseI[512488]=0; //assymetric
if (responseI[512488] != vnodeI[1000]) parityerrors++;
parity=0;
parity+=vnodeI[243];
parity+=vnodeI[418];
parity+=vnodeI[464];
parity+=vnodeI[1001];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[105449]=parity;
if (cwI[205]==0) responseI[105449]=0; //assymetric
if (responseI[105449] != vnodeI[205]) parityerrors++;
parity=0;
parity+=vnodeI[205];
parity+=vnodeI[418];
parity+=vnodeI[464];
parity+=vnodeI[1001];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[124905]=parity;
if (cwI[243]==0) responseI[124905]=0; //assymetric
if (responseI[124905] != vnodeI[243]) parityerrors++;
parity=0;
parity+=vnodeI[205];
parity+=vnodeI[243];
parity+=vnodeI[464];
parity+=vnodeI[1001];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[214505]=parity;
if (cwI[418]==0) responseI[214505]=0; //assymetric
if (responseI[214505] != vnodeI[418]) parityerrors++;
parity=0;
parity+=vnodeI[205];
parity+=vnodeI[243];
parity+=vnodeI[418];
parity+=vnodeI[1001];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[238057]=parity;
if (cwI[464]==0) responseI[238057]=0; //assymetric
if (responseI[238057] != vnodeI[464]) parityerrors++;
parity=0;
parity+=vnodeI[205];
parity+=vnodeI[243];
parity+=vnodeI[418];
parity+=vnodeI[464];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[513001]=parity;
if (cwI[1001]==0) responseI[513001]=0; //assymetric
if (responseI[513001] != vnodeI[1001]) parityerrors++;
parity=0;
parity+=vnodeI[264];
parity+=vnodeI[361];
parity+=vnodeI[390];
parity+=vnodeI[1002];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82410]=parity;
if (cwI[160]==0) responseI[82410]=0; //assymetric
if (responseI[82410] != vnodeI[160]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[361];
parity+=vnodeI[390];
parity+=vnodeI[1002];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[135658]=parity;
if (cwI[264]==0) responseI[135658]=0; //assymetric
if (responseI[135658] != vnodeI[264]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[264];
parity+=vnodeI[390];
parity+=vnodeI[1002];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[185322]=parity;
if (cwI[361]==0) responseI[185322]=0; //assymetric
if (responseI[185322] != vnodeI[361]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[264];
parity+=vnodeI[361];
parity+=vnodeI[1002];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200170]=parity;
if (cwI[390]==0) responseI[200170]=0; //assymetric
if (responseI[200170] != vnodeI[390]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[264];
parity+=vnodeI[361];
parity+=vnodeI[390];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[513514]=parity;
if (cwI[1002]==0) responseI[513514]=0; //assymetric
if (responseI[513514] != vnodeI[1002]) parityerrors++;
parity=0;
parity+=vnodeI[127];
parity+=vnodeI[152];
parity+=vnodeI[220];
parity+=vnodeI[1003];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13291]=parity;
if (cwI[25]==0) responseI[13291]=0; //assymetric
if (responseI[13291] != vnodeI[25]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[152];
parity+=vnodeI[220];
parity+=vnodeI[1003];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65515]=parity;
if (cwI[127]==0) responseI[65515]=0; //assymetric
if (responseI[65515] != vnodeI[127]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[127];
parity+=vnodeI[220];
parity+=vnodeI[1003];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78315]=parity;
if (cwI[152]==0) responseI[78315]=0; //assymetric
if (responseI[78315] != vnodeI[152]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[127];
parity+=vnodeI[152];
parity+=vnodeI[1003];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[113131]=parity;
if (cwI[220]==0) responseI[113131]=0; //assymetric
if (responseI[113131] != vnodeI[220]) parityerrors++;
parity=0;
parity+=vnodeI[25];
parity+=vnodeI[127];
parity+=vnodeI[152];
parity+=vnodeI[220];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[514027]=parity;
if (cwI[1003]==0) responseI[514027]=0; //assymetric
if (responseI[514027] != vnodeI[1003]) parityerrors++;
parity=0;
parity+=vnodeI[315];
parity+=vnodeI[316];
parity+=vnodeI[408];
parity+=vnodeI[1004];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[112108]=parity;
if (cwI[218]==0) responseI[112108]=0; //assymetric
if (responseI[112108] != vnodeI[218]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[316];
parity+=vnodeI[408];
parity+=vnodeI[1004];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[161772]=parity;
if (cwI[315]==0) responseI[161772]=0; //assymetric
if (responseI[161772] != vnodeI[315]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[315];
parity+=vnodeI[408];
parity+=vnodeI[1004];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[162284]=parity;
if (cwI[316]==0) responseI[162284]=0; //assymetric
if (responseI[162284] != vnodeI[316]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[315];
parity+=vnodeI[316];
parity+=vnodeI[1004];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[209388]=parity;
if (cwI[408]==0) responseI[209388]=0; //assymetric
if (responseI[209388] != vnodeI[408]) parityerrors++;
parity=0;
parity+=vnodeI[218];
parity+=vnodeI[315];
parity+=vnodeI[316];
parity+=vnodeI[408];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[514540]=parity;
if (cwI[1004]==0) responseI[514540]=0; //assymetric
if (responseI[514540] != vnodeI[1004]) parityerrors++;
parity=0;
parity+=vnodeI[417];
parity+=vnodeI[433];
parity+=vnodeI[449];
parity+=vnodeI[1005];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[212973]=parity;
if (cwI[415]==0) responseI[212973]=0; //assymetric
if (responseI[212973] != vnodeI[415]) parityerrors++;
parity=0;
parity+=vnodeI[415];
parity+=vnodeI[433];
parity+=vnodeI[449];
parity+=vnodeI[1005];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[213997]=parity;
if (cwI[417]==0) responseI[213997]=0; //assymetric
if (responseI[213997] != vnodeI[417]) parityerrors++;
parity=0;
parity+=vnodeI[415];
parity+=vnodeI[417];
parity+=vnodeI[449];
parity+=vnodeI[1005];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[222189]=parity;
if (cwI[433]==0) responseI[222189]=0; //assymetric
if (responseI[222189] != vnodeI[433]) parityerrors++;
parity=0;
parity+=vnodeI[415];
parity+=vnodeI[417];
parity+=vnodeI[433];
parity+=vnodeI[1005];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[230381]=parity;
if (cwI[449]==0) responseI[230381]=0; //assymetric
if (responseI[230381] != vnodeI[449]) parityerrors++;
parity=0;
parity+=vnodeI[415];
parity+=vnodeI[417];
parity+=vnodeI[433];
parity+=vnodeI[449];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[515053]=parity;
if (cwI[1005]==0) responseI[515053]=0; //assymetric
if (responseI[515053] != vnodeI[1005]) parityerrors++;
parity=0;
parity+=vnodeI[385];
parity+=vnodeI[390];
parity+=vnodeI[475];
parity+=vnodeI[1006];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[34286]=parity;
if (cwI[66]==0) responseI[34286]=0; //assymetric
if (responseI[34286] != vnodeI[66]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[390];
parity+=vnodeI[475];
parity+=vnodeI[1006];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[197614]=parity;
if (cwI[385]==0) responseI[197614]=0; //assymetric
if (responseI[197614] != vnodeI[385]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[385];
parity+=vnodeI[475];
parity+=vnodeI[1006];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[200174]=parity;
if (cwI[390]==0) responseI[200174]=0; //assymetric
if (responseI[200174] != vnodeI[390]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[385];
parity+=vnodeI[390];
parity+=vnodeI[1006];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[243694]=parity;
if (cwI[475]==0) responseI[243694]=0; //assymetric
if (responseI[243694] != vnodeI[475]) parityerrors++;
parity=0;
parity+=vnodeI[66];
parity+=vnodeI[385];
parity+=vnodeI[390];
parity+=vnodeI[475];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[515566]=parity;
if (cwI[1006]==0) responseI[515566]=0; //assymetric
if (responseI[515566] != vnodeI[1006]) parityerrors++;
parity=0;
parity+=vnodeI[232];
parity+=vnodeI[375];
parity+=vnodeI[469];
parity+=vnodeI[1007];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[118255]=parity;
if (cwI[230]==0) responseI[118255]=0; //assymetric
if (responseI[118255] != vnodeI[230]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[375];
parity+=vnodeI[469];
parity+=vnodeI[1007];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119279]=parity;
if (cwI[232]==0) responseI[119279]=0; //assymetric
if (responseI[119279] != vnodeI[232]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[232];
parity+=vnodeI[469];
parity+=vnodeI[1007];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[192495]=parity;
if (cwI[375]==0) responseI[192495]=0; //assymetric
if (responseI[192495] != vnodeI[375]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[232];
parity+=vnodeI[375];
parity+=vnodeI[1007];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[240623]=parity;
if (cwI[469]==0) responseI[240623]=0; //assymetric
if (responseI[240623] != vnodeI[469]) parityerrors++;
parity=0;
parity+=vnodeI[230];
parity+=vnodeI[232];
parity+=vnodeI[375];
parity+=vnodeI[469];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[516079]=parity;
if (cwI[1007]==0) responseI[516079]=0; //assymetric
if (responseI[516079] != vnodeI[1007]) parityerrors++;
parity=0;
parity+=vnodeI[165];
parity+=vnodeI[217];
parity+=vnodeI[402];
parity+=vnodeI[1008];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[78832]=parity;
if (cwI[153]==0) responseI[78832]=0; //assymetric
if (responseI[78832] != vnodeI[153]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[217];
parity+=vnodeI[402];
parity+=vnodeI[1008];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[84976]=parity;
if (cwI[165]==0) responseI[84976]=0; //assymetric
if (responseI[84976] != vnodeI[165]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[165];
parity+=vnodeI[402];
parity+=vnodeI[1008];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[111600]=parity;
if (cwI[217]==0) responseI[111600]=0; //assymetric
if (responseI[111600] != vnodeI[217]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[165];
parity+=vnodeI[217];
parity+=vnodeI[1008];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[206320]=parity;
if (cwI[402]==0) responseI[206320]=0; //assymetric
if (responseI[206320] != vnodeI[402]) parityerrors++;
parity=0;
parity+=vnodeI[153];
parity+=vnodeI[165];
parity+=vnodeI[217];
parity+=vnodeI[402];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[516592]=parity;
if (cwI[1008]==0) responseI[516592]=0; //assymetric
if (responseI[516592] != vnodeI[1008]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[147];
parity+=vnodeI[257];
parity+=vnodeI[1009];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[13809]=parity;
if (cwI[26]==0) responseI[13809]=0; //assymetric
if (responseI[13809] != vnodeI[26]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[147];
parity+=vnodeI[257];
parity+=vnodeI[1009];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73201]=parity;
if (cwI[142]==0) responseI[73201]=0; //assymetric
if (responseI[73201] != vnodeI[142]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[142];
parity+=vnodeI[257];
parity+=vnodeI[1009];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[75761]=parity;
if (cwI[147]==0) responseI[75761]=0; //assymetric
if (responseI[75761] != vnodeI[147]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[142];
parity+=vnodeI[147];
parity+=vnodeI[1009];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[132081]=parity;
if (cwI[257]==0) responseI[132081]=0; //assymetric
if (responseI[132081] != vnodeI[257]) parityerrors++;
parity=0;
parity+=vnodeI[26];
parity+=vnodeI[142];
parity+=vnodeI[147];
parity+=vnodeI[257];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[517105]=parity;
if (cwI[1009]==0) responseI[517105]=0; //assymetric
if (responseI[517105] != vnodeI[1009]) parityerrors++;
parity=0;
parity+=vnodeI[179];
parity+=vnodeI[332];
parity+=vnodeI[392];
parity+=vnodeI[1010];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[48114]=parity;
if (cwI[93]==0) responseI[48114]=0; //assymetric
if (responseI[48114] != vnodeI[93]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[332];
parity+=vnodeI[392];
parity+=vnodeI[1010];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[92146]=parity;
if (cwI[179]==0) responseI[92146]=0; //assymetric
if (responseI[92146] != vnodeI[179]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[179];
parity+=vnodeI[392];
parity+=vnodeI[1010];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[170482]=parity;
if (cwI[332]==0) responseI[170482]=0; //assymetric
if (responseI[170482] != vnodeI[332]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[179];
parity+=vnodeI[332];
parity+=vnodeI[1010];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201202]=parity;
if (cwI[392]==0) responseI[201202]=0; //assymetric
if (responseI[201202] != vnodeI[392]) parityerrors++;
parity=0;
parity+=vnodeI[93];
parity+=vnodeI[179];
parity+=vnodeI[332];
parity+=vnodeI[392];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[517618]=parity;
if (cwI[1010]==0) responseI[517618]=0; //assymetric
if (responseI[517618] != vnodeI[1010]) parityerrors++;
parity=0;
parity+=vnodeI[74];
parity+=vnodeI[114];
parity+=vnodeI[234];
parity+=vnodeI[1011];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[19955]=parity;
if (cwI[38]==0) responseI[19955]=0; //assymetric
if (responseI[19955] != vnodeI[38]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[114];
parity+=vnodeI[234];
parity+=vnodeI[1011];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[38387]=parity;
if (cwI[74]==0) responseI[38387]=0; //assymetric
if (responseI[38387] != vnodeI[74]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[74];
parity+=vnodeI[234];
parity+=vnodeI[1011];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[58867]=parity;
if (cwI[114]==0) responseI[58867]=0; //assymetric
if (responseI[58867] != vnodeI[114]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[74];
parity+=vnodeI[114];
parity+=vnodeI[1011];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120307]=parity;
if (cwI[234]==0) responseI[120307]=0; //assymetric
if (responseI[120307] != vnodeI[234]) parityerrors++;
parity=0;
parity+=vnodeI[38];
parity+=vnodeI[74];
parity+=vnodeI[114];
parity+=vnodeI[234];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[518131]=parity;
if (cwI[1011]==0) responseI[518131]=0; //assymetric
if (responseI[518131] != vnodeI[1011]) parityerrors++;
parity=0;
parity+=vnodeI[88];
parity+=vnodeI[158];
parity+=vnodeI[337];
parity+=vnodeI[1012];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[22516]=parity;
if (cwI[43]==0) responseI[22516]=0; //assymetric
if (responseI[22516] != vnodeI[43]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[158];
parity+=vnodeI[337];
parity+=vnodeI[1012];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[45556]=parity;
if (cwI[88]==0) responseI[45556]=0; //assymetric
if (responseI[45556] != vnodeI[88]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[88];
parity+=vnodeI[337];
parity+=vnodeI[1012];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[81396]=parity;
if (cwI[158]==0) responseI[81396]=0; //assymetric
if (responseI[81396] != vnodeI[158]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[88];
parity+=vnodeI[158];
parity+=vnodeI[1012];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173044]=parity;
if (cwI[337]==0) responseI[173044]=0; //assymetric
if (responseI[173044] != vnodeI[337]) parityerrors++;
parity=0;
parity+=vnodeI[43];
parity+=vnodeI[88];
parity+=vnodeI[158];
parity+=vnodeI[337];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[518644]=parity;
if (cwI[1012]==0) responseI[518644]=0; //assymetric
if (responseI[518644] != vnodeI[1012]) parityerrors++;
parity=0;
parity+=vnodeI[142];
parity+=vnodeI[190];
parity+=vnodeI[410];
parity+=vnodeI[1013];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[63989]=parity;
if (cwI[124]==0) responseI[63989]=0; //assymetric
if (responseI[63989] != vnodeI[124]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[190];
parity+=vnodeI[410];
parity+=vnodeI[1013];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[73205]=parity;
if (cwI[142]==0) responseI[73205]=0; //assymetric
if (responseI[73205] != vnodeI[142]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[142];
parity+=vnodeI[410];
parity+=vnodeI[1013];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97781]=parity;
if (cwI[190]==0) responseI[97781]=0; //assymetric
if (responseI[97781] != vnodeI[190]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[142];
parity+=vnodeI[190];
parity+=vnodeI[1013];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[210421]=parity;
if (cwI[410]==0) responseI[210421]=0; //assymetric
if (responseI[210421] != vnodeI[410]) parityerrors++;
parity=0;
parity+=vnodeI[124];
parity+=vnodeI[142];
parity+=vnodeI[190];
parity+=vnodeI[410];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[519157]=parity;
if (cwI[1013]==0) responseI[519157]=0; //assymetric
if (responseI[519157] != vnodeI[1013]) parityerrors++;
parity=0;
parity+=vnodeI[101];
parity+=vnodeI[102];
parity+=vnodeI[346];
parity+=vnodeI[1014];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[5622]=parity;
if (cwI[10]==0) responseI[5622]=0; //assymetric
if (responseI[5622] != vnodeI[10]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[102];
parity+=vnodeI[346];
parity+=vnodeI[1014];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52214]=parity;
if (cwI[101]==0) responseI[52214]=0; //assymetric
if (responseI[52214] != vnodeI[101]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[101];
parity+=vnodeI[346];
parity+=vnodeI[1014];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[52726]=parity;
if (cwI[102]==0) responseI[52726]=0; //assymetric
if (responseI[52726] != vnodeI[102]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[101];
parity+=vnodeI[102];
parity+=vnodeI[1014];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[177654]=parity;
if (cwI[346]==0) responseI[177654]=0; //assymetric
if (responseI[177654] != vnodeI[346]) parityerrors++;
parity=0;
parity+=vnodeI[10];
parity+=vnodeI[101];
parity+=vnodeI[102];
parity+=vnodeI[346];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[519670]=parity;
if (cwI[1014]==0) responseI[519670]=0; //assymetric
if (responseI[519670] != vnodeI[1014]) parityerrors++;
parity=0;
parity+=vnodeI[189];
parity+=vnodeI[228];
parity+=vnodeI[407];
parity+=vnodeI[1015];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[79863]=parity;
if (cwI[155]==0) responseI[79863]=0; //assymetric
if (responseI[79863] != vnodeI[155]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[228];
parity+=vnodeI[407];
parity+=vnodeI[1015];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[97271]=parity;
if (cwI[189]==0) responseI[97271]=0; //assymetric
if (responseI[97271] != vnodeI[189]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[189];
parity+=vnodeI[407];
parity+=vnodeI[1015];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[117239]=parity;
if (cwI[228]==0) responseI[117239]=0; //assymetric
if (responseI[117239] != vnodeI[228]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[189];
parity+=vnodeI[228];
parity+=vnodeI[1015];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[208887]=parity;
if (cwI[407]==0) responseI[208887]=0; //assymetric
if (responseI[208887] != vnodeI[407]) parityerrors++;
parity=0;
parity+=vnodeI[155];
parity+=vnodeI[189];
parity+=vnodeI[228];
parity+=vnodeI[407];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[520183]=parity;
if (cwI[1015]==0) responseI[520183]=0; //assymetric
if (responseI[520183] != vnodeI[1015]) parityerrors++;
parity=0;
parity+=vnodeI[54];
parity+=vnodeI[133];
parity+=vnodeI[338];
parity+=vnodeI[1016];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[4600]=parity;
if (cwI[8]==0) responseI[4600]=0; //assymetric
if (responseI[4600] != vnodeI[8]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[133];
parity+=vnodeI[338];
parity+=vnodeI[1016];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[28152]=parity;
if (cwI[54]==0) responseI[28152]=0; //assymetric
if (responseI[28152] != vnodeI[54]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[54];
parity+=vnodeI[338];
parity+=vnodeI[1016];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[68600]=parity;
if (cwI[133]==0) responseI[68600]=0; //assymetric
if (responseI[68600] != vnodeI[133]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[54];
parity+=vnodeI[133];
parity+=vnodeI[1016];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[173560]=parity;
if (cwI[338]==0) responseI[173560]=0; //assymetric
if (responseI[173560] != vnodeI[338]) parityerrors++;
parity=0;
parity+=vnodeI[8];
parity+=vnodeI[54];
parity+=vnodeI[133];
parity+=vnodeI[338];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[520696]=parity;
if (cwI[1016]==0) responseI[520696]=0; //assymetric
if (responseI[520696] != vnodeI[1016]) parityerrors++;
parity=0;
parity+=vnodeI[78];
parity+=vnodeI[115];
parity+=vnodeI[209];
parity+=vnodeI[1017];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[12281]=parity;
if (cwI[23]==0) responseI[12281]=0; //assymetric
if (responseI[12281] != vnodeI[23]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[115];
parity+=vnodeI[209];
parity+=vnodeI[1017];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[40441]=parity;
if (cwI[78]==0) responseI[40441]=0; //assymetric
if (responseI[40441] != vnodeI[78]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[78];
parity+=vnodeI[209];
parity+=vnodeI[1017];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[59385]=parity;
if (cwI[115]==0) responseI[59385]=0; //assymetric
if (responseI[59385] != vnodeI[115]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[78];
parity+=vnodeI[115];
parity+=vnodeI[1017];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[107513]=parity;
if (cwI[209]==0) responseI[107513]=0; //assymetric
if (responseI[107513] != vnodeI[209]) parityerrors++;
parity=0;
parity+=vnodeI[23];
parity+=vnodeI[78];
parity+=vnodeI[115];
parity+=vnodeI[209];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[521209]=parity;
if (cwI[1017]==0) responseI[521209]=0; //assymetric
if (responseI[521209] != vnodeI[1017]) parityerrors++;
parity=0;
parity+=vnodeI[161];
parity+=vnodeI[234];
parity+=vnodeI[393];
parity+=vnodeI[1018];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23546]=parity;
if (cwI[45]==0) responseI[23546]=0; //assymetric
if (responseI[23546] != vnodeI[45]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[234];
parity+=vnodeI[393];
parity+=vnodeI[1018];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82938]=parity;
if (cwI[161]==0) responseI[82938]=0; //assymetric
if (responseI[82938] != vnodeI[161]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[161];
parity+=vnodeI[393];
parity+=vnodeI[1018];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120314]=parity;
if (cwI[234]==0) responseI[120314]=0; //assymetric
if (responseI[120314] != vnodeI[234]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[161];
parity+=vnodeI[234];
parity+=vnodeI[1018];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[201722]=parity;
if (cwI[393]==0) responseI[201722]=0; //assymetric
if (responseI[201722] != vnodeI[393]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[161];
parity+=vnodeI[234];
parity+=vnodeI[393];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[521722]=parity;
if (cwI[1018]==0) responseI[521722]=0; //assymetric
if (responseI[521722] != vnodeI[1018]) parityerrors++;
parity=0;
parity+=vnodeI[103];
parity+=vnodeI[326];
parity+=vnodeI[382];
parity+=vnodeI[1019];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[32763]=parity;
if (cwI[63]==0) responseI[32763]=0; //assymetric
if (responseI[32763] != vnodeI[63]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[326];
parity+=vnodeI[382];
parity+=vnodeI[1019];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[53243]=parity;
if (cwI[103]==0) responseI[53243]=0; //assymetric
if (responseI[53243] != vnodeI[103]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[103];
parity+=vnodeI[382];
parity+=vnodeI[1019];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[167419]=parity;
if (cwI[326]==0) responseI[167419]=0; //assymetric
if (responseI[167419] != vnodeI[326]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[103];
parity+=vnodeI[326];
parity+=vnodeI[1019];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[196091]=parity;
if (cwI[382]==0) responseI[196091]=0; //assymetric
if (responseI[196091] != vnodeI[382]) parityerrors++;
parity=0;
parity+=vnodeI[63];
parity+=vnodeI[103];
parity+=vnodeI[326];
parity+=vnodeI[382];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[522235]=parity;
if (cwI[1019]==0) responseI[522235]=0; //assymetric
if (responseI[522235] != vnodeI[1019]) parityerrors++;
parity=0;
parity+=vnodeI[160];
parity+=vnodeI[182];
parity+=vnodeI[386];
parity+=vnodeI[1020];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[23548]=parity;
if (cwI[45]==0) responseI[23548]=0; //assymetric
if (responseI[23548] != vnodeI[45]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[182];
parity+=vnodeI[386];
parity+=vnodeI[1020];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[82428]=parity;
if (cwI[160]==0) responseI[82428]=0; //assymetric
if (responseI[82428] != vnodeI[160]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[160];
parity+=vnodeI[386];
parity+=vnodeI[1020];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[93692]=parity;
if (cwI[182]==0) responseI[93692]=0; //assymetric
if (responseI[93692] != vnodeI[182]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[160];
parity+=vnodeI[182];
parity+=vnodeI[1020];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[198140]=parity;
if (cwI[386]==0) responseI[198140]=0; //assymetric
if (responseI[198140] != vnodeI[386]) parityerrors++;
parity=0;
parity+=vnodeI[45];
parity+=vnodeI[160];
parity+=vnodeI[182];
parity+=vnodeI[386];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[522748]=parity;
if (cwI[1020]==0) responseI[522748]=0; //assymetric
if (responseI[522748] != vnodeI[1020]) parityerrors++;
parity=0;
parity+=vnodeI[126];
parity+=vnodeI[360];
parity+=vnodeI[426];
parity+=vnodeI[482];
parity+=vnodeI[1021];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[1533]=parity;
if (cwI[2]==0) responseI[1533]=0; //assymetric
if (responseI[1533] != vnodeI[2]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[360];
parity+=vnodeI[426];
parity+=vnodeI[482];
parity+=vnodeI[1021];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[65021]=parity;
if (cwI[126]==0) responseI[65021]=0; //assymetric
if (responseI[65021] != vnodeI[126]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[126];
parity+=vnodeI[426];
parity+=vnodeI[482];
parity+=vnodeI[1021];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[184829]=parity;
if (cwI[360]==0) responseI[184829]=0; //assymetric
if (responseI[184829] != vnodeI[360]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[126];
parity+=vnodeI[360];
parity+=vnodeI[482];
parity+=vnodeI[1021];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[218621]=parity;
if (cwI[426]==0) responseI[218621]=0; //assymetric
if (responseI[218621] != vnodeI[426]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[126];
parity+=vnodeI[360];
parity+=vnodeI[426];
parity+=vnodeI[1021];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[247293]=parity;
if (cwI[482]==0) responseI[247293]=0; //assymetric
if (responseI[247293] != vnodeI[482]) parityerrors++;
parity=0;
parity+=vnodeI[2];
parity+=vnodeI[126];
parity+=vnodeI[360];
parity+=vnodeI[426];
parity+=vnodeI[482];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[523261]=parity;
if (cwI[1021]==0) responseI[523261]=0; //assymetric
if (responseI[523261] != vnodeI[1021]) parityerrors++;
parity=0;
parity+=vnodeI[85];
parity+=vnodeI[232];
parity+=vnodeI[256];
parity+=vnodeI[1022];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[510]=parity;
if (cwI[0]==0) responseI[510]=0; //assymetric
if (responseI[510] != vnodeI[0]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[232];
parity+=vnodeI[256];
parity+=vnodeI[1022];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[44030]=parity;
if (cwI[85]==0) responseI[44030]=0; //assymetric
if (responseI[44030] != vnodeI[85]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[85];
parity+=vnodeI[256];
parity+=vnodeI[1022];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[119294]=parity;
if (cwI[232]==0) responseI[119294]=0; //assymetric
if (responseI[119294] != vnodeI[232]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[85];
parity+=vnodeI[232];
parity+=vnodeI[1022];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[131582]=parity;
if (cwI[256]==0) responseI[131582]=0; //assymetric
if (responseI[131582] != vnodeI[256]) parityerrors++;
parity=0;
parity+=vnodeI[0];
parity+=vnodeI[85];
parity+=vnodeI[232];
parity+=vnodeI[256];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[523774]=parity;
if (cwI[1022]==0) responseI[523774]=0; //assymetric
if (responseI[523774] != vnodeI[1022]) parityerrors++;
parity=0;
parity+=vnodeI[234];
parity+=vnodeI[378];
parity+=vnodeI[399];
parity+=vnodeI[1023];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[103935]=parity;
if (cwI[202]==0) responseI[103935]=0; //assymetric
if (responseI[103935] != vnodeI[202]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[378];
parity+=vnodeI[399];
parity+=vnodeI[1023];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[120319]=parity;
if (cwI[234]==0) responseI[120319]=0; //assymetric
if (responseI[120319] != vnodeI[234]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[234];
parity+=vnodeI[399];
parity+=vnodeI[1023];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[194047]=parity;
if (cwI[378]==0) responseI[194047]=0; //assymetric
if (responseI[194047] != vnodeI[378]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[234];
parity+=vnodeI[378];
parity+=vnodeI[1023];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[204799]=parity;
if (cwI[399]==0) responseI[204799]=0; //assymetric
if (responseI[204799] != vnodeI[399]) parityerrors++;
parity=0;
parity+=vnodeI[202];
parity+=vnodeI[234];
parity+=vnodeI[378];
parity+=vnodeI[399];
parity%=2; // Response is the value that we 
	  // need for the sum to be zero
responseI[524287]=parity;
if (cwI[1023]==0) responseI[524287]=0; //assymetric
if (responseI[524287] != vnodeI[1023]) parityerrors++;
if (!parityerrors) break; // all parity checks OK
}
